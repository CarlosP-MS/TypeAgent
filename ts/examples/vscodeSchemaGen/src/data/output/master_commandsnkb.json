[
  {
    "id": "noop"
  },
  {
    "id": "undo",
    "key": "z",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "id": "default:undo"
  },
  {
    "id": "redo",
    "key": "ctrl+y"
  },
  {
    "id": "default:redo"
  },
  {
    "id": "editor.action.selectAll",
    "key": "ctrl+a"
  },
  {
    "id": "_moveTo"
  },
  {
    "id": "_moveToSelect"
  },
  {
    "id": "columnSelect"
  },
  {
    "id": "cursorColumnSelectLeft",
    "key": "shift+left",
    "when": "editorColumnSelection && textInputFocus"
  },
  {
    "id": "cursorColumnSelectRight",
    "key": "shift+right",
    "when": "editorColumnSelection && textInputFocus"
  },
  {
    "id": "cursorColumnSelectUp",
    "key": "shift+up",
    "when": "editorColumnSelection && textInputFocus"
  },
  {
    "id": "cursorColumnSelectPageUp",
    "key": "shift+pageup",
    "when": "editorColumnSelection && textInputFocus"
  },
  {
    "id": "cursorColumnSelectDown",
    "key": "shift+down",
    "when": "editorColumnSelection && textInputFocus"
  },
  {
    "id": "cursorColumnSelectPageDown",
    "key": "shift+pagedown",
    "when": "editorColumnSelection && textInputFocus"
  },
  {
    "id": "cursorMove",
    "metadata": {
      "description": "Move cursor to a logical position in the view",
      "args": [
        {
          "name": "Cursor move argument object",
          "description": "Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'to': A mandatory logical position value providing where to move the cursor.\n\t\t\t\t\t\t```\n\t\t\t\t\t\t'left', 'right', 'up', 'down', 'prevBlankLine', 'nextBlankLine',\n\t\t\t\t\t\t'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter'\n\t\t\t\t\t\t'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter'\n\t\t\t\t\t\t'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside'\n\t\t\t\t\t\t```\n\t\t\t\t\t* 'by': Unit to move. Default is computed based on 'to' value.\n\t\t\t\t\t\t```\n\t\t\t\t\t\t'line', 'wrappedLine', 'character', 'halfLine'\n\t\t\t\t\t\t```\n\t\t\t\t\t* 'value': Number of units to move. Default is '1'.\n\t\t\t\t\t* 'select': If 'true' makes the selection. Default is 'false'.\n\t\t\t\t",
          "schema": {
            "type": "object",
            "required": [
              "to"
            ],
            "properties": {
              "to": {
                "type": "string",
                "enum": [
                  "left",
                  "right",
                  "up",
                  "down",
                  "prevBlankLine",
                  "nextBlankLine",
                  "wrappedLineStart",
                  "wrappedLineEnd",
                  "wrappedLineColumnCenter",
                  "wrappedLineFirstNonWhitespaceCharacter",
                  "wrappedLineLastNonWhitespaceCharacter",
                  "viewPortTop",
                  "viewPortCenter",
                  "viewPortBottom",
                  "viewPortIfOutside"
                ]
              },
              "by": {
                "type": "string",
                "enum": [
                  "line",
                  "wrappedLine",
                  "character",
                  "halfLine"
                ]
              },
              "value": {
                "type": "number",
                "default": 1
              },
              "select": {
                "type": "boolean",
                "default": false
              }
            }
          }
        }
      ]
    }
  },
  {
    "id": "cursorLeft",
    "key": "left",
    "when": "textInputFocus"
  },
  {
    "id": "cursorLeftSelect",
    "key": "shift+left",
    "when": "textInputFocus"
  },
  {
    "id": "cursorRight",
    "key": "right",
    "when": "textInputFocus"
  },
  {
    "id": "cursorRightSelect",
    "key": "shift+right",
    "when": "textInputFocus"
  },
  {
    "id": "cursorUp",
    "key": "up",
    "when": "textInputFocus"
  },
  {
    "id": "cursorUpSelect",
    "key": "shift+up",
    "when": "textInputFocus"
  },
  {
    "id": "cursorPageUp",
    "key": "pageup",
    "when": "textInputFocus"
  },
  {
    "id": "cursorPageUpSelect",
    "key": "shift+pageup",
    "when": "textInputFocus"
  },
  {
    "id": "cursorDown",
    "key": "down",
    "when": "textInputFocus"
  },
  {
    "id": "cursorDownSelect",
    "key": "shift+down",
    "when": "textInputFocus"
  },
  {
    "id": "cursorPageDown",
    "key": "pagedown",
    "when": "textInputFocus"
  },
  {
    "id": "cursorPageDownSelect",
    "key": "shift+pagedown",
    "when": "textInputFocus"
  },
  {
    "id": "createCursor"
  },
  {
    "id": "_lastCursorMoveToSelect"
  },
  {
    "id": "cursorHome",
    "key": "home",
    "when": "textInputFocus"
  },
  {
    "id": "cursorHomeSelect",
    "key": "shift+home",
    "when": "textInputFocus"
  },
  {
    "id": "cursorLineStart"
  },
  {
    "id": "cursorLineStartSelect"
  },
  {
    "id": "cursorEnd",
    "metadata": {
      "description": "Go to End",
      "args": [
        {
          "name": "args",
          "schema": {
            "type": "object",
            "properties": {
              "sticky": {
                "description": "Stick to the end even when going to longer lines",
                "type": "boolean",
                "default": false
              }
            }
          }
        }
      ]
    },
    "key": "end",
    "when": "textInputFocus"
  },
  {
    "id": "cursorEndSelect",
    "metadata": {
      "description": "Select to End",
      "args": [
        {
          "name": "args",
          "schema": {
            "type": "object",
            "properties": {
              "sticky": {
                "description": "Stick to the end even when going to longer lines",
                "type": "boolean",
                "default": false
              }
            }
          }
        }
      ]
    },
    "key": "shift+end",
    "when": "textInputFocus"
  },
  {
    "id": "cursorLineEnd"
  },
  {
    "id": "cursorLineEndSelect"
  },
  {
    "id": "cursorTop",
    "key": "ctrl+home",
    "when": "textInputFocus"
  },
  {
    "id": "cursorTopSelect",
    "key": "ctrl+shift+home",
    "when": "textInputFocus"
  },
  {
    "id": "cursorBottom",
    "key": "ctrl+end",
    "when": "textInputFocus"
  },
  {
    "id": "cursorBottomSelect",
    "key": "ctrl+shift+end",
    "when": "textInputFocus"
  },
  {
    "id": "editorScroll",
    "metadata": {
      "description": "Scroll editor in the given direction",
      "args": [
        {
          "name": "Editor scroll argument object",
          "description": "Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'to': A mandatory direction value.\n\t\t\t\t\t\t```\n\t\t\t\t\t\t'up', 'down'\n\t\t\t\t\t\t```\n\t\t\t\t\t* 'by': Unit to move. Default is computed based on 'to' value.\n\t\t\t\t\t\t```\n\t\t\t\t\t\t'line', 'wrappedLine', 'page', 'halfPage', 'editor'\n\t\t\t\t\t\t```\n\t\t\t\t\t* 'value': Number of units to move. Default is '1'.\n\t\t\t\t\t* 'revealCursor': If 'true' reveals the cursor if it is outside view port.\n\t\t\t\t",
          "schema": {
            "type": "object",
            "required": [
              "to"
            ],
            "properties": {
              "to": {
                "type": "string",
                "enum": [
                  "up",
                  "down"
                ]
              },
              "by": {
                "type": "string",
                "enum": [
                  "line",
                  "wrappedLine",
                  "page",
                  "halfPage",
                  "editor"
                ]
              },
              "value": {
                "type": "number",
                "default": 1
              },
              "revealCursor": {
                "type": "boolean"
              }
            }
          }
        }
      ]
    }
  },
  {
    "id": "scrollLineUp",
    "key": "ctrl+up",
    "when": "textInputFocus"
  },
  {
    "id": "scrollPageUp",
    "key": "alt+pageup",
    "when": "textInputFocus"
  },
  {
    "id": "scrollEditorTop"
  },
  {
    "id": "scrollLineDown",
    "key": "ctrl+down",
    "when": "textInputFocus"
  },
  {
    "id": "scrollPageDown",
    "key": "alt+pagedown",
    "when": "textInputFocus"
  },
  {
    "id": "scrollEditorBottom"
  },
  {
    "id": "scrollLeft"
  },
  {
    "id": "scrollRight"
  },
  {
    "id": "_wordSelect"
  },
  {
    "id": "_wordSelectDrag"
  },
  {
    "id": "lastCursorWordSelect"
  },
  {
    "id": "_lineSelect"
  },
  {
    "id": "_lineSelectDrag"
  },
  {
    "id": "lastCursorLineSelect"
  },
  {
    "id": "lastCursorLineSelectDrag"
  },
  {
    "id": "cancelSelection",
    "key": "escape",
    "when": "editorHasSelection && textInputFocus"
  },
  {
    "id": "removeSecondaryCursors",
    "key": "escape",
    "when": "editorHasMultipleSelections && textInputFocus"
  },
  {
    "id": "revealLine",
    "metadata": {
      "description": "Reveal the given line at the given logical position",
      "args": [
        {
          "name": "Reveal line argument object",
          "description": "Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'lineNumber': A mandatory line number value.\n\t\t\t\t\t* 'at': Logical position at which line has to be revealed.\n\t\t\t\t\t\t```\n\t\t\t\t\t\t'top', 'center', 'bottom'\n\t\t\t\t\t\t```\n\t\t\t\t",
          "schema": {
            "type": "object",
            "required": [
              "lineNumber"
            ],
            "properties": {
              "lineNumber": {
                "type": [
                  "number",
                  "string"
                ]
              },
              "at": {
                "type": "string",
                "enum": [
                  "top",
                  "center",
                  "bottom"
                ]
              }
            }
          }
        }
      ]
    }
  },
  {
    "id": "setSelection"
  },
  {
    "id": "lineBreakInsert"
  },
  {
    "id": "outdent",
    "key": "shift+tab",
    "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus"
  },
  {
    "id": "tab",
    "key": "tab",
    "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus"
  },
  {
    "id": "deleteLeft",
    "key": "backspace",
    "when": "textInputFocus"
  },
  {
    "id": "deleteRight",
    "key": "delete",
    "when": "textInputFocus"
  },
  {
    "id": "default:type"
  },
  {
    "id": "type",
    "metadata": {
      "description": "Type",
      "args": [
        {
          "name": "args",
          "schema": {
            "type": "object",
            "required": [
              "text"
            ],
            "properties": {
              "text": {
                "type": "string"
              }
            }
          }
        }
      ]
    }
  },
  {
    "id": "default:replacePreviousChar"
  },
  {
    "id": "replacePreviousChar"
  },
  {
    "id": "default:compositionType"
  },
  {
    "id": "compositionType"
  },
  {
    "id": "default:compositionStart"
  },
  {
    "id": "compositionStart"
  },
  {
    "id": "default:compositionEnd"
  },
  {
    "id": "compositionEnd"
  },
  {
    "id": "default:paste"
  },
  {
    "id": "paste"
  },
  {
    "id": "default:cut"
  },
  {
    "id": "cut"
  },
  {
    "id": "diffEditor.toggleCollapseUnchangedRegions",
    "metadata": {
      "description": {
        "value": "Toggle Collapse Unchanged Regions",
        "original": "Toggle Collapse Unchanged Regions"
      }
    }
  },
  {
    "id": "diffEditor.toggleShowMovedCodeBlocks",
    "metadata": {
      "description": {
        "value": "Toggle Show Moved Code Blocks",
        "original": "Toggle Show Moved Code Blocks"
      }
    }
  },
  {
    "id": "diffEditor.toggleUseInlineViewWhenSpaceIsLimited",
    "metadata": {
      "description": {
        "value": "Toggle Use Inline View When Space Is Limited",
        "original": "Toggle Use Inline View When Space Is Limited"
      }
    }
  },
  {
    "id": "diffEditor.revert",
    "metadata": {
      "description": {
        "value": "Revert",
        "original": "Revert"
      }
    }
  },
  {
    "id": "diffEditor.switchSide",
    "metadata": {
      "description": {
        "value": "Switch Side",
        "original": "Switch Side"
      }
    }
  },
  {
    "id": "diffEditor.exitCompareMove",
    "metadata": {
      "description": {
        "value": "Exit Compare Move",
        "original": "Exit Compare Move"
      }
    },
    "key": "escape",
    "when": "comparingMovedCode"
  },
  {
    "id": "diffEditor.collapseAllUnchangedRegions",
    "metadata": {
      "description": {
        "value": "Collapse All Unchanged Regions",
        "original": "Collapse All Unchanged Regions"
      }
    }
  },
  {
    "id": "diffEditor.showAllUnchangedRegions",
    "metadata": {
      "description": {
        "value": "Show All Unchanged Regions",
        "original": "Show All Unchanged Regions"
      }
    }
  },
  {
    "id": "editor.action.diffReview.next"
  },
  {
    "id": "editor.action.accessibleDiffViewer.next",
    "metadata": {
      "description": {
        "value": "Go to Next Difference",
        "original": "Go to Next Difference"
      }
    },
    "key": "f7",
    "when": "isInDiffEditor"
  },
  {
    "id": "editor.action.diffReview.prev"
  },
  {
    "id": "editor.action.accessibleDiffViewer.prev",
    "metadata": {
      "description": {
        "value": "Go to Previous Difference",
        "original": "Go to Previous Difference"
      }
    },
    "key": "shift+f7",
    "when": "isInDiffEditor"
  },
  {
    "id": "editor.action.setSelectionAnchor",
    "key": "ctrl+k ctrl+b",
    "when": "editorTextFocus"
  },
  {
    "id": "editor.action.goToSelectionAnchor"
  },
  {
    "id": "editor.action.selectFromAnchorToCursor",
    "key": "ctrl+k ctrl+k",
    "when": "editorTextFocus && selectionAnchorSet"
  },
  {
    "id": "editor.action.cancelSelectionAnchor",
    "key": "escape",
    "when": "editorTextFocus && selectionAnchorSet"
  },
  {
    "id": "editor.action.selectToBracket",
    "metadata": {
      "description": {
        "value": "Select the text inside and including the brackets or curly braces",
        "original": "Select the text inside and including the brackets or curly braces"
      },
      "args": [
        {
          "name": "args",
          "schema": {
            "type": "object",
            "properties": {
              "selectBrackets": {
                "type": "boolean",
                "default": true
              }
            }
          }
        }
      ]
    }
  },
  {
    "id": "editor.action.jumpToBracket",
    "key": "ctrl+shift+\\",
    "when": "editorTextFocus"
  },
  {
    "id": "editor.action.removeBrackets",
    "key": "ctrl+alt+backspace",
    "when": "editorTextFocus"
  },
  {
    "id": "editor.action.moveCarretLeftAction"
  },
  {
    "id": "editor.action.moveCarretRightAction"
  },
  {
    "id": "editor.action.transposeLetters"
  },
  {
    "id": "editor.cancelOperation",
    "key": "escape",
    "when": "cancellableOperation"
  },
  {
    "id": "leaveEditorMessage",
    "key": "escape",
    "when": "messageVisible"
  },
  {
    "id": "editor.action.clipboardCutAction",
    "key": "ctrl+x"
  },
  {
    "id": "editor.action.clipboardCopyAction",
    "key": "ctrl+c"
  },
  {
    "id": "editor.action.clipboardPasteAction",
    "key": "ctrl+v"
  },
  {
    "id": "editor.action.clipboardCopyWithSyntaxHighlightingAction"
  },
  {
    "id": "_executeCodeActionProvider"
  },
  {
    "id": "hideCodeActionWidget",
    "metadata": {
      "description": {
        "value": "Hide action widget",
        "original": "Hide action widget"
      }
    },
    "key": "escape",
    "when": "codeActionMenuVisible"
  },
  {
    "id": "selectPrevCodeAction",
    "metadata": {
      "description": {
        "value": "Select previous action",
        "original": "Select previous action"
      }
    },
    "key": "up",
    "when": "codeActionMenuVisible"
  },
  {
    "id": "selectNextCodeAction",
    "metadata": {
      "description": {
        "value": "Select next action",
        "original": "Select next action"
      }
    },
    "key": "down",
    "when": "codeActionMenuVisible"
  },
  {
    "id": "acceptSelectedCodeAction",
    "metadata": {
      "description": {
        "value": "Accept selected action",
        "original": "Accept selected action"
      }
    },
    "key": "enter",
    "when": "codeActionMenuVisible"
  },
  {
    "id": "previewSelectedCodeAction",
    "metadata": {
      "description": {
        "value": "Preview selected action",
        "original": "Preview selected action"
      }
    },
    "key": "ctrl+enter",
    "when": "codeActionMenuVisible"
  },
  {
    "id": "editor.action.quickFix",
    "key": "ctrl+.",
    "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly"
  },
  {
    "id": "editor.action.refactor",
    "metadata": {
      "description": "Refactor...",
      "args": [
        {
          "name": "args",
          "schema": {
            "type": "object",
            "defaultSnippets": [
              {
                "body": {
                  "kind": ""
                }
              }
            ],
            "properties": {
              "kind": {
                "type": "string",
                "description": "Kind of the code action to run."
              },
              "apply": {
                "type": "string",
                "description": "Controls when the returned actions are applied.",
                "default": "ifSingle",
                "enum": [
                  "first",
                  "ifSingle",
                  "never"
                ],
                "enumDescriptions": [
                  "Always apply the first returned code action.",
                  "Apply the first returned code action if it is the only one.",
                  "Do not apply the returned code actions."
                ]
              },
              "preferred": {
                "type": "boolean",
                "default": false,
                "description": "Controls if only preferred code actions should be returned."
              }
            }
          }
        }
      ]
    },
    "key": "ctrl+shift+r",
    "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly"
  },
  {
    "id": "editor.action.sourceAction",
    "metadata": {
      "description": "Source Action...",
      "args": [
        {
          "name": "args",
          "schema": {
            "type": "object",
            "defaultSnippets": [
              {
                "body": {
                  "kind": ""
                }
              }
            ],
            "properties": {
              "kind": {
                "type": "string",
                "description": "Kind of the code action to run."
              },
              "apply": {
                "type": "string",
                "description": "Controls when the returned actions are applied.",
                "default": "ifSingle",
                "enum": [
                  "first",
                  "ifSingle",
                  "never"
                ],
                "enumDescriptions": [
                  "Always apply the first returned code action.",
                  "Apply the first returned code action if it is the only one.",
                  "Do not apply the returned code actions."
                ]
              },
              "preferred": {
                "type": "boolean",
                "default": false,
                "description": "Controls if only preferred code actions should be returned."
              }
            }
          }
        }
      ]
    }
  },
  {
    "id": "editor.action.organizeImports",
    "key": "shift+alt+o",
    "when": "textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/"
  },
  {
    "id": "editor.action.autoFix",
    "key": "shift+alt+.",
    "when": "textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/"
  },
  {
    "id": "editor.action.fixAll"
  },
  {
    "id": "editor.action.codeAction",
    "metadata": {
      "description": "Trigger a code action",
      "args": [
        {
          "name": "args",
          "schema": {
            "type": "object",
            "defaultSnippets": [
              {
                "body": {
                  "kind": ""
                }
              }
            ],
            "properties": {
              "kind": {
                "type": "string",
                "description": "Kind of the code action to run."
              },
              "apply": {
                "type": "string",
                "description": "Controls when the returned actions are applied.",
                "default": "ifSingle",
                "enum": [
                  "first",
                  "ifSingle",
                  "never"
                ],
                "enumDescriptions": [
                  "Always apply the first returned code action.",
                  "Apply the first returned code action if it is the only one.",
                  "Do not apply the returned code actions."
                ]
              },
              "preferred": {
                "type": "boolean",
                "default": false,
                "description": "Controls if only preferred code actions should be returned."
              }
            }
          }
        }
      ]
    }
  },
  {
    "id": "_executeCodeLensProvider"
  },
  {
    "id": "codelens.showLensesInCurrentLine"
  },
  {
    "id": "_executeHoverProvider"
  },
  {
    "id": "_executeHoverProvider_recursive"
  },
  {
    "id": "togglePeekWidgetFocus",
    "key": "ctrl+k f2",
    "when": "inReferenceSearchEditor || referenceSearchVisible"
  },
  {
    "id": "goToNextReference",
    "key": "f4",
    "when": "inReferenceSearchEditor || referenceSearchVisible"
  },
  {
    "id": "goToPreviousReference",
    "key": "shift+f4",
    "when": "inReferenceSearchEditor || referenceSearchVisible"
  },
  {
    "id": "goToNextReferenceFromEmbeddedEditor"
  },
  {
    "id": "goToPreviousReferenceFromEmbeddedEditor"
  },
  {
    "id": "closeReferenceSearchEditor"
  },
  {
    "id": "closeReferenceSearch",
    "key": "escape",
    "when": "editorTextFocus && referenceSearchVisible && !config.editor.stablePeek || referenceSearchVisible && !config.editor.stablePeek && !inputFocus"
  },
  {
    "id": "revealReference",
    "key": "enter",
    "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand && !treestickyScrollFocused"
  },
  {
    "id": "openReferenceToSide",
    "key": "ctrl+enter",
    "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand && !treestickyScrollFocused"
  },
  {
    "id": "openReference"
  },
  {
    "id": "editor.gotoNextSymbolFromResult",
    "key": "f12",
    "when": "hasSymbols"
  },
  {
    "id": "editor.gotoNextSymbolFromResult.cancel",
    "key": "escape",
    "when": "hasSymbols"
  },
  {
    "id": "_executeDefinitionProvider"
  },
  {
    "id": "_executeDefinitionProvider_recursive"
  },
  {
    "id": "_executeTypeDefinitionProvider"
  },
  {
    "id": "_executeTypeDefinitionProvider_recursive"
  },
  {
    "id": "_executeDeclarationProvider"
  },
  {
    "id": "_executeDeclarationProvider_recursive"
  },
  {
    "id": "_executeReferenceProvider"
  },
  {
    "id": "_executeReferenceProvider_recursive"
  },
  {
    "id": "_executeImplementationProvider"
  },
  {
    "id": "_executeImplementationProvider_recursive"
  },
  {
    "id": "editor.action.goToDeclaration"
  },
  {
    "id": "editor.action.revealDefinition",
    "metadata": {
      "description": {
        "value": "Go to Definition",
        "original": "Go to Definition",
        "mnemonicTitle": "Go to &&Definition"
      }
    },
    "key": "ctrl+f12",
    "when": "editorHasDefinitionProvider && editorTextFocus && isWeb"
  },
  {
    "id": "editor.action.openDeclarationToTheSide"
  },
  {
    "id": "editor.action.revealDefinitionAside",
    "metadata": {
      "description": {
        "value": "Open Definition to the Side",
        "original": "Open Definition to the Side"
      }
    },
    "key": "ctrl+k ctrl+f12",
    "when": "editorHasDefinitionProvider && editorTextFocus && isWeb && !isInEmbeddedEditor"
  },
  {
    "id": "editor.action.previewDeclaration"
  },
  {
    "id": "editor.action.peekDefinition",
    "metadata": {
      "description": {
        "value": "Peek Definition",
        "original": "Peek Definition"
      }
    },
    "key": "alt+f12",
    "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
  },
  {
    "id": "editor.action.revealDeclaration",
    "metadata": {
      "description": {
        "value": "Go to Declaration",
        "original": "Go to Declaration",
        "mnemonicTitle": "Go to &&Declaration"
      }
    }
  },
  {
    "id": "editor.action.peekDeclaration",
    "metadata": {
      "description": {
        "value": "Peek Declaration",
        "original": "Peek Declaration"
      }
    }
  },
  {
    "id": "editor.action.goToTypeDefinition",
    "metadata": {
      "description": {
        "value": "Go to Type Definition",
        "original": "Go to Type Definition",
        "mnemonicTitle": "Go to &&Type Definition"
      }
    }
  },
  {
    "id": "editor.action.peekTypeDefinition",
    "metadata": {
      "description": {
        "value": "Peek Type Definition",
        "original": "Peek Type Definition"
      }
    }
  },
  {
    "id": "editor.action.goToImplementation",
    "metadata": {
      "description": {
        "value": "Go to Implementations",
        "original": "Go to Implementations",
        "mnemonicTitle": "Go to &&Implementations"
      }
    },
    "key": "ctrl+f12",
    "when": "editorHasImplementationProvider && editorTextFocus"
  },
  {
    "id": "editor.action.peekImplementation",
    "metadata": {
      "description": {
        "value": "Peek Implementations",
        "original": "Peek Implementations"
      }
    },
    "key": "ctrl+shift+f12",
    "when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
  },
  {
    "id": "editor.action.goToReferences",
    "metadata": {
      "description": {
        "value": "Go to References",
        "original": "Go to References",
        "mnemonicTitle": "Go to &&References"
      }
    },
    "key": "shift+f12",
    "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
  },
  {
    "id": "editor.action.referenceSearch.trigger",
    "metadata": {
      "description": {
        "value": "Peek References",
        "original": "Peek References"
      }
    }
  },
  {
    "id": "editor.action.goToLocations",
    "metadata": {
      "description": "Go to locations from a position in a file",
      "args": [
        {
          "name": "uri",
          "description": "The text document in which to start"
        },
        {
          "name": "position",
          "description": "The position at which to start"
        },
        {
          "name": "locations",
          "description": "An array of locations."
        },
        {
          "name": "multiple",
          "description": "Define what to do when having multiple results, either `peek`, `gotoAndPeek`, or `goto`"
        },
        {
          "name": "noResultsMessage",
          "description": "Human readable message that shows when locations is empty."
        }
      ]
    }
  },
  {
    "id": "editor.action.peekLocations",
    "metadata": {
      "description": "Peek locations from a position in a file",
      "args": [
        {
          "name": "uri",
          "description": "The text document in which to start"
        },
        {
          "name": "position",
          "description": "The position at which to start"
        },
        {
          "name": "locations",
          "description": "An array of locations."
        },
        {
          "name": "multiple",
          "description": "Define what to do when having multiple results, either `peek`, `gotoAndPeek`, or `goto`"
        }
      ]
    }
  },
  {
    "id": "editor.action.findReferences"
  },
  {
    "id": "editor.action.showReferences"
  },
  {
    "id": "_executeInlayHintProvider"
  },
  {
    "id": "editor.action.hideColorPicker",
    "metadata": {
      "description": {
        "value": "Hide the standalone color picker.",
        "original": "Hide the standalone color picker."
      }
    },
    "key": "escape",
    "when": "standaloneColorPickerVisible"
  },
  {
    "id": "editor.action.insertColorWithStandaloneColorPicker",
    "metadata": {
      "description": {
        "value": "Insert hex/rgb/hsl colors with the focused standalone color picker.",
        "original": "Insert hex/rgb/hsl colors with the focused standalone color picker."
      }
    },
    "key": "enter",
    "when": "standaloneColorPickerFocused"
  },
  {
    "id": "editor.action.showOrFocusStandaloneColorPicker",
    "metadata": {
      "description": {
        "value": "Show or focus a standalone color picker which uses the default color provider. It displays hex/rgb/hsl colors.",
        "original": "Show or focus a standalone color picker which uses the default color provider. It displays hex/rgb/hsl colors."
      }
    }
  },
  {
    "id": "_executeDocumentColorProvider"
  },
  {
    "id": "_executeColorPresentationProvider"
  },
  {
    "id": "editor.action.commentLine",
    "key": "ctrl+/",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "id": "editor.action.addCommentLine",
    "key": "ctrl+k ctrl+c",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "id": "editor.action.removeCommentLine",
    "key": "ctrl+k ctrl+u",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "id": "editor.action.blockComment",
    "key": "shift+alt+a",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "id": "editor.action.showContextMenu",
    "key": "shift+f10",
    "when": "textInputFocus"
  },
  {
    "id": "cursorUndo",
    "key": "ctrl+u",
    "when": "textInputFocus"
  },
  {
    "id": "cursorRedo"
  },
  {
    "id": "editor.changePasteType",
    "key": "ctrl+.",
    "when": "pasteWidgetVisible"
  },
  {
    "id": "editor.hidePasteWidget",
    "key": "escape",
    "when": "pasteWidgetVisible"
  },
  {
    "id": "editor.action.pasteAs",
    "metadata": {
      "description": "Paste as",
      "args": [
        {
          "name": "args",
          "schema": {
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "description": "The kind of the paste edit to try applying. If not provided or there are multiple edits for this kind, the editor will show a picker."
              }
            }
          }
        }
      ]
    }
  },
  {
    "id": "editor.action.pasteAsText"
  },
  {
    "id": "editor.changeDropType",
    "key": "ctrl+.",
    "when": "dropWidgetVisible"
  },
  {
    "id": "editor.hideDropWidget",
    "key": "escape",
    "when": "dropWidgetVisible"
  },
  {
    "id": "history.showPrevious",
    "key": "up",
    "when": "historyNavigationBackwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible"
  },
  {
    "id": "history.showNext",
    "key": "down",
    "when": "historyNavigationForwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible"
  },
  {
    "id": "actions.find",
    "key": "ctrl+f",
    "when": "editorFocus || editorIsOpen"
  },
  {
    "id": "editor.action.startFindReplaceAction",
    "key": "ctrl+h",
    "when": "editorFocus || editorIsOpen"
  },
  {
    "id": "editor.actions.findWithArgs",
    "metadata": {
      "description": "Open a new In-Editor Find Widget.",
      "args": [
        {
          "name": "Open a new In-Editor Find Widget args",
          "schema": {
            "properties": {
              "searchString": {
                "type": "string"
              },
              "replaceString": {
                "type": "string"
              },
              "isRegex": {
                "type": "boolean"
              },
              "matchWholeWord": {
                "type": "boolean"
              },
              "isCaseSensitive": {
                "type": "boolean"
              },
              "preserveCase": {
                "type": "boolean"
              },
              "findInSelection": {
                "type": "boolean"
              }
            }
          }
        }
      ]
    }
  },
  {
    "id": "actions.findWithSelection"
  },
  {
    "id": "editor.action.nextMatchFindAction",
    "key": "enter",
    "when": "editorFocus && findInputFocussed"
  },
  {
    "id": "editor.action.previousMatchFindAction",
    "key": "shift+enter",
    "when": "editorFocus && findInputFocussed"
  },
  {
    "id": "editor.action.goToMatchFindAction"
  },
  {
    "id": "editor.action.nextSelectionMatchFindAction",
    "key": "ctrl+f3",
    "when": "editorFocus"
  },
  {
    "id": "editor.action.previousSelectionMatchFindAction",
    "key": "ctrl+shift+f3",
    "when": "editorFocus"
  },
  {
    "id": "closeFindWidget",
    "key": "escape",
    "when": "editorFocus && findWidgetVisible && !isComposing"
  },
  {
    "id": "toggleFindCaseSensitive",
    "key": "alt+c",
    "when": "editorFocus"
  },
  {
    "id": "toggleFindWholeWord",
    "key": "alt+w",
    "when": "editorFocus"
  },
  {
    "id": "toggleFindRegex",
    "key": "alt+r",
    "when": "editorFocus"
  },
  {
    "id": "toggleFindInSelection",
    "key": "alt+l",
    "when": "editorFocus"
  },
  {
    "id": "togglePreserveCase",
    "key": "alt+p",
    "when": "editorFocus"
  },
  {
    "id": "editor.action.replaceOne",
    "key": "enter",
    "when": "editorFocus && findWidgetVisible && replaceInputFocussed"
  },
  {
    "id": "editor.action.replaceAll",
    "key": "ctrl+alt+enter",
    "when": "editorFocus && findWidgetVisible"
  },
  {
    "id": "editor.action.selectAllMatches",
    "key": "alt+enter",
    "when": "editorFocus && findWidgetVisible"
  },
  {
    "id": "editor.unfold",
    "metadata": {
      "description": "Unfold the content in the editor",
      "args": [
        {
          "name": "Unfold editor argument",
          "description": "Property-value pairs that can be passed through this argument:\n\t\t\t\t\t\t* 'levels': Number of levels to unfold. If not set, defaults to 1.\n\t\t\t\t\t\t* 'direction': If 'up', unfold given number of levels up otherwise unfolds down.\n\t\t\t\t\t\t* 'selectionLines': Array of the start lines (0-based) of the editor selections to apply the unfold action to. If not set, the active selection(s) will be used.\n\t\t\t\t\t\t",
          "schema": {
            "type": "object",
            "properties": {
              "levels": {
                "type": "number",
                "default": 1
              },
              "direction": {
                "type": "string",
                "enum": [
                  "up",
                  "down"
                ],
                "default": "down"
              },
              "selectionLines": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            }
          }
        }
      ]
    },
    "key": "ctrl+shift+]",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "id": "editor.unfoldRecursively",
    "key": "ctrl+k ctrl+]",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "id": "editor.fold",
    "metadata": {
      "description": "Fold the content in the editor",
      "args": [
        {
          "name": "Fold editor argument",
          "description": "Property-value pairs that can be passed through this argument:\n\t\t\t\t\t\t\t* 'levels': Number of levels to fold.\n\t\t\t\t\t\t\t* 'direction': If 'up', folds given number of levels up otherwise folds down.\n\t\t\t\t\t\t\t* 'selectionLines': Array of the start lines (0-based) of the editor selections to apply the fold action to. If not set, the active selection(s) will be used.\n\t\t\t\t\t\t\tIf no levels or direction is set, folds the region at the locations or if already collapsed, the first uncollapsed parent instead.\n\t\t\t\t\t\t",
          "schema": {
            "type": "object",
            "properties": {
              "levels": {
                "type": "number"
              },
              "direction": {
                "type": "string",
                "enum": [
                  "up",
                  "down"
                ]
              },
              "selectionLines": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            }
          }
        }
      ]
    },
    "key": "ctrl+shift+[",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "id": "editor.foldRecursively",
    "key": "ctrl+k ctrl+[",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "id": "editor.toggleFoldRecursively",
    "key": "ctrl+k ctrl+shift+l",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "id": "editor.foldAll",
    "key": "ctrl+k ctrl+0",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "id": "editor.unfoldAll",
    "key": "ctrl+k ctrl+j",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "id": "editor.foldAllBlockComments",
    "key": "ctrl+k ctrl+/",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "id": "editor.foldAllMarkerRegions",
    "key": "ctrl+k ctrl+8",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "id": "editor.unfoldAllMarkerRegions",
    "key": "ctrl+k ctrl+9",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "id": "editor.foldAllExcept",
    "key": "ctrl+k ctrl+-",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "id": "editor.unfoldAllExcept",
    "key": "ctrl+k ctrl+=",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "id": "editor.toggleFold",
    "key": "ctrl+k ctrl+l",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "id": "editor.gotoParentFold"
  },
  {
    "id": "editor.gotoPreviousFold"
  },
  {
    "id": "editor.gotoNextFold"
  },
  {
    "id": "editor.createFoldingRangeFromSelection",
    "key": "ctrl+k ctrl+,",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "id": "editor.removeManualFoldingRanges",
    "key": "ctrl+k ctrl+.",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "id": "editor.toggleImportFold"
  },
  {
    "id": "editor.foldLevel1",
    "key": "ctrl+k ctrl+1",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "id": "editor.foldLevel2",
    "key": "ctrl+k ctrl+2",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "id": "editor.foldLevel3",
    "key": "ctrl+k ctrl+3",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "id": "editor.foldLevel4",
    "key": "ctrl+k ctrl+4",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "id": "editor.foldLevel5",
    "key": "ctrl+k ctrl+5",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "id": "editor.foldLevel6",
    "key": "ctrl+k ctrl+6",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "id": "editor.foldLevel7",
    "key": "ctrl+k ctrl+7",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "id": "_executeFoldingRangeProvider"
  },
  {
    "id": "editor.action.fontZoomIn"
  },
  {
    "id": "editor.action.fontZoomOut"
  },
  {
    "id": "editor.action.fontZoomReset"
  },
  {
    "id": "_executeFormatRangeProvider"
  },
  {
    "id": "_executeFormatDocumentProvider"
  },
  {
    "id": "_executeFormatOnTypeProvider"
  },
  {
    "id": "editor.action.formatDocument",
    "key": "shift+alt+f",
    "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
  },
  {
    "id": "editor.action.formatSelection",
    "key": "ctrl+k ctrl+f",
    "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
  },
  {
    "id": "editor.action.format"
  },
  {
    "id": "_executeDocumentSymbolProvider"
  },
  {
    "id": "_executeCompletionItemProvider"
  },
  {
    "id": "jumpToNextSnippetPlaceholder",
    "key": "tab",
    "when": "hasNextTabstop && inSnippetMode && textInputFocus"
  },
  {
    "id": "jumpToPrevSnippetPlaceholder",
    "key": "shift+tab",
    "when": "hasPrevTabstop && inSnippetMode && textInputFocus"
  },
  {
    "id": "leaveSnippet",
    "key": "escape",
    "when": "inSnippetMode && textInputFocus"
  },
  {
    "id": "acceptSnippet"
  },
  {
    "id": "editor.action.triggerSuggest",
    "key": "ctrl+space",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
  },
  {
    "id": "acceptSelectedSuggestion",
    "key": "enter",
    "when": "acceptSuggestionOnEnter && suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus"
  },
  {
    "id": "acceptAlternativeSelectedSuggestion",
    "key": "shift+enter",
    "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
  },
  {
    "id": "acceptSelectedSuggestionOnEnter"
  },
  {
    "id": "hideSuggestWidget",
    "key": "escape",
    "when": "suggestWidgetVisible && textInputFocus"
  },
  {
    "id": "selectNextSuggestion",
    "key": "down",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "id": "selectNextPageSuggestion",
    "key": "pagedown",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "id": "selectLastSuggestion"
  },
  {
    "id": "selectPrevSuggestion",
    "key": "up",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "id": "selectPrevPageSuggestion",
    "key": "pageup",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "id": "selectFirstSuggestion"
  },
  {
    "id": "focusSuggestion",
    "key": "ctrl+space",
    "when": "suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "id": "focusAndAcceptSuggestion"
  },
  {
    "id": "toggleSuggestionDetails",
    "key": "ctrl+space",
    "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
  },
  {
    "id": "toggleExplainMode",
    "key": "ctrl+/",
    "when": "suggestWidgetVisible"
  },
  {
    "id": "toggleSuggestionFocus",
    "key": "ctrl+alt+space",
    "when": "suggestWidgetVisible && textInputFocus"
  },
  {
    "id": "insertBestCompletion",
    "key": "tab",
    "when": "atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
  },
  {
    "id": "insertNextSuggestion",
    "key": "tab",
    "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
  },
  {
    "id": "insertPrevSuggestion",
    "key": "shift+tab",
    "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
  },
  {
    "id": "editor.action.resetSuggestSize"
  },
  {
    "id": "editor.action.inlineSuggest.trigger",
    "key": "alt+\\",
    "when": "config.github.copilot.inlineSuggest.enable && editorTextFocus && !editorHasSelection && !inlineSuggestionsVisible"
  },
  {
    "id": "editor.action.inlineSuggest.showNext",
    "key": "alt+]",
    "when": "inlineSuggestionVisible && !editorReadonly"
  },
  {
    "id": "editor.action.inlineSuggest.showPrevious",
    "key": "alt+[",
    "when": "inlineSuggestionVisible && !editorReadonly"
  },
  {
    "id": "editor.action.inlineSuggest.acceptNextWord",
    "key": "ctrl+right",
    "when": "inlineSuggestionVisible && !editorReadonly"
  },
  {
    "id": "editor.action.inlineSuggest.acceptNextLine"
  },
  {
    "id": "editor.action.inlineSuggest.commit",
    "key": "tab",
    "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible || cursorAtInlineEdit && inlineEditIsVisible && !editor.hasSelection && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible || inlineEditIsVisible && inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible || cursorAtInlineEdit && inlineEditIsVisible && inlineSuggestionVisible && !editor.hasSelection && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible"
  },
  {
    "id": "editor.action.inlineSuggest.hide",
    "key": "escape",
    "when": "inlineEditIsVisible || inlineSuggestionVisible"
  },
  {
    "id": "editor.action.inlineSuggest.jump",
    "key": "tab",
    "when": "inlineEditIsVisible && !cursorAtInlineEdit && !editor.hasSelection && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible"
  },
  {
    "id": "editor.action.inlineSuggest.toggleAlwaysShowToolbar",
    "metadata": {
      "description": "Always Show Toolbar"
    }
  },
  {
    "id": "editor.action.inlineSuggest.dev.extractRepro"
  },
  {
    "id": "editor.action.marker.next",
    "key": "alt+f8",
    "when": "editorFocus"
  },
  {
    "id": "editor.action.marker.prev",
    "key": "shift+alt+f8",
    "when": "editorFocus"
  },
  {
    "id": "editor.action.marker.nextInFiles",
    "key": "f8",
    "when": "editorFocus"
  },
  {
    "id": "editor.action.marker.prevInFiles",
    "key": "shift+f8",
    "when": "editorFocus"
  },
  {
    "id": "closeMarkersNavigation",
    "key": "escape",
    "when": "editorFocus && markersNavigationVisible"
  },
  {
    "id": "editor.action.debugEditorGpuRenderer"
  },
  {
    "id": "editor.action.showHover",
    "metadata": {
      "description": {
        "value": "Show or focus the editor hover which shows documentation, references, and other content for a symbol at the current cursor position.",
        "original": "Show or focus the editor hover which shows documentation, references, and other content for a symbol at the current cursor position."
      },
      "args": [
        {
          "name": "args",
          "schema": {
            "type": "object",
            "properties": {
              "focus": {
                "description": "Controls if and when the hover should take focus upon being triggered by this action.",
                "enum": [
                  "noAutoFocus",
                  "focusIfVisible",
                  "autoFocusImmediately"
                ],
                "enumDescriptions": [
                  "The hover will not automatically take focus.",
                  "The hover will take focus only if it is already visible.",
                  "The hover will automatically take focus when it appears."
                ],
                "default": "focusIfVisible"
              }
            }
          }
        }
      ]
    },
    "key": "ctrl+k ctrl+i",
    "when": "editorTextFocus"
  },
  {
    "id": "editor.action.showDefinitionPreviewHover",
    "metadata": {
      "description": {
        "value": "Show the definition preview hover in the editor.",
        "original": "Show the definition preview hover in the editor."
      }
    }
  },
  {
    "id": "editor.action.scrollUpHover",
    "metadata": {
      "description": {
        "value": "Scroll up the editor hover.",
        "original": "Scroll up the editor hover."
      }
    },
    "key": "up",
    "when": "editorHoverFocused"
  },
  {
    "id": "editor.action.scrollDownHover",
    "metadata": {
      "description": {
        "value": "Scroll down the editor hover.",
        "original": "Scroll down the editor hover."
      }
    },
    "key": "down",
    "when": "editorHoverFocused"
  },
  {
    "id": "editor.action.scrollLeftHover",
    "metadata": {
      "description": {
        "value": "Scroll left the editor hover.",
        "original": "Scroll left the editor hover."
      }
    },
    "key": "left",
    "when": "editorHoverFocused"
  },
  {
    "id": "editor.action.scrollRightHover",
    "metadata": {
      "description": {
        "value": "Scroll right the editor hover.",
        "original": "Scroll right the editor hover."
      }
    },
    "key": "right",
    "when": "editorHoverFocused"
  },
  {
    "id": "editor.action.pageUpHover",
    "metadata": {
      "description": {
        "value": "Page up the editor hover.",
        "original": "Page up the editor hover."
      }
    },
    "key": "pageup",
    "when": "editorHoverFocused"
  },
  {
    "id": "editor.action.pageDownHover",
    "metadata": {
      "description": {
        "value": "Page down the editor hover.",
        "original": "Page down the editor hover."
      }
    },
    "key": "pagedown",
    "when": "editorHoverFocused"
  },
  {
    "id": "editor.action.goToTopHover",
    "metadata": {
      "description": {
        "value": "Go to the top of the editor hover.",
        "original": "Go to the top of the editor hover."
      }
    },
    "key": "home",
    "when": "editorHoverFocused"
  },
  {
    "id": "editor.action.goToBottomHover",
    "metadata": {
      "description": {
        "value": "Go to the bottom of the editor hover.",
        "original": "Go to the bottom of the editor hover."
      }
    },
    "key": "end",
    "when": "editorHoverFocused"
  },
  {
    "id": "editor.action.increaseHoverVerbosityLevel"
  },
  {
    "id": "editor.action.decreaseHoverVerbosityLevel"
  },
  {
    "id": "editor.action.indentationToSpaces",
    "metadata": {
      "description": {
        "value": "Convert the tab indentation to spaces.",
        "original": "Convert the tab indentation to spaces."
      }
    }
  },
  {
    "id": "editor.action.indentationToTabs",
    "metadata": {
      "description": {
        "value": "Convert the spaces indentation to tabs.",
        "original": "Convert the spaces indentation to tabs."
      }
    }
  },
  {
    "id": "editor.action.indentUsingTabs",
    "metadata": {
      "description": {
        "value": "Use indentation with tabs.",
        "original": "Use indentation with tabs."
      }
    }
  },
  {
    "id": "editor.action.indentUsingSpaces",
    "metadata": {
      "description": {
        "value": "Use indentation with spaces.",
        "original": "Use indentation with spaces."
      }
    }
  },
  {
    "id": "editor.action.changeTabDisplaySize",
    "metadata": {
      "description": {
        "value": "Change the space size equivalent of the tab.",
        "original": "Change the space size equivalent of the tab."
      }
    }
  },
  {
    "id": "editor.action.detectIndentation",
    "metadata": {
      "description": {
        "value": "Detect the indentation from content.",
        "original": "Detect the indentation from content."
      }
    }
  },
  {
    "id": "editor.action.reindentlines",
    "metadata": {
      "description": {
        "value": "Reindent the lines of the editor.",
        "original": "Reindent the lines of the editor."
      }
    }
  },
  {
    "id": "editor.action.reindentselectedlines",
    "metadata": {
      "description": {
        "value": "Reindent the selected lines of the editor.",
        "original": "Reindent the selected lines of the editor."
      }
    }
  },
  {
    "id": "editor.action.inPlaceReplace.up",
    "key": "ctrl+shift+,",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "id": "editor.action.inPlaceReplace.down",
    "key": "ctrl+shift+.",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "id": "expandLineSelection",
    "key": "ctrl+l",
    "when": "textInputFocus"
  },
  {
    "id": "editor.action.copyLinesUpAction",
    "key": "shift+alt+up",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "id": "editor.action.copyLinesDownAction",
    "key": "shift+alt+down",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "id": "editor.action.duplicateSelection"
  },
  {
    "id": "editor.action.moveLinesUpAction",
    "key": "alt+up",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "id": "editor.action.moveLinesDownAction",
    "key": "alt+down",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "id": "editor.action.sortLinesAscending"
  },
  {
    "id": "editor.action.sortLinesDescending"
  },
  {
    "id": "editor.action.removeDuplicateLines"
  },
  {
    "id": "editor.action.trimTrailingWhitespace",
    "key": "ctrl+k ctrl+x",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "id": "editor.action.deleteLines",
    "key": "ctrl+shift+k",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "id": "editor.action.indentLines",
    "key": "ctrl+]",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "id": "editor.action.outdentLines",
    "key": "ctrl+[",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "id": "editor.action.insertLineBefore",
    "key": "ctrl+shift+enter",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "id": "editor.action.insertLineAfter",
    "key": "ctrl+enter",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "id": "deleteAllLeft"
  },
  {
    "id": "deleteAllRight"
  },
  {
    "id": "editor.action.joinLines"
  },
  {
    "id": "editor.action.transpose"
  },
  {
    "id": "editor.action.transformToUppercase"
  },
  {
    "id": "editor.action.transformToLowercase"
  },
  {
    "id": "editor.action.transformToSnakecase"
  },
  {
    "id": "editor.action.transformToCamelcase"
  },
  {
    "id": "editor.action.transformToPascalcase"
  },
  {
    "id": "editor.action.transformToTitlecase"
  },
  {
    "id": "editor.action.transformToKebabcase"
  },
  {
    "id": "cancelLinkedEditingInput",
    "key": "escape",
    "when": "LinkedEditingInputVisible && editorTextFocus"
  },
  {
    "id": "_executeLinkedEditingProvider"
  },
  {
    "id": "editor.action.linkedEditing",
    "key": "ctrl+shift+f2",
    "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
  },
  {
    "id": "_executeLinkProvider"
  },
  {
    "id": "editor.action.openLink"
  },
  {
    "id": "editor.action.insertCursorAbove",
    "key": "ctrl+alt+up",
    "when": "editorTextFocus"
  },
  {
    "id": "editor.action.insertCursorBelow",
    "key": "ctrl+alt+down",
    "when": "editorTextFocus"
  },
  {
    "id": "editor.action.insertCursorAtEndOfEachLineSelected",
    "key": "shift+alt+i",
    "when": "editorTextFocus"
  },
  {
    "id": "editor.action.addSelectionToNextFindMatch",
    "key": "ctrl+d",
    "when": "editorFocus"
  },
  {
    "id": "editor.action.addSelectionToPreviousFindMatch"
  },
  {
    "id": "editor.action.moveSelectionToNextFindMatch",
    "key": "ctrl+k ctrl+d",
    "when": "editorFocus"
  },
  {
    "id": "editor.action.moveSelectionToPreviousFindMatch"
  },
  {
    "id": "editor.action.selectHighlights",
    "key": "ctrl+shift+l",
    "when": "editorFocus"
  },
  {
    "id": "editor.action.changeAll",
    "key": "ctrl+f2",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "id": "editor.action.addCursorsToBottom"
  },
  {
    "id": "editor.action.addCursorsToTop"
  },
  {
    "id": "editor.action.focusNextCursor",
    "metadata": {
      "description": "Focuses the next cursor",
      "args": []
    }
  },
  {
    "id": "editor.action.focusPreviousCursor",
    "metadata": {
      "description": "Focuses the previous cursor",
      "args": []
    }
  },
  {
    "id": "editor.action.inlineEdit.accept",
    "key": "tab",
    "when": "cursorAtInlineEdit && inlineEditVisible && !editorReadonly"
  },
  {
    "id": "editor.action.inlineEdit.reject",
    "key": "escape",
    "when": "inlineEditVisible && !editorReadonly"
  },
  {
    "id": "editor.action.inlineEdit.jumpTo",
    "key": "ctrl+alt+=",
    "when": "inlineEditVisible && !cursorAtInlineEdit && !editorReadonly"
  },
  {
    "id": "editor.action.inlineEdit.jumpBack",
    "key": "ctrl+alt+=",
    "when": "cursorAtInlineEdit && !editorReadonly"
  },
  {
    "id": "editor.action.inlineEdit.trigger",
    "key": "ctrl+alt+=",
    "when": "!editorReadonly && !inlineEditVisible"
  },
  {
    "id": "_executeSignatureHelpProvider"
  },
  {
    "id": "editor.action.triggerParameterHints",
    "key": "ctrl+shift+space",
    "when": "editorHasSignatureHelpProvider && editorTextFocus"
  },
  {
    "id": "closeParameterHints",
    "key": "escape",
    "when": "editorFocus && parameterHintsVisible"
  },
  {
    "id": "showPrevParameterHint",
    "key": "up",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "id": "showNextParameterHint",
    "key": "down",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "id": "editor.action.rename",
    "key": "f2",
    "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
  },
  {
    "id": "acceptRenameInput",
    "key": "enter",
    "when": "editorFocus && renameInputVisible && !isComposing"
  },
  {
    "id": "acceptRenameInputWithPreview",
    "key": "ctrl+enter",
    "when": "config.editor.rename.enablePreview && editorFocus && renameInputVisible && !isComposing"
  },
  {
    "id": "cancelRenameInput",
    "key": "escape",
    "when": "editorFocus && renameInputVisible"
  },
  {
    "id": "focusNextRenameSuggestion",
    "metadata": {
      "description": {
        "value": "Focus Next Rename Suggestion",
        "original": "Focus Next Rename Suggestion"
      }
    },
    "key": "down",
    "when": "renameInputVisible"
  },
  {
    "id": "focusPreviousRenameSuggestion",
    "metadata": {
      "description": {
        "value": "Focus Previous Rename Suggestion",
        "original": "Focus Previous Rename Suggestion"
      }
    },
    "key": "up",
    "when": "renameInputVisible"
  },
  {
    "id": "_executeDocumentRenameProvider"
  },
  {
    "id": "_executePrepareRename"
  },
  {
    "id": "_provideDocumentSemanticTokensLegend"
  },
  {
    "id": "_provideDocumentSemanticTokens"
  },
  {
    "id": "_provideDocumentRangeSemanticTokensLegend"
  },
  {
    "id": "_provideDocumentRangeSemanticTokens"
  },
  {
    "id": "editor.action.smartSelect.grow"
  },
  {
    "id": "editor.action.smartSelect.expand",
    "key": "shift+alt+right",
    "when": "editorTextFocus"
  },
  {
    "id": "editor.action.smartSelect.shrink",
    "key": "shift+alt+left",
    "when": "editorTextFocus"
  },
  {
    "id": "_executeSelectionRangeProvider"
  },
  {
    "id": "editor.action.toggleStickyScroll",
    "metadata": {
      "description": {
        "value": "Toggle/enable the editor sticky scroll which shows the nested scopes at the top of the viewport",
        "original": "Toggle/enable the editor sticky scroll which shows the nested scopes at the top of the viewport"
      }
    }
  },
  {
    "id": "editor.action.focusStickyScroll",
    "metadata": {
      "description": {
        "value": "Focus on the editor sticky scroll",
        "original": "Focus on the editor sticky scroll",
        "mnemonicTitle": "&&Focus Sticky Scroll"
      }
    }
  },
  {
    "id": "editor.action.selectPreviousStickyScrollLine",
    "metadata": {
      "description": {
        "value": "Select the previous sticky scroll line",
        "original": "Select the previous sticky scroll line"
      }
    },
    "key": "up",
    "when": "stickyScrollFocused"
  },
  {
    "id": "editor.action.selectNextStickyScrollLine",
    "metadata": {
      "description": {
        "value": "Select the next editor sticky scroll line",
        "original": "Select the next editor sticky scroll line"
      }
    },
    "key": "down",
    "when": "stickyScrollFocused"
  },
  {
    "id": "editor.action.goToFocusedStickyScrollLine",
    "metadata": {
      "description": {
        "value": "Go to the focused sticky scroll line",
        "original": "Go to the focused sticky scroll line"
      }
    },
    "key": "enter",
    "when": "stickyScrollFocused"
  },
  {
    "id": "editor.action.selectEditor",
    "metadata": {
      "description": {
        "value": "Select Editor",
        "original": "Select Editor"
      }
    },
    "key": "escape",
    "when": "stickyScrollFocused"
  },
  {
    "id": "editor.action.forceRetokenize"
  },
  {
    "id": "editor.action.toggleTabFocusMode",
    "metadata": {
      "description": {
        "value": "Determines whether the tab key moves focus around the workbench or inserts the tab character in the current editor. This is also called tab trapping, tab navigation, or tab focus mode.",
        "original": "Determines whether the tab key moves focus around the workbench or inserts the tab character in the current editor. This is also called tab trapping, tab navigation, or tab focus mode."
      }
    },
    "key": "ctrl+m"
  },
  {
    "id": "editor.action.unicodeHighlight.disableHighlightingOfAmbiguousCharacters"
  },
  {
    "id": "editor.action.unicodeHighlight.disableHighlightingOfInvisibleCharacters"
  },
  {
    "id": "editor.action.unicodeHighlight.disableHighlightingOfNonBasicAsciiCharacters"
  },
  {
    "id": "editor.action.unicodeHighlight.showExcludeOptions"
  },
  {
    "id": "_executeDocumentHighlights"
  },
  {
    "id": "editor.action.wordHighlight.next",
    "key": "f7",
    "when": "editorTextFocus && hasWordHighlights"
  },
  {
    "id": "editor.action.wordHighlight.prev",
    "key": "shift+f7",
    "when": "editorTextFocus && hasWordHighlights"
  },
  {
    "id": "editor.action.wordHighlight.trigger"
  },
  {
    "id": "cursorWordStartLeft"
  },
  {
    "id": "cursorWordEndLeft"
  },
  {
    "id": "cursorWordLeft",
    "key": "ctrl+left",
    "when": "textInputFocus && !accessibilityModeEnabled"
  },
  {
    "id": "cursorWordStartLeftSelect"
  },
  {
    "id": "cursorWordEndLeftSelect"
  },
  {
    "id": "cursorWordLeftSelect",
    "key": "ctrl+shift+left",
    "when": "textInputFocus && !accessibilityModeEnabled"
  },
  {
    "id": "cursorWordStartRight"
  },
  {
    "id": "cursorWordEndRight",
    "key": "ctrl+right",
    "when": "textInputFocus && !accessibilityModeEnabled"
  },
  {
    "id": "cursorWordRight"
  },
  {
    "id": "cursorWordStartRightSelect"
  },
  {
    "id": "cursorWordEndRightSelect",
    "key": "ctrl+shift+right",
    "when": "textInputFocus && !accessibilityModeEnabled"
  },
  {
    "id": "cursorWordRightSelect"
  },
  {
    "id": "cursorWordAccessibilityLeft",
    "key": "ctrl+left",
    "when": "accessibilityModeEnabled && isWindows && textInputFocus && focusedView == 'workbench.panel.output'"
  },
  {
    "id": "cursorWordAccessibilityLeftSelect",
    "key": "ctrl+shift+left",
    "when": "accessibilityModeEnabled && isWindows && textInputFocus && focusedView == 'workbench.panel.output'"
  },
  {
    "id": "cursorWordAccessibilityRight",
    "key": "ctrl+right",
    "when": "accessibilityModeEnabled && isWindows && textInputFocus && focusedView == 'workbench.panel.output'"
  },
  {
    "id": "cursorWordAccessibilityRightSelect",
    "key": "ctrl+shift+right",
    "when": "accessibilityModeEnabled && isWindows && textInputFocus && focusedView == 'workbench.panel.output'"
  },
  {
    "id": "deleteWordStartLeft"
  },
  {
    "id": "deleteWordEndLeft"
  },
  {
    "id": "deleteWordLeft",
    "key": "ctrl+backspace",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "id": "deleteWordStartRight"
  },
  {
    "id": "deleteWordEndRight"
  },
  {
    "id": "deleteWordRight",
    "key": "ctrl+delete",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "id": "deleteInsideWord"
  },
  {
    "id": "cursorWordPartStartLeft"
  },
  {
    "id": "cursorWordPartStartLeftSelect"
  },
  {
    "id": "deleteWordPartLeft"
  },
  {
    "id": "deleteWordPartRight"
  },
  {
    "id": "cursorWordPartLeft"
  },
  {
    "id": "cursorWordPartLeftSelect"
  },
  {
    "id": "cursorWordPartRight"
  },
  {
    "id": "cursorWordPartRightSelect"
  },
  {
    "id": "_snippet.markAsUsed"
  },
  {
    "id": "insertSnippet",
    "key": "tab",
    "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode"
  },
  {
    "id": "toggle.window.commandCenter",
    "metadata": {
      "description": "Toggle visibility of the Command Center in title bar"
    }
  },
  {
    "id": "toggle.workbench.layoutControl.enabled",
    "metadata": {
      "description": "Toggle visibility of the Layout Controls in title bar"
    }
  },
  {
    "id": "toggle.window.customTitleBarVisibility",
    "metadata": {
      "description": "Hide Custom Title Bar"
    }
  },
  {
    "id": "toggle.window.customTitleBarVisibility.windowed",
    "metadata": {
      "description": "Hide Custom Title Bar In Full Screen"
    }
  },
  {
    "id": "toggle.toggleCustomTitleBar",
    "metadata": {
      "description": "Custom Title Bar"
    }
  },
  {
    "id": "showCustomTitleBar",
    "metadata": {
      "description": {
        "value": "Show Custom Title Bar",
        "original": "Show Custom Title Bar"
      }
    }
  },
  {
    "id": "hideCustomTitleBar",
    "metadata": {
      "description": {
        "value": "Hide Custom Title Bar",
        "original": "Hide Custom Title Bar"
      }
    }
  },
  {
    "id": "hideCustomTitleBarInFullScreen",
    "metadata": {
      "description": {
        "value": "Hide Custom Title Bar In Full Screen",
        "original": "Hide Custom Title Bar In Full Screen"
      }
    }
  },
  {
    "id": "toggle.workbench.editor.editorActionsLocation",
    "metadata": {
      "description": "Editor Actions"
    }
  },
  {
    "id": "toggle.chat.commandCenter.enabled",
    "metadata": {
      "description": "Toggle visibility of the Chat Controls in title bar"
    }
  },
  {
    "id": "explorer.newFile"
  },
  {
    "id": "explorer.newFolder"
  },
  {
    "id": "explorer.download"
  },
  {
    "id": "explorer.upload"
  },
  {
    "id": "workbench.files.action.createFileFromExplorer",
    "metadata": {
      "description": "New File..."
    }
  },
  {
    "id": "workbench.files.action.createFolderFromExplorer",
    "metadata": {
      "description": "New Folder..."
    }
  },
  {
    "id": "workbench.files.action.refreshFilesExplorer",
    "metadata": {
      "description": {
        "value": "Forces a refresh of the Explorer.",
        "original": "Forces a refresh of the Explorer."
      }
    }
  },
  {
    "id": "workbench.files.action.collapseExplorerFolders",
    "metadata": {
      "description": {
        "value": "Folds all folders in the Explorer.",
        "original": "Folds all folders in the Explorer."
      }
    }
  },
  {
    "id": "workbench.action.chat.addToChatAction",
    "metadata": {
      "description": {
        "value": "Add File to Chat",
        "original": "Add File to Chat"
      }
    }
  },
  {
    "id": "chatEditing.removeFileFromWorkingSet",
    "metadata": {
      "description": {
        "value": "Remove File",
        "original": "Remove File"
      }
    }
  },
  {
    "id": "chatEditing.openFileInDiff",
    "metadata": {
      "description": {
        "value": "Open Changes in Diff Editor",
        "original": "Open Changes in Diff Editor"
      }
    }
  },
  {
    "id": "chatEditing.acceptFile",
    "metadata": {
      "description": {
        "value": "Accept",
        "original": "Accept"
      }
    }
  },
  {
    "id": "chatEditing.discardFile",
    "metadata": {
      "description": {
        "value": "Discard",
        "original": "Discard"
      }
    }
  },
  {
    "id": "chatEditing.acceptAllFiles",
    "metadata": {
      "description": "Accept All"
    }
  },
  {
    "id": "chatEditing.discardAllFiles",
    "metadata": {
      "description": "Discard All"
    }
  },
  {
    "id": "chatEditing.openDiffs",
    "metadata": {
      "description": "Open Diffs"
    }
  },
  {
    "id": "workbench.action.chat.addFilesToWorkingSet",
    "metadata": {
      "description": {
        "value": "Add Files to Working Set",
        "original": "Add Files to Working Set"
      }
    }
  },
  {
    "id": "workbench.action.chat.restoreWorkingSet",
    "metadata": {
      "description": {
        "value": "Restore Working Set",
        "original": "Restore Working Set"
      }
    }
  },
  {
    "id": "workbench.action.chat.undoEdits",
    "metadata": {
      "description": {
        "value": "Undo Edits",
        "original": "Undo Edits"
      }
    }
  },
  {
    "id": "chatEditing.saveAllFiles",
    "metadata": {
      "description": "Save All"
    }
  },
  {
    "id": "workbench.action.files.openFileFolderInNewWindow"
  },
  {
    "id": "_files.pickFolderAndOpen"
  },
  {
    "id": "workbench.action.files.openFolderInNewWindow"
  },
  {
    "id": "workbench.action.files.openFileInNewWindow"
  },
  {
    "id": "workbench.action.openWorkspaceInNewWindow"
  },
  {
    "id": "addRootFolder"
  },
  {
    "id": "setRootFolder"
  },
  {
    "id": "_workbench.pickWorkspaceFolder"
  },
  {
    "id": "vscode.openFolder",
    "metadata": {
      "description": "Open a folder or workspace in the current window or new window depending on the newWindow argument. Note that opening in the same window will shutdown the current extension host process and start a new one on the given folder/workspace unless the newWindow parameter is set to true.",
      "args": [
        {
          "name": "uri",
          "description": "(optional) Uri of the folder or workspace file to open. If not provided, a native dialog will ask the user for the folder"
        },
        {
          "name": "options",
          "description": "(optional) Options. Object with the following properties: `forceNewWindow`: Whether to open the folder/workspace in a new window or the same. Defaults to opening in the same window. `forceReuseWindow`: Whether to force opening the folder/workspace in the same window.  Defaults to false. `noRecentEntry`: Whether the opened URI will appear in the 'Open Recent' list. Defaults to false. Note, for backward compatibility, options can also be of type boolean, representing the `forceNewWindow` setting."
        }
      ]
    }
  },
  {
    "id": "vscode.newWindow",
    "metadata": {
      "description": "Opens an new window depending on the newWindow argument.",
      "args": [
        {
          "name": "options",
          "description": "(optional) Options. Object with the following properties: `reuseWindow`: Whether to open a new window or the same. Defaults to opening in a new window. "
        }
      ]
    }
  },
  {
    "id": "_workbench.removeFromRecentlyOpened"
  },
  {
    "id": "vscode.removeFromRecentlyOpened",
    "metadata": {
      "description": "Removes an entry with the given path from the recently opened list.",
      "args": [
        {
          "name": "path",
          "description": "URI or URI string to remove from recently opened."
        }
      ]
    }
  },
  {
    "id": "_workbench.addToRecentlyOpened"
  },
  {
    "id": "_workbench.getRecentlyOpened"
  },
  {
    "id": "workbench.extensions.action.showExtensionsForLanguage"
  },
  {
    "id": "workbench.extensions.action.showExtensionsWithIds"
  },
  {
    "id": "chat.inlineResourceAnchor.addFileToChat",
    "metadata": {
      "description": {
        "value": "Add File to Chat",
        "original": "Add File to Chat"
      }
    }
  },
  {
    "id": "chat.inlineResourceAnchor.copyResource",
    "metadata": {
      "description": {
        "value": "Copy",
        "original": "Copy"
      }
    }
  },
  {
    "id": "chat.inlineResourceAnchor.openToSide",
    "metadata": {
      "description": {
        "value": "Open to the Side",
        "original": "Open to the Side"
      }
    }
  },
  {
    "id": "chat.inlineSymbolAnchor.goToDefinition",
    "metadata": {
      "description": {
        "value": "Go to Definition",
        "original": "Go to Definition",
        "mnemonicTitle": "Go to &&Definition"
      }
    }
  },
  {
    "id": "chat.inlineSymbolAnchor.goToReferences",
    "metadata": {
      "description": {
        "value": "Go to References",
        "original": "Go to References",
        "mnemonicTitle": "Go to &&References"
      }
    }
  },
  {
    "id": "editor.action.inspectTMScopes"
  },
  {
    "id": "iconSelectBox.focusUp",
    "key": "up",
    "when": "iconSelectBoxFocus"
  },
  {
    "id": "iconSelectBox.focusDown",
    "key": "down",
    "when": "iconSelectBoxFocus"
  },
  {
    "id": "iconSelectBox.focusNext",
    "key": "right",
    "when": "iconSelectBoxFocus && iconSelectBoxInputEmpty || iconSelectBoxFocus && !iconSelectBoxInputFocus"
  },
  {
    "id": "iconSelectBox.focusPrevious",
    "key": "left",
    "when": "iconSelectBoxFocus && iconSelectBoxInputEmpty || iconSelectBoxFocus && !iconSelectBoxInputFocus"
  },
  {
    "id": "iconSelectBox.selectFocused",
    "key": "enter",
    "when": "iconSelectBoxFocus"
  },
  {
    "id": "workbench.action.chat.selectAndInsertFile",
    "metadata": {
      "description": ""
    }
  },
  {
    "id": "workbench.action.chat.addDynamicVariable",
    "metadata": {
      "description": ""
    }
  },
  {
    "id": "_remoteCLI.openExternal"
  },
  {
    "id": "_remoteCLI.windowOpen"
  },
  {
    "id": "_remoteCLI.getSystemStatus"
  },
  {
    "id": "_remoteCLI.manageExtensions"
  },
  {
    "id": "_workbench.revertAllDirty"
  },
  {
    "id": "files.participants.resetChoice",
    "metadata": {
      "description": {
        "value": "Reset choice for 'File operation needs preview'",
        "original": "Reset choice for 'File operation needs preview'"
      }
    }
  },
  {
    "id": "_executePrepareCallHierarchy"
  },
  {
    "id": "_executeProvideIncomingCalls"
  },
  {
    "id": "_executeProvideOutgoingCalls"
  },
  {
    "id": "_executePrepareTypeHierarchy"
  },
  {
    "id": "_executeProvideSupertypes"
  },
  {
    "id": "_executeProvideSubtypes"
  },
  {
    "id": "_extensionTests.setLogLevel"
  },
  {
    "id": "_extensionTests.getLogLevel"
  },
  {
    "id": "workbench.extensions.action.manageAuthorizedExtensionURIs",
    "metadata": {
      "description": {
        "value": "Manage Authorized Extension URIs...",
        "original": "Manage Authorized Extension URIs..."
      }
    }
  },
  {
    "id": "commentsFocusViewFromFilter",
    "metadata": {
      "description": "Focus Comments view"
    },
    "key": "ctrl+down",
    "when": "commentsFilterFocus"
  },
  {
    "id": "commentsClearFilterText",
    "metadata": {
      "description": "Clear filter text"
    },
    "key": "escape",
    "when": "commentsFilterFocus"
  },
  {
    "id": "commentsFocusFilter",
    "metadata": {
      "description": "Focus comments filter"
    },
    "key": "ctrl+f",
    "when": "focusedView == 'workbench.panel.comments'"
  },
  {
    "id": "workbench.actions.workbench.panel.comments.toggleUnResolvedComments",
    "metadata": {
      "description": "Show Unresolved"
    }
  },
  {
    "id": "workbench.actions.workbench.panel.comments.toggleResolvedComments",
    "metadata": {
      "description": "Show Resolved"
    }
  },
  {
    "id": "workbench.actions.workbench.panel.comments.toggleSortByUpdatedAt",
    "metadata": {
      "description": "Updated Time"
    }
  },
  {
    "id": "workbench.actions.workbench.panel.comments.toggleSortByResource",
    "metadata": {
      "description": "Position in File"
    }
  },
  {
    "id": "workbench.action.editorDictation.start",
    "metadata": {
      "description": {
        "value": "Start Dictation in Editor",
        "original": "Start Dictation in Editor"
      }
    },
    "key": "ctrl+alt+v",
    "when": "hasSpeechProvider && !editorReadonly && !speechToTextInProgress"
  },
  {
    "id": "workbench.action.editorDictation.stop",
    "metadata": {
      "description": {
        "value": "Stop Dictation in Editor",
        "original": "Stop Dictation in Editor"
      }
    },
    "key": "escape",
    "when": "editorDictation.inProgress"
  },
  {
    "id": "widgetNavigation.focusPrevious",
    "key": "ctrl+up",
    "when": "inputFocus && navigableContainerFocused || navigableContainerFocused && treestickyScrollFocused || navigableContainerFocused && !listFocus || navigableContainerFocused && listScrollAtBoundary == 'both' || navigableContainerFocused && listScrollAtBoundary == 'top'"
  },
  {
    "id": "widgetNavigation.focusNext",
    "key": "ctrl+down",
    "when": "inputFocus && navigableContainerFocused || navigableContainerFocused && treestickyScrollFocused || navigableContainerFocused && !listFocus || navigableContainerFocused && listScrollAtBoundary == 'both' || navigableContainerFocused && listScrollAtBoundary == 'bottom'"
  },
  {
    "id": "editor.action.accessibleViewNext",
    "metadata": {
      "description": "Show Next in Accessible View"
    },
    "key": "alt+]",
    "when": "accessibleViewIsShown && accessibleViewSupportsNavigation"
  },
  {
    "id": "editor.action.accessibleViewNextCodeBlock",
    "metadata": {
      "description": "Accessible View: Next Code Block"
    },
    "key": "ctrl+alt+pagedown",
    "when": "accessibleViewContainsCodeBlocks && accessibleViewCurrentProviderId == 'panelChat'"
  },
  {
    "id": "editor.action.accessibleViewPreviousCodeBlock",
    "metadata": {
      "description": "Accessible View: Previous Code Block"
    },
    "key": "ctrl+alt+pageup",
    "when": "accessibleViewContainsCodeBlocks && accessibleViewCurrentProviderId == 'panelChat'"
  },
  {
    "id": "editor.action.accessibleViewPrevious",
    "metadata": {
      "description": "Show Previous in Accessible View"
    },
    "key": "alt+[",
    "when": "accessibleViewIsShown && accessibleViewSupportsNavigation"
  },
  {
    "id": "editor.action.accessibleViewGoToSymbol",
    "metadata": {
      "description": "Go To Symbol in Accessible View"
    },
    "key": "ctrl+shift+o",
    "when": "accessibilityHelpIsShown && accessibleViewGoToSymbolSupported || accessibleViewGoToSymbolSupported && accessibleViewIsShown"
  },
  {
    "id": "editor.action.accessibilityHelp",
    "key": "alt+f1",
    "when": "!accessibilityHelpIsShown"
  },
  {
    "id": "editor.action.accessibleView",
    "key": "alt+f2"
  },
  {
    "id": "editor.action.accessibleViewDisableHint",
    "metadata": {
      "description": "Disable Accessible View Hint"
    },
    "key": "alt+f6",
    "when": "accessibilityHelpIsShown && accessibleViewVerbosityEnabled || accessibleViewIsShown && accessibleViewVerbosityEnabled"
  },
  {
    "id": "editor.action.accessibilityHelpConfigureKeybindings",
    "metadata": {
      "description": "Accessibility Help Configure Unassigned Keybindings"
    },
    "key": "alt+k",
    "when": "accessibilityHelpIsShown && accessibleViewHasUnassignedKeybindings"
  },
  {
    "id": "editor.action.accessibilityHelpConfigureAssignedKeybindings",
    "metadata": {
      "description": "Accessibility Help Configure Assigned Keybindings"
    },
    "key": "alt+a",
    "when": "accessibilityHelpIsShown && accessibleViewHasAssignedKeybindings"
  },
  {
    "id": "editor.action.accessibilityHelpOpenHelpLink",
    "metadata": {
      "description": "Accessibility Help Open Help Link"
    },
    "key": "alt+h",
    "when": "accessibilityHelpIsShown"
  },
  {
    "id": "editor.action.accessibleViewAcceptInlineCompletion",
    "metadata": {
      "description": "Accept Inline Completion"
    },
    "key": "ctrl+/",
    "when": "accessibleViewIsShown && accessibleViewCurrentProviderId == 'inlineCompletions'"
  },
  {
    "id": "views.moveViewUp",
    "metadata": {
      "description": "Move View Up"
    },
    "key": "ctrl+k up",
    "when": "focusedView != ''"
  },
  {
    "id": "views.moveViewLeft",
    "metadata": {
      "description": "Move View Left"
    },
    "key": "ctrl+k left",
    "when": "focusedView != ''"
  },
  {
    "id": "views.moveViewDown",
    "metadata": {
      "description": "Move View Down"
    },
    "key": "ctrl+k down",
    "when": "focusedView != ''"
  },
  {
    "id": "views.moveViewRight",
    "metadata": {
      "description": "Move View Right"
    },
    "key": "ctrl+k right",
    "when": "focusedView != ''"
  },
  {
    "id": "vscode.moveViews",
    "metadata": {
      "description": "Move Views"
    }
  },
  {
    "id": "_executeDataToNotebook"
  },
  {
    "id": "_executeNotebookToData"
  },
  {
    "id": "workbench.action.inspectContextKeys",
    "metadata": {
      "description": {
        "value": "Inspect Context Keys",
        "original": "Inspect Context Keys"
      }
    }
  },
  {
    "id": "workbench.action.toggleScreencastMode",
    "metadata": {
      "description": {
        "value": "Toggle Screencast Mode",
        "original": "Toggle Screencast Mode"
      }
    }
  },
  {
    "id": "workbench.action.logStorage",
    "metadata": {
      "description": {
        "value": "Log Storage Database Contents",
        "original": "Log Storage Database Contents"
      }
    }
  },
  {
    "id": "workbench.action.logWorkingCopies",
    "metadata": {
      "description": {
        "value": "Log Working Copies",
        "original": "Log Working Copies"
      }
    }
  },
  {
    "id": "workbench.action.removeLargeStorageDatabaseEntries",
    "metadata": {
      "description": {
        "value": "Remove Large Storage Database Entries...",
        "original": "Remove Large Storage Database Entries..."
      }
    }
  },
  {
    "id": "workbench.action.startTrackDisposables",
    "metadata": {
      "description": {
        "value": "Start Tracking Disposables",
        "original": "Start Tracking Disposables"
      }
    }
  },
  {
    "id": "workbench.action.snapshotTrackedDisposables",
    "metadata": {
      "description": {
        "value": "Snapshot Tracked Disposables",
        "original": "Snapshot Tracked Disposables"
      }
    }
  },
  {
    "id": "workbench.action.stopTrackDisposables",
    "metadata": {
      "description": {
        "value": "Stop Tracking Disposables",
        "original": "Stop Tracking Disposables"
      }
    }
  },
  {
    "id": "workbench.action.openLicenseUrl",
    "metadata": {
      "description": {
        "value": "View License",
        "original": "View License",
        "mnemonicTitle": "View &&License"
      }
    }
  },
  {
    "id": "workbench.action.getStartedWithAccessibilityFeatures",
    "metadata": {
      "description": {
        "value": "Get Started with Accessibility Features",
        "original": "Get Started with Accessibility Features"
      }
    }
  },
  {
    "id": "workbench.action.toggleAuxiliaryBar",
    "metadata": {
      "description": {
        "value": "Toggle Secondary Side Bar Visibility",
        "original": "Toggle Secondary Side Bar Visibility"
      }
    },
    "key": "ctrl+alt+b"
  },
  {
    "id": "workbench.action.focusAuxiliaryBar",
    "metadata": {
      "description": {
        "value": "Focus into Secondary Side Bar",
        "original": "Focus into Secondary Side Bar"
      }
    }
  },
  {
    "id": "workbench.action.togglePanel",
    "metadata": {
      "description": {
        "value": "Toggle Panel Visibility",
        "original": "Toggle Panel Visibility"
      }
    },
    "key": "ctrl+j"
  },
  {
    "id": "workbench.action.focusPanel",
    "metadata": {
      "description": {
        "value": "Focus into Panel",
        "original": "Focus into Panel"
      }
    }
  },
  {
    "id": "workbench.action.positionPanelTop",
    "metadata": {
      "description": {
        "value": "Move Panel To Top",
        "original": "Move Panel To Top"
      }
    }
  },
  {
    "id": "workbench.action.positionPanelLeft",
    "metadata": {
      "description": {
        "value": "Move Panel Left",
        "original": "Move Panel Left"
      }
    }
  },
  {
    "id": "workbench.action.positionPanelRight",
    "metadata": {
      "description": {
        "value": "Move Panel Right",
        "original": "Move Panel Right"
      }
    }
  },
  {
    "id": "workbench.action.positionPanelBottom",
    "metadata": {
      "description": {
        "value": "Move Panel To Bottom",
        "original": "Move Panel To Bottom"
      }
    }
  },
  {
    "id": "workbench.action.alignPanelLeft",
    "metadata": {
      "description": {
        "value": "Set Panel Alignment to Left",
        "original": "Set Panel Alignment to Left"
      }
    }
  },
  {
    "id": "workbench.action.alignPanelRight",
    "metadata": {
      "description": {
        "value": "Set Panel Alignment to Right",
        "original": "Set Panel Alignment to Right"
      }
    }
  },
  {
    "id": "workbench.action.alignPanelCenter",
    "metadata": {
      "description": {
        "value": "Set Panel Alignment to Center",
        "original": "Set Panel Alignment to Center"
      }
    }
  },
  {
    "id": "workbench.action.alignPanelJustify",
    "metadata": {
      "description": {
        "value": "Set Panel Alignment to Justify",
        "original": "Set Panel Alignment to Justify"
      }
    }
  },
  {
    "id": "workbench.action.previousPanelView",
    "metadata": {
      "description": {
        "value": "Previous Panel View",
        "original": "Previous Panel View"
      }
    }
  },
  {
    "id": "workbench.action.nextPanelView",
    "metadata": {
      "description": {
        "value": "Next Panel View",
        "original": "Next Panel View"
      }
    }
  },
  {
    "id": "workbench.action.toggleMaximizedPanel",
    "metadata": {
      "description": {
        "value": "Toggle Maximized Panel",
        "original": "Toggle Maximized Panel"
      }
    }
  },
  {
    "id": "workbench.action.closePanel",
    "metadata": {
      "description": {
        "value": "Hide Panel",
        "original": "Hide Panel"
      }
    }
  },
  {
    "id": "workbench.action.closeAuxiliaryBar",
    "metadata": {
      "description": {
        "value": "Hide Secondary Side Bar",
        "original": "Hide Secondary Side Bar"
      }
    }
  },
  {
    "id": "workbench.action.movePanelToSidePanel",
    "metadata": {
      "description": {
        "value": "Move Panel Views To Secondary Side Bar",
        "original": "Move Panel Views To Secondary Side Bar"
      }
    }
  },
  {
    "id": "workbench.action.movePanelToSecondarySideBar",
    "metadata": {
      "description": {
        "value": "Move Panel Views To Secondary Side Bar",
        "original": "Move Panel Views To Secondary Side Bar"
      }
    }
  },
  {
    "id": "workbench.action.moveSidePanelToPanel",
    "metadata": {
      "description": {
        "value": "Move Secondary Side Bar Views To Panel",
        "original": "Move Secondary Side Bar Views To Panel"
      }
    }
  },
  {
    "id": "workbench.action.moveSecondarySideBarToPanel",
    "metadata": {
      "description": {
        "value": "Move Secondary Side Bar Views To Panel",
        "original": "Move Secondary Side Bar Views To Panel"
      }
    }
  },
  {
    "id": "workbench.action.closeSidebar",
    "metadata": {
      "description": {
        "value": "Close Primary Side Bar",
        "original": "Close Primary Side Bar"
      }
    }
  },
  {
    "id": "workbench.action.toggleCenteredLayout",
    "metadata": {
      "description": {
        "value": "Toggle Centered Layout",
        "original": "Toggle Centered Layout",
        "mnemonicTitle": "&&Centered Layout"
      }
    }
  },
  {
    "id": "workbench.action.moveSideBarRight",
    "metadata": {
      "description": {
        "value": "Move Primary Side Bar Right",
        "original": "Move Primary Side Bar Right"
      }
    }
  },
  {
    "id": "workbench.action.moveSideBarLeft",
    "metadata": {
      "description": {
        "value": "Move Primary Side Bar Left",
        "original": "Move Primary Side Bar Left"
      }
    }
  },
  {
    "id": "workbench.action.toggleSidebarPosition",
    "metadata": {
      "description": {
        "value": "Toggle Primary Side Bar Position",
        "original": "Toggle Primary Side Bar Position"
      }
    }
  },
  {
    "id": "workbench.action.toggleEditorVisibility",
    "metadata": {
      "description": {
        "value": "Toggle Editor Area Visibility",
        "original": "Toggle Editor Area Visibility",
        "mnemonicTitle": "Show &&Editor Area"
      }
    }
  },
  {
    "id": "workbench.action.toggleSidebarVisibility",
    "metadata": {
      "description": {
        "value": "Toggle Primary Side Bar Visibility",
        "original": "Toggle Primary Side Bar Visibility"
      }
    },
    "key": "ctrl+b"
  },
  {
    "id": "workbench.action.toggleStatusbarVisibility",
    "metadata": {
      "description": {
        "value": "Toggle Status Bar Visibility",
        "original": "Toggle Status Bar Visibility",
        "mnemonicTitle": "S&&tatus Bar"
      }
    }
  },
  {
    "id": "workbench.action.hideEditorTabs",
    "metadata": {
      "description": {
        "value": "Hide Tab Bar",
        "original": "Hide Tab Bar"
      }
    }
  },
  {
    "id": "workbench.action.zenHideEditorTabs",
    "metadata": {
      "description": {
        "value": "Hide Tab Bar in Zen Mode",
        "original": "Hide Tab Bar in Zen Mode"
      }
    }
  },
  {
    "id": "workbench.action.showMultipleEditorTabs",
    "metadata": {
      "description": {
        "value": "Show Tab Bar with multiple tabs",
        "original": "Show Tab Bar with multiple tabs"
      }
    }
  },
  {
    "id": "workbench.action.zenShowMultipleEditorTabs",
    "metadata": {
      "description": {
        "value": "Show Tab Bar in Zen Mode",
        "original": "Show Tab Bar in Zen Mode"
      }
    }
  },
  {
    "id": "workbench.action.showEditorTab",
    "metadata": {
      "description": {
        "value": "Show Tab Bar with one Tab",
        "original": "Show Tab Bar with one Tab"
      }
    }
  },
  {
    "id": "workbench.action.zenShowEditorTab",
    "metadata": {
      "description": {
        "value": "Show Tab Bar in Zen Mode with one Tab",
        "original": "Show Tab Bar in Zen Mode with one Tab"
      }
    }
  },
  {
    "id": "workbench.action.editorActionsTitleBar",
    "metadata": {
      "description": {
        "value": "Move Editor Actions from the tab bar to the title bar",
        "original": "Move Editor Actions from the tab bar to the title bar"
      }
    }
  },
  {
    "id": "workbench.action.editorActionsDefault",
    "metadata": {
      "description": {
        "value": "Move Editor Actions from the title bar to the tab bar",
        "original": "Move Editor Actions from the title bar to the tab bar"
      }
    }
  },
  {
    "id": "workbench.action.hideEditorActions",
    "metadata": {
      "description": {
        "value": "Hide Editor Actions in the tab and title bar",
        "original": "Hide Editor Actions in the tab and title bar"
      }
    }
  },
  {
    "id": "workbench.action.showEditorActions",
    "metadata": {
      "description": {
        "value": "Make Editor Actions visible.",
        "original": "Make Editor Actions visible."
      }
    }
  },
  {
    "id": "workbench.action.configureEditorTabs",
    "metadata": {
      "description": {
        "value": "Configure Tabs",
        "original": "Configure Tabs"
      }
    }
  },
  {
    "id": "workbench.action.configureEditor",
    "metadata": {
      "description": {
        "value": "Configure Editors",
        "original": "Configure Editors"
      }
    }
  },
  {
    "id": "workbench.action.toggleSeparatePinnedEditorTabs",
    "metadata": {
      "description": {
        "value": "Toggle whether pinned editor tabs are shown on a separate row above unpinned tabs.",
        "original": "Toggle whether pinned editor tabs are shown on a separate row above unpinned tabs."
      }
    }
  },
  {
    "id": "workbench.action.toggleZenMode",
    "metadata": {
      "description": {
        "value": "Toggle Zen Mode",
        "original": "Toggle Zen Mode",
        "mnemonicTitle": "Zen Mode"
      }
    },
    "key": "ctrl+k z",
    "when": "!isAuxiliaryWindowFocusedContext"
  },
  {
    "id": "workbench.action.exitZenMode",
    "key": "escape escape",
    "when": "inZenMode"
  },
  {
    "id": "workbench.action.toggleMenuBar",
    "metadata": {
      "description": {
        "value": "Toggle Menu Bar",
        "original": "Toggle Menu Bar",
        "mnemonicTitle": "Menu &&Bar"
      }
    }
  },
  {
    "id": "workbench.action.resetViewLocations",
    "metadata": {
      "description": {
        "value": "Reset View Locations",
        "original": "Reset View Locations"
      }
    }
  },
  {
    "id": "workbench.action.moveView",
    "metadata": {
      "description": {
        "value": "Move View",
        "original": "Move View"
      }
    }
  },
  {
    "id": "workbench.action.moveFocusedView",
    "metadata": {
      "description": {
        "value": "Move Focused View",
        "original": "Move Focused View"
      }
    }
  },
  {
    "id": "workbench.action.resetFocusedViewLocation",
    "metadata": {
      "description": {
        "value": "Reset Focused View Location",
        "original": "Reset Focused View Location"
      }
    }
  },
  {
    "id": "workbench.action.increaseViewSize",
    "metadata": {
      "description": {
        "value": "Increase Current View Size",
        "original": "Increase Current View Size"
      }
    }
  },
  {
    "id": "workbench.action.increaseViewWidth",
    "metadata": {
      "description": {
        "value": "Increase Editor Width",
        "original": "Increase Editor Width"
      }
    }
  },
  {
    "id": "workbench.action.increaseViewHeight",
    "metadata": {
      "description": {
        "value": "Increase Editor Height",
        "original": "Increase Editor Height"
      }
    }
  },
  {
    "id": "workbench.action.decreaseViewSize",
    "metadata": {
      "description": {
        "value": "Decrease Current View Size",
        "original": "Decrease Current View Size"
      }
    }
  },
  {
    "id": "workbench.action.decreaseViewWidth",
    "metadata": {
      "description": {
        "value": "Decrease Editor Width",
        "original": "Decrease Editor Width"
      }
    }
  },
  {
    "id": "workbench.action.decreaseViewHeight",
    "metadata": {
      "description": {
        "value": "Decrease Editor Height",
        "original": "Decrease Editor Height"
      }
    }
  },
  {
    "id": "workbench.action.customizeLayout",
    "metadata": {
      "description": {
        "value": "Customize Layout...",
        "original": "Customize Layout..."
      }
    }
  },
  {
    "id": "list.focusDown",
    "key": "j",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "id": "list.focusUp",
    "key": "k",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "id": "list.focusAnyDown",
    "key": "alt+down",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "id": "list.focusAnyUp",
    "key": "alt+up",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "id": "list.focusPageDown",
    "key": "pagedown",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "id": "list.focusPageUp",
    "key": "pageup",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "id": "list.focusFirst",
    "key": "home",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "id": "list.focusLast",
    "key": "end",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "id": "list.focusAnyFirst",
    "key": "alt+home",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "id": "list.focusAnyLast",
    "key": "alt+end",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "id": "list.expandSelectionDown",
    "key": "shift+down",
    "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused"
  },
  {
    "id": "list.expandSelectionUp",
    "key": "shift+up",
    "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused"
  },
  {
    "id": "list.collapse",
    "key": "left",
    "when": "listFocus && treeElementCanCollapse && !inputFocus && !treestickyScrollFocused || listFocus && treeElementHasParent && !inputFocus && !treestickyScrollFocused"
  },
  {
    "id": "list.stickyScroll.collapse",
    "key": "left",
    "when": "treestickyScrollFocused"
  },
  {
    "id": "list.collapseAll",
    "key": "ctrl+left",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "id": "list.collapseAllToFocus"
  },
  {
    "id": "list.focusParent"
  },
  {
    "id": "list.expand",
    "key": "right",
    "when": "listFocus && treeElementCanExpand && !inputFocus && !treestickyScrollFocused || listFocus && treeElementHasChild && !inputFocus && !treestickyScrollFocused"
  },
  {
    "id": "list.select",
    "key": "enter",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "id": "list.stickyScrollselect",
    "key": "enter",
    "when": "treestickyScrollFocused"
  },
  {
    "id": "list.selectAndPreserveFocus"
  },
  {
    "id": "list.selectAll",
    "key": "ctrl+a",
    "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused"
  },
  {
    "id": "list.toggleSelection",
    "key": "ctrl+shift+enter",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "id": "list.showHover",
    "key": "ctrl+k ctrl+i",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "id": "list.toggleExpand",
    "key": "space",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "id": "list.stickyScrolltoggleExpand",
    "key": "space",
    "when": "treestickyScrollFocused"
  },
  {
    "id": "list.clear",
    "key": "escape",
    "when": "listFocus && listHasSelectionOrFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "id": "list.triggerTypeNavigation"
  },
  {
    "id": "list.toggleFindMode"
  },
  {
    "id": "list.toggleFindMatchType"
  },
  {
    "id": "list.toggleKeyboardNavigation"
  },
  {
    "id": "list.toggleFilterOnType"
  },
  {
    "id": "list.find",
    "key": "ctrl+alt+f",
    "when": "listFocus && listSupportsFind"
  },
  {
    "id": "list.closeFind",
    "key": "escape",
    "when": "listFocus && treeFindOpen"
  },
  {
    "id": "list.scrollUp",
    "key": "ctrl+up",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused && listScrollAtBoundary != 'both' && listScrollAtBoundary != 'top'"
  },
  {
    "id": "list.scrollDown",
    "key": "ctrl+down",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused && listScrollAtBoundary != 'both' && listScrollAtBoundary != 'bottom'"
  },
  {
    "id": "list.scrollLeft"
  },
  {
    "id": "list.scrollRight"
  },
  {
    "id": "tree.toggleStickyScroll",
    "metadata": {
      "description": "Toggles Sticky Scroll widget at the top of tree structures such as the File Explorer and Debug variables View."
    }
  },
  {
    "id": "workbench.action.navigateLeft",
    "metadata": {
      "description": {
        "value": "Navigate to the View on the Left",
        "original": "Navigate to the View on the Left"
      }
    }
  },
  {
    "id": "workbench.action.navigateRight",
    "metadata": {
      "description": {
        "value": "Navigate to the View on the Right",
        "original": "Navigate to the View on the Right"
      }
    }
  },
  {
    "id": "workbench.action.navigateUp",
    "metadata": {
      "description": {
        "value": "Navigate to the View Above",
        "original": "Navigate to the View Above"
      }
    }
  },
  {
    "id": "workbench.action.navigateDown",
    "metadata": {
      "description": {
        "value": "Navigate to the View Below",
        "original": "Navigate to the View Below"
      }
    }
  },
  {
    "id": "workbench.action.focusNextPart",
    "metadata": {
      "description": {
        "value": "Focus Next Part",
        "original": "Focus Next Part"
      }
    },
    "key": "f6"
  },
  {
    "id": "workbench.action.focusPreviousPart",
    "metadata": {
      "description": {
        "value": "Focus Previous Part",
        "original": "Focus Previous Part"
      }
    },
    "key": "shift+f6"
  },
  {
    "id": "workbench.action.newWindow",
    "metadata": {
      "description": {
        "value": "New Window",
        "original": "New Window",
        "mnemonicTitle": "New &&Window"
      }
    },
    "key": "ctrl+shift+n"
  },
  {
    "id": "workbench.action.toggleFullScreen",
    "metadata": {
      "description": {
        "value": "Toggle Full Screen",
        "original": "Toggle Full Screen",
        "mnemonicTitle": "&&Full Screen"
      }
    },
    "key": "f11",
    "when": "!isIOS"
  },
  {
    "id": "workbench.action.quickOpenRecent",
    "metadata": {
      "description": {
        "value": "Quick Open Recent...",
        "original": "Quick Open Recent..."
      }
    }
  },
  {
    "id": "workbench.action.openRecent",
    "metadata": {
      "description": {
        "value": "Open Recent...",
        "original": "Open Recent...",
        "mnemonicTitle": "&&More..."
      }
    },
    "key": "ctrl+r"
  },
  {
    "id": "workbench.action.reloadWindow",
    "metadata": {
      "description": {
        "value": "Reload Window",
        "original": "Reload Window"
      }
    },
    "key": "ctrl+r",
    "when": "isDevelopment"
  },
  {
    "id": "workbench.action.showAboutDialog",
    "metadata": {
      "description": {
        "value": "About",
        "original": "About",
        "mnemonicTitle": "&&About"
      }
    }
  },
  {
    "id": "workbench.action.blur",
    "metadata": {
      "description": {
        "value": "Remove keyboard focus from focused element",
        "original": "Remove keyboard focus from focused element"
      }
    }
  },
  {
    "id": "workbench.action.quickOpenNavigateNextInRecentFilesPicker",
    "key": "ctrl+r",
    "when": "inQuickOpen && inRecentFilesPicker"
  },
  {
    "id": "workbench.action.quickOpenNavigatePreviousInRecentFilesPicker",
    "key": "ctrl+shift+r",
    "when": "inQuickOpen && inRecentFilesPicker"
  },
  {
    "id": "workbench.action.toggleConfirmBeforeClose"
  },
  {
    "id": "workbench.action.addRootFolder",
    "metadata": {
      "description": {
        "value": "Add Folder to Workspace...",
        "original": "Add Folder to Workspace..."
      }
    }
  },
  {
    "id": "workbench.action.removeRootFolder",
    "metadata": {
      "description": {
        "value": "Remove Folder from Workspace...",
        "original": "Remove Folder from Workspace..."
      }
    }
  },
  {
    "id": "workbench.action.files.openFile",
    "metadata": {
      "description": {
        "value": "Open File...",
        "original": "Open File..."
      }
    },
    "key": "ctrl+o",
    "when": "true"
  },
  {
    "id": "workbench.action.files.openFolder",
    "metadata": {
      "description": {
        "value": "Open Folder...",
        "original": "Open Folder..."
      }
    },
    "key": "ctrl+k ctrl+o",
    "when": "openFolderWorkspaceSupport"
  },
  {
    "id": "workbench.action.files.openFolderViaWorkspace",
    "metadata": {
      "description": {
        "value": "Open Folder...",
        "original": "Open Folder..."
      }
    },
    "key": "ctrl+o",
    "when": "!openFolderWorkspaceSupport && workbenchState == 'workspace'"
  },
  {
    "id": "workbench.action.files.openFileFolder",
    "metadata": {
      "description": {
        "value": "Open...",
        "original": "Open..."
      }
    },
    "key": "ctrl+o",
    "when": "isMacNative && openFolderWorkspaceSupport"
  },
  {
    "id": "workbench.action.openWorkspace",
    "metadata": {
      "description": {
        "value": "Open Workspace from File...",
        "original": "Open Workspace from File..."
      }
    }
  },
  {
    "id": "workbench.action.openWorkspaceConfigFile",
    "metadata": {
      "description": {
        "value": "Open Workspace Configuration File",
        "original": "Open Workspace Configuration File"
      }
    }
  },
  {
    "id": "workbench.action.closeFolder",
    "metadata": {
      "description": {
        "value": "Close Workspace",
        "original": "Close Workspace"
      }
    },
    "key": "ctrl+k f",
    "when": "emptyWorkspaceSupport && workbenchState != 'empty'"
  },
  {
    "id": "workbench.action.saveWorkspaceAs",
    "metadata": {
      "description": {
        "value": "Save Workspace As...",
        "original": "Save Workspace As..."
      }
    }
  },
  {
    "id": "workbench.action.duplicateWorkspaceInNewWindow",
    "metadata": {
      "description": {
        "value": "Duplicate As Workspace in New Window",
        "original": "Duplicate As Workspace in New Window"
      }
    }
  },
  {
    "id": "workbench.action.closeQuickOpen",
    "key": "escape",
    "when": "inQuickOpen"
  },
  {
    "id": "workbench.action.acceptSelectedQuickOpenItem"
  },
  {
    "id": "workbench.action.alternativeAcceptSelectedQuickOpenItem"
  },
  {
    "id": "workbench.action.focusQuickOpen"
  },
  {
    "id": "workbench.action.quickOpenNavigateNextInFilePicker",
    "key": "ctrl+p",
    "when": "inFilesPicker && inQuickOpen"
  },
  {
    "id": "workbench.action.quickOpenNavigatePreviousInFilePicker",
    "key": "ctrl+shift+p",
    "when": "inFilesPicker && inQuickOpen"
  },
  {
    "id": "workbench.action.quickPickManyToggle"
  },
  {
    "id": "workbench.action.quickInputBack",
    "key": "alt+left",
    "when": "inQuickOpen"
  },
  {
    "id": "workbench.action.quickOpen",
    "metadata": {
      "description": "Quick access",
      "args": [
        {
          "name": "prefix",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "key": "ctrl+p"
  },
  {
    "id": "workbench.action.quickOpenWithModes",
    "metadata": {
      "description": "Quick Open"
    }
  },
  {
    "id": "workbench.action.quickOpenPreviousEditor"
  },
  {
    "id": "workbench.action.quickOpenSelectNext",
    "metadata": {
      "description": {
        "value": "Select Next in Quick Open",
        "original": "Select Next in Quick Open"
      }
    }
  },
  {
    "id": "workbench.action.quickOpenSelectPrevious",
    "metadata": {
      "description": {
        "value": "Select Previous in Quick Open",
        "original": "Select Previous in Quick Open"
      }
    }
  },
  {
    "id": "workbench.action.quickOpenNavigateNext",
    "metadata": {
      "description": {
        "value": "Navigate Next in Quick Open",
        "original": "Navigate Next in Quick Open"
      }
    }
  },
  {
    "id": "workbench.action.quickOpenNavigatePrevious",
    "metadata": {
      "description": {
        "value": "Navigate Previous in Quick Open",
        "original": "Navigate Previous in Quick Open"
      }
    }
  },
  {
    "id": "remote.tunnel.label",
    "key": "f2",
    "when": "tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'"
  },
  {
    "id": "remote.tunnel.forwardInline"
  },
  {
    "id": "remote.tunnel.forwardCommandPalette"
  },
  {
    "id": "remote.tunnel.closeInline",
    "key": "delete",
    "when": "tunnelCloseable && tunnelViewFocus"
  },
  {
    "id": "remote.tunnel.closeCommandPalette"
  },
  {
    "id": "remote.tunnel.open"
  },
  {
    "id": "remote.tunnel.openPreview"
  },
  {
    "id": "remote.tunnel.openCommandPalette"
  },
  {
    "id": "remote.tunnel.copyAddressInline",
    "key": "ctrl+c",
    "when": "tunnelViewFocus && tunnelType == 'Detected' && tunnelViewMultiSelection == 'undefined' || tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'"
  },
  {
    "id": "remote.tunnel.copyAddressCommandPalette"
  },
  {
    "id": "remote.tunnel.changeLocalPort"
  },
  {
    "id": "remote.tunnel.setProtocolHttp"
  },
  {
    "id": "remote.tunnel.setProtocolHttps"
  },
  {
    "id": "workbench.action.editor.changeLanguageMode",
    "metadata": {
      "description": "Change the language mode of the active text editor.",
      "args": [
        {
          "name": "The name of the language mode to change to."
        }
      ]
    },
    "key": "ctrl+k m",
    "when": "!notebookEditorFocused"
  },
  {
    "id": "workbench.action.editor.changeEOL",
    "metadata": {
      "description": {
        "value": "Change End of Line Sequence",
        "original": "Change End of Line Sequence"
      }
    }
  },
  {
    "id": "workbench.action.editor.changeEncoding",
    "metadata": {
      "description": {
        "value": "Change File Encoding",
        "original": "Change File Encoding"
      }
    }
  },
  {
    "id": "workbench.action.navigateForward",
    "metadata": {
      "description": {
        "value": "Go Forward",
        "original": "Go Forward",
        "mnemonicTitle": "&&Forward"
      }
    },
    "key": "alt+right",
    "when": "canNavigateForward"
  },
  {
    "id": "workbench.action.navigateBack",
    "metadata": {
      "description": {
        "value": "Go Back",
        "original": "Go Back",
        "mnemonicTitle": "&&Back"
      }
    },
    "key": "alt+left",
    "when": "canNavigateBack"
  },
  {
    "id": "workbench.action.nextEditor",
    "metadata": {
      "description": {
        "value": "Open Next Editor",
        "original": "Open Next Editor"
      }
    },
    "key": "ctrl+pagedown"
  },
  {
    "id": "workbench.action.previousEditor",
    "metadata": {
      "description": {
        "value": "Open Previous Editor",
        "original": "Open Previous Editor"
      }
    },
    "key": "ctrl+pageup"
  },
  {
    "id": "workbench.action.nextEditorInGroup",
    "metadata": {
      "description": {
        "value": "Open Next Editor in Group",
        "original": "Open Next Editor in Group"
      }
    },
    "key": "ctrl+k ctrl+pagedown"
  },
  {
    "id": "workbench.action.previousEditorInGroup",
    "metadata": {
      "description": {
        "value": "Open Previous Editor in Group",
        "original": "Open Previous Editor in Group"
      }
    },
    "key": "ctrl+k ctrl+pageup"
  },
  {
    "id": "workbench.action.firstEditorInGroup",
    "metadata": {
      "description": {
        "value": "Open First Editor in Group",
        "original": "Open First Editor in Group"
      }
    }
  },
  {
    "id": "workbench.action.lastEditorInGroup",
    "metadata": {
      "description": {
        "value": "Open Last Editor in Group",
        "original": "Open Last Editor in Group"
      }
    },
    "key": "alt+0"
  },
  {
    "id": "workbench.action.openNextRecentlyUsedEditor",
    "metadata": {
      "description": {
        "value": "Open Next Recently Used Editor",
        "original": "Open Next Recently Used Editor"
      }
    }
  },
  {
    "id": "workbench.action.openPreviousRecentlyUsedEditor",
    "metadata": {
      "description": {
        "value": "Open Previous Recently Used Editor",
        "original": "Open Previous Recently Used Editor"
      }
    }
  },
  {
    "id": "workbench.action.openNextRecentlyUsedEditorInGroup",
    "metadata": {
      "description": {
        "value": "Open Next Recently Used Editor In Group",
        "original": "Open Next Recently Used Editor In Group"
      }
    }
  },
  {
    "id": "workbench.action.openPreviousRecentlyUsedEditorInGroup",
    "metadata": {
      "description": {
        "value": "Open Previous Recently Used Editor In Group",
        "original": "Open Previous Recently Used Editor In Group"
      }
    }
  },
  {
    "id": "workbench.action.reopenClosedEditor",
    "metadata": {
      "description": {
        "value": "Reopen Closed Editor",
        "original": "Reopen Closed Editor"
      }
    },
    "key": "ctrl+shift+t"
  },
  {
    "id": "workbench.action.clearRecentFiles",
    "metadata": {
      "description": {
        "value": "Clear Recently Opened...",
        "original": "Clear Recently Opened..."
      }
    }
  },
  {
    "id": "workbench.action.showAllEditors",
    "metadata": {
      "description": {
        "value": "Show All Editors By Appearance",
        "original": "Show All Editors By Appearance"
      }
    },
    "key": "ctrl+k ctrl+p"
  },
  {
    "id": "workbench.action.showAllEditorsByMostRecentlyUsed",
    "metadata": {
      "description": {
        "value": "Show All Editors By Most Recently Used",
        "original": "Show All Editors By Most Recently Used"
      }
    }
  },
  {
    "id": "workbench.action.showEditorsInActiveGroup",
    "metadata": {
      "description": {
        "value": "Show Editors in Active Group By Most Recently Used",
        "original": "Show Editors in Active Group By Most Recently Used"
      }
    }
  },
  {
    "id": "workbench.action.closeAllEditors",
    "metadata": {
      "description": {
        "value": "Close All Editors",
        "original": "Close All Editors"
      }
    },
    "key": "ctrl+k ctrl+w"
  },
  {
    "id": "workbench.action.closeAllGroups",
    "metadata": {
      "description": {
        "value": "Close All Editor Groups",
        "original": "Close All Editor Groups"
      }
    },
    "key": "ctrl+k ctrl+shift+w"
  },
  {
    "id": "workbench.action.closeEditorsToTheLeft",
    "metadata": {
      "description": {
        "value": "Close Editors to the Left in Group",
        "original": "Close Editors to the Left in Group"
      }
    }
  },
  {
    "id": "workbench.action.closeEditorsInOtherGroups",
    "metadata": {
      "description": {
        "value": "Close Editors in Other Groups",
        "original": "Close Editors in Other Groups"
      }
    }
  },
  {
    "id": "workbench.action.closeEditorInAllGroups",
    "metadata": {
      "description": {
        "value": "Close Editor in All Groups",
        "original": "Close Editor in All Groups"
      }
    }
  },
  {
    "id": "workbench.action.revertAndCloseActiveEditor",
    "metadata": {
      "description": {
        "value": "Revert and Close Editor",
        "original": "Revert and Close Editor"
      }
    }
  },
  {
    "id": "workbench.action.splitEditor",
    "metadata": {
      "description": {
        "value": "Split Editor",
        "original": "Split Editor"
      }
    },
    "key": "ctrl+\\"
  },
  {
    "id": "workbench.action.splitEditorOrthogonal",
    "metadata": {
      "description": {
        "value": "Split Editor Orthogonal",
        "original": "Split Editor Orthogonal"
      }
    },
    "key": "ctrl+k ctrl+\\"
  },
  {
    "id": "workbench.action.splitEditorLeft",
    "key": "ctrl+k ctrl+\\"
  },
  {
    "id": "workbench.action.splitEditorRight",
    "key": "ctrl+k ctrl+\\"
  },
  {
    "id": "workbench.action.splitEditorUp",
    "key": "ctrl+k ctrl+\\"
  },
  {
    "id": "workbench.action.splitEditorDown",
    "key": "ctrl+k ctrl+\\"
  },
  {
    "id": "workbench.action.joinTwoGroups",
    "metadata": {
      "description": {
        "value": "Join Editor Group with Next Group",
        "original": "Join Editor Group with Next Group"
      }
    }
  },
  {
    "id": "workbench.action.joinAllGroups",
    "metadata": {
      "description": {
        "value": "Join All Editor Groups",
        "original": "Join All Editor Groups"
      }
    }
  },
  {
    "id": "workbench.action.navigateEditorGroups",
    "metadata": {
      "description": {
        "value": "Navigate Between Editor Groups",
        "original": "Navigate Between Editor Groups"
      }
    }
  },
  {
    "id": "workbench.action.evenEditorWidths",
    "metadata": {
      "description": {
        "value": "Reset Editor Group Sizes",
        "original": "Reset Editor Group Sizes"
      }
    }
  },
  {
    "id": "workbench.action.toggleEditorWidths",
    "metadata": {
      "description": {
        "value": "Toggle Editor Group Sizes",
        "original": "Toggle Editor Group Sizes"
      }
    }
  },
  {
    "id": "workbench.action.maximizeEditorHideSidebar",
    "metadata": {
      "description": {
        "value": "Maximize Editor Group and Hide Side Bars",
        "original": "Maximize Editor Group and Hide Side Bars"
      }
    }
  },
  {
    "id": "workbench.action.toggleMaximizeEditorGroup",
    "metadata": {
      "description": {
        "value": "Toggle Maximize Editor Group",
        "original": "Toggle Maximize Editor Group"
      }
    },
    "key": "ctrl+k ctrl+m",
    "when": "editorPartMaximizedEditorGroup || editorPartMultipleEditorGroups"
  },
  {
    "id": "workbench.action.minimizeOtherEditors",
    "metadata": {
      "description": {
        "value": "Expand Editor Group",
        "original": "Expand Editor Group"
      }
    }
  },
  {
    "id": "workbench.action.minimizeOtherEditorsHideSidebar",
    "metadata": {
      "description": {
        "value": "Expand Editor Group and Hide Side Bars",
        "original": "Expand Editor Group and Hide Side Bars"
      }
    }
  },
  {
    "id": "workbench.action.moveEditorLeftInGroup",
    "metadata": {
      "description": {
        "value": "Move Editor Left",
        "original": "Move Editor Left"
      }
    },
    "key": "ctrl+shift+pageup"
  },
  {
    "id": "workbench.action.moveEditorRightInGroup",
    "metadata": {
      "description": {
        "value": "Move Editor Right",
        "original": "Move Editor Right"
      }
    },
    "key": "ctrl+shift+pagedown"
  },
  {
    "id": "workbench.action.moveActiveEditorGroupLeft",
    "metadata": {
      "description": {
        "value": "Move Editor Group Left",
        "original": "Move Editor Group Left"
      }
    },
    "key": "ctrl+k left"
  },
  {
    "id": "workbench.action.moveActiveEditorGroupRight",
    "metadata": {
      "description": {
        "value": "Move Editor Group Right",
        "original": "Move Editor Group Right"
      }
    },
    "key": "ctrl+k right"
  },
  {
    "id": "workbench.action.moveActiveEditorGroupUp",
    "metadata": {
      "description": {
        "value": "Move Editor Group Up",
        "original": "Move Editor Group Up"
      }
    },
    "key": "ctrl+k up"
  },
  {
    "id": "workbench.action.moveActiveEditorGroupDown",
    "metadata": {
      "description": {
        "value": "Move Editor Group Down",
        "original": "Move Editor Group Down"
      }
    },
    "key": "ctrl+k down"
  },
  {
    "id": "workbench.action.duplicateActiveEditorGroupLeft",
    "metadata": {
      "description": {
        "value": "Duplicate Editor Group Left",
        "original": "Duplicate Editor Group Left"
      }
    }
  },
  {
    "id": "workbench.action.duplicateActiveEditorGroupRight",
    "metadata": {
      "description": {
        "value": "Duplicate Editor Group Right",
        "original": "Duplicate Editor Group Right"
      }
    }
  },
  {
    "id": "workbench.action.duplicateActiveEditorGroupUp",
    "metadata": {
      "description": {
        "value": "Duplicate Editor Group Up",
        "original": "Duplicate Editor Group Up"
      }
    }
  },
  {
    "id": "workbench.action.duplicateActiveEditorGroupDown",
    "metadata": {
      "description": {
        "value": "Duplicate Editor Group Down",
        "original": "Duplicate Editor Group Down"
      }
    }
  },
  {
    "id": "workbench.action.moveEditorToPreviousGroup",
    "metadata": {
      "description": {
        "value": "Move Editor into Previous Group",
        "original": "Move Editor into Previous Group"
      }
    },
    "key": "ctrl+alt+left"
  },
  {
    "id": "workbench.action.moveEditorToNextGroup",
    "metadata": {
      "description": {
        "value": "Move Editor into Next Group",
        "original": "Move Editor into Next Group"
      }
    },
    "key": "ctrl+alt+right"
  },
  {
    "id": "workbench.action.moveEditorToFirstGroup",
    "metadata": {
      "description": {
        "value": "Move Editor into First Group",
        "original": "Move Editor into First Group"
      }
    },
    "key": "shift+alt+1"
  },
  {
    "id": "workbench.action.moveEditorToLastGroup",
    "metadata": {
      "description": {
        "value": "Move Editor into Last Group",
        "original": "Move Editor into Last Group"
      }
    },
    "key": "shift+alt+9"
  },
  {
    "id": "workbench.action.moveEditorToLeftGroup",
    "metadata": {
      "description": {
        "value": "Move Editor into Left Group",
        "original": "Move Editor into Left Group"
      }
    }
  },
  {
    "id": "workbench.action.moveEditorToRightGroup",
    "metadata": {
      "description": {
        "value": "Move Editor into Right Group",
        "original": "Move Editor into Right Group"
      }
    }
  },
  {
    "id": "workbench.action.moveEditorToAboveGroup",
    "metadata": {
      "description": {
        "value": "Move Editor into Group Above",
        "original": "Move Editor into Group Above"
      }
    }
  },
  {
    "id": "workbench.action.moveEditorToBelowGroup",
    "metadata": {
      "description": {
        "value": "Move Editor into Group Below",
        "original": "Move Editor into Group Below"
      }
    }
  },
  {
    "id": "workbench.action.splitEditorToPreviousGroup",
    "metadata": {
      "description": {
        "value": "Split Editor into Previous Group",
        "original": "Split Editor into Previous Group"
      }
    }
  },
  {
    "id": "workbench.action.splitEditorToNextGroup",
    "metadata": {
      "description": {
        "value": "Split Editor into Next Group",
        "original": "Split Editor into Next Group"
      }
    }
  },
  {
    "id": "workbench.action.splitEditorToFirstGroup",
    "metadata": {
      "description": {
        "value": "Split Editor into First Group",
        "original": "Split Editor into First Group"
      }
    }
  },
  {
    "id": "workbench.action.splitEditorToLastGroup",
    "metadata": {
      "description": {
        "value": "Split Editor into Last Group",
        "original": "Split Editor into Last Group"
      }
    }
  },
  {
    "id": "workbench.action.splitEditorToLeftGroup",
    "metadata": {
      "description": {
        "value": "Split Editor into Left Group",
        "original": "Split Editor into Left Group"
      }
    }
  },
  {
    "id": "workbench.action.splitEditorToRightGroup",
    "metadata": {
      "description": {
        "value": "Split Editor into Right Group",
        "original": "Split Editor into Right Group"
      }
    }
  },
  {
    "id": "workbench.action.splitEditorToAboveGroup",
    "metadata": {
      "description": {
        "value": "Split Editor into Group Above",
        "original": "Split Editor into Group Above"
      }
    }
  },
  {
    "id": "workbench.action.splitEditorToBelowGroup",
    "metadata": {
      "description": {
        "value": "Split Editor into Group Below",
        "original": "Split Editor into Group Below"
      }
    }
  },
  {
    "id": "workbench.action.focusActiveEditorGroup",
    "metadata": {
      "description": {
        "value": "Focus Active Editor Group",
        "original": "Focus Active Editor Group"
      }
    }
  },
  {
    "id": "workbench.action.focusFirstEditorGroup",
    "metadata": {
      "description": {
        "value": "Focus First Editor Group",
        "original": "Focus First Editor Group"
      }
    },
    "key": "ctrl+1"
  },
  {
    "id": "workbench.action.focusLastEditorGroup",
    "metadata": {
      "description": {
        "value": "Focus Last Editor Group",
        "original": "Focus Last Editor Group"
      }
    }
  },
  {
    "id": "workbench.action.focusPreviousGroup",
    "metadata": {
      "description": {
        "value": "Focus Previous Editor Group",
        "original": "Focus Previous Editor Group"
      }
    }
  },
  {
    "id": "workbench.action.focusNextGroup",
    "metadata": {
      "description": {
        "value": "Focus Next Editor Group",
        "original": "Focus Next Editor Group"
      }
    }
  },
  {
    "id": "workbench.action.focusLeftGroup",
    "metadata": {
      "description": {
        "value": "Focus Left Editor Group",
        "original": "Focus Left Editor Group"
      }
    },
    "key": "ctrl+k ctrl+left"
  },
  {
    "id": "workbench.action.focusRightGroup",
    "metadata": {
      "description": {
        "value": "Focus Right Editor Group",
        "original": "Focus Right Editor Group"
      }
    },
    "key": "ctrl+k ctrl+right"
  },
  {
    "id": "workbench.action.focusAboveGroup",
    "metadata": {
      "description": {
        "value": "Focus Editor Group Above",
        "original": "Focus Editor Group Above"
      }
    },
    "key": "ctrl+k ctrl+up"
  },
  {
    "id": "workbench.action.focusBelowGroup",
    "metadata": {
      "description": {
        "value": "Focus Editor Group Below",
        "original": "Focus Editor Group Below"
      }
    },
    "key": "ctrl+k ctrl+down"
  },
  {
    "id": "workbench.action.newGroupLeft",
    "metadata": {
      "description": {
        "value": "New Editor Group to the Left",
        "original": "New Editor Group to the Left"
      }
    }
  },
  {
    "id": "workbench.action.newGroupRight",
    "metadata": {
      "description": {
        "value": "New Editor Group to the Right",
        "original": "New Editor Group to the Right"
      }
    }
  },
  {
    "id": "workbench.action.newGroupAbove",
    "metadata": {
      "description": {
        "value": "New Editor Group Above",
        "original": "New Editor Group Above"
      }
    }
  },
  {
    "id": "workbench.action.newGroupBelow",
    "metadata": {
      "description": {
        "value": "New Editor Group Below",
        "original": "New Editor Group Below"
      }
    }
  },
  {
    "id": "workbench.action.navigateLast",
    "metadata": {
      "description": {
        "value": "Go Previous",
        "original": "Go Previous"
      }
    }
  },
  {
    "id": "workbench.action.navigateForwardInEditLocations",
    "metadata": {
      "description": {
        "value": "Go Forward in Edit Locations",
        "original": "Go Forward in Edit Locations"
      }
    }
  },
  {
    "id": "workbench.action.navigateBackInEditLocations",
    "metadata": {
      "description": {
        "value": "Go Back in Edit Locations",
        "original": "Go Back in Edit Locations"
      }
    }
  },
  {
    "id": "workbench.action.navigatePreviousInEditLocations",
    "metadata": {
      "description": {
        "value": "Go Previous in Edit Locations",
        "original": "Go Previous in Edit Locations"
      }
    }
  },
  {
    "id": "workbench.action.navigateToLastEditLocation",
    "metadata": {
      "description": {
        "value": "Go to Last Edit Location",
        "original": "Go to Last Edit Location"
      }
    },
    "key": "ctrl+k ctrl+q"
  },
  {
    "id": "workbench.action.navigateForwardInNavigationLocations",
    "metadata": {
      "description": {
        "value": "Go Forward in Navigation Locations",
        "original": "Go Forward in Navigation Locations"
      }
    }
  },
  {
    "id": "workbench.action.navigateBackInNavigationLocations",
    "metadata": {
      "description": {
        "value": "Go Back in Navigation Locations",
        "original": "Go Back in Navigation Locations"
      }
    }
  },
  {
    "id": "workbench.action.navigatePreviousInNavigationLocations",
    "metadata": {
      "description": {
        "value": "Go Previous in Navigation Locations",
        "original": "Go Previous in Navigation Locations"
      }
    }
  },
  {
    "id": "workbench.action.navigateToLastNavigationLocation",
    "metadata": {
      "description": {
        "value": "Go to Last Navigation Location",
        "original": "Go to Last Navigation Location"
      }
    }
  },
  {
    "id": "workbench.action.clearEditorHistory",
    "metadata": {
      "description": {
        "value": "Clear Editor History",
        "original": "Clear Editor History"
      }
    }
  },
  {
    "id": "workbench.action.editorLayoutSingle",
    "metadata": {
      "description": {
        "value": "Single Column Editor Layout",
        "original": "Single Column Editor Layout"
      }
    }
  },
  {
    "id": "workbench.action.editorLayoutTwoColumns",
    "metadata": {
      "description": {
        "value": "Two Columns Editor Layout",
        "original": "Two Columns Editor Layout"
      }
    }
  },
  {
    "id": "workbench.action.editorLayoutThreeColumns",
    "metadata": {
      "description": {
        "value": "Three Columns Editor Layout",
        "original": "Three Columns Editor Layout"
      }
    }
  },
  {
    "id": "workbench.action.editorLayoutTwoRows",
    "metadata": {
      "description": {
        "value": "Two Rows Editor Layout",
        "original": "Two Rows Editor Layout"
      }
    }
  },
  {
    "id": "workbench.action.editorLayoutThreeRows",
    "metadata": {
      "description": {
        "value": "Three Rows Editor Layout",
        "original": "Three Rows Editor Layout"
      }
    }
  },
  {
    "id": "workbench.action.editorLayoutTwoByTwoGrid",
    "metadata": {
      "description": {
        "value": "Grid Editor Layout (2x2)",
        "original": "Grid Editor Layout (2x2)"
      }
    }
  },
  {
    "id": "workbench.action.editorLayoutTwoRowsRight",
    "metadata": {
      "description": {
        "value": "Two Rows Right Editor Layout",
        "original": "Two Rows Right Editor Layout"
      }
    }
  },
  {
    "id": "workbench.action.editorLayoutTwoColumnsBottom",
    "metadata": {
      "description": {
        "value": "Two Columns Bottom Editor Layout",
        "original": "Two Columns Bottom Editor Layout"
      }
    }
  },
  {
    "id": "workbench.action.toggleEditorType",
    "metadata": {
      "description": {
        "value": "Toggle Editor Type",
        "original": "Toggle Editor Type"
      }
    }
  },
  {
    "id": "workbench.action.reopenTextEditor",
    "metadata": {
      "description": {
        "value": "Reopen Editor With Text Editor",
        "original": "Reopen Editor With Text Editor"
      }
    }
  },
  {
    "id": "workbench.action.quickOpenPreviousRecentlyUsedEditor",
    "metadata": {
      "description": {
        "value": "Quick Open Previous Recently Used Editor",
        "original": "Quick Open Previous Recently Used Editor"
      }
    }
  },
  {
    "id": "workbench.action.quickOpenLeastRecentlyUsedEditor",
    "metadata": {
      "description": {
        "value": "Quick Open Least Recently Used Editor",
        "original": "Quick Open Least Recently Used Editor"
      }
    }
  },
  {
    "id": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
    "metadata": {
      "description": {
        "value": "Quick Open Previous Recently Used Editor in Group",
        "original": "Quick Open Previous Recently Used Editor in Group"
      }
    },
    "key": "ctrl+tab",
    "when": "!activeEditorGroupEmpty"
  },
  {
    "id": "workbench.action.quickOpenLeastRecentlyUsedEditorInGroup",
    "metadata": {
      "description": {
        "value": "Quick Open Least Recently Used Editor in Group",
        "original": "Quick Open Least Recently Used Editor in Group"
      }
    },
    "key": "ctrl+shift+tab",
    "when": "!activeEditorGroupEmpty"
  },
  {
    "id": "workbench.action.openPreviousEditorFromHistory",
    "metadata": {
      "description": {
        "value": "Quick Open Previous Editor from History",
        "original": "Quick Open Previous Editor from History"
      }
    }
  },
  {
    "id": "workbench.action.moveEditorToNewWindow",
    "metadata": {
      "description": {
        "value": "Move Editor into New Window",
        "original": "Move Editor into New Window",
        "mnemonicTitle": "&&Move Editor into New Window"
      }
    }
  },
  {
    "id": "workbench.action.copyEditorToNewWindow",
    "metadata": {
      "description": {
        "value": "Copy Editor into New Window",
        "original": "Copy Editor into New Window",
        "mnemonicTitle": "&&Copy Editor into New Window"
      }
    },
    "key": "ctrl+k o",
    "when": "activeEditor"
  },
  {
    "id": "workbench.action.moveEditorGroupToNewWindow",
    "metadata": {
      "description": {
        "value": "Move Editor Group into New Window",
        "original": "Move Editor Group into New Window",
        "mnemonicTitle": "&&Move Editor Group into New Window"
      }
    }
  },
  {
    "id": "workbench.action.copyEditorGroupToNewWindow",
    "metadata": {
      "description": {
        "value": "Copy Editor Group into New Window",
        "original": "Copy Editor Group into New Window",
        "mnemonicTitle": "&&Copy Editor Group into New Window"
      }
    }
  },
  {
    "id": "workbench.action.restoreEditorsToMainWindow",
    "metadata": {
      "description": {
        "value": "Restore Editors into Main Window",
        "original": "Restore Editors into Main Window",
        "mnemonicTitle": "&&Restore Editors into Main Window"
      }
    }
  },
  {
    "id": "workbench.action.newEmptyEditorWindow",
    "metadata": {
      "description": {
        "value": "New Empty Editor Window",
        "original": "New Empty Editor Window",
        "mnemonicTitle": "&&New Empty Editor Window"
      }
    }
  },
  {
    "id": "workbench.action.quickOpenNavigateNextInEditorPicker",
    "key": "ctrl+tab",
    "when": "inEditorsPicker && inQuickOpen"
  },
  {
    "id": "workbench.action.quickOpenNavigatePreviousInEditorPicker",
    "key": "ctrl+shift+tab",
    "when": "inEditorsPicker && inQuickOpen"
  },
  {
    "id": "moveActiveEditor",
    "metadata": {
      "description": "Move the active editor by tabs or groups",
      "args": [
        {
          "name": "Active editor move argument",
          "description": "Argument Properties:\n\t* 'to': String value providing where to move.\n\t* 'by': String value providing the unit for move (by tab or by group).\n\t* 'value': Number value providing how many positions or an absolute position to move.",
          "schema": {
            "type": "object",
            "required": [
              "to"
            ],
            "properties": {
              "to": {
                "type": "string",
                "enum": [
                  "left",
                  "right"
                ]
              },
              "by": {
                "type": "string",
                "enum": [
                  "tab",
                  "group"
                ]
              },
              "value": {
                "type": "number"
              }
            }
          }
        }
      ]
    }
  },
  {
    "id": "copyActiveEditor",
    "metadata": {
      "description": "Copy the active editor by groups",
      "args": [
        {
          "name": "Active editor copy argument",
          "description": "Argument Properties:\n\t* 'to': String value providing where to copy.\n\t* 'value': Number value providing how many positions or an absolute position to copy.",
          "schema": {
            "type": "object",
            "required": [
              "to"
            ],
            "properties": {
              "to": {
                "type": "string",
                "enum": [
                  "left",
                  "right"
                ]
              },
              "by": {
                "type": "string",
                "enum": [
                  "tab",
                  "group"
                ]
              },
              "value": {
                "type": "number"
              }
            }
          }
        }
      ]
    }
  },
  {
    "id": "layoutEditorGroups"
  },
  {
    "id": "vscode.setEditorLayout",
    "metadata": {
      "description": "Set the editor layout. Editor layout is represented as a tree of groups in which the first group is the root group of the layout.\n\t\t\t\t\tThe orientation of the first group is 0 (horizontal) by default unless specified otherwise. The other orientations are 1 (vertical).\n\t\t\t\t\tThe orientation of subsequent groups is the opposite of the orientation of the group that contains it.\n\t\t\t\t\tHere are some examples: A layout representing 1 row and 2 columns: { orientation: 0, groups: [{}, {}] }.\n\t\t\t\t\tA layout representing 3 rows and 1 column: { orientation: 1, groups: [{}, {}, {}] }.\n\t\t\t\t\tA layout representing 3 rows and 1 column in which the second row has 2 columns: { orientation: 1, groups: [{}, { groups: [{}, {}] }, {}] }\n\t\t\t\t\t",
      "args": [
        {
          "name": "args",
          "schema": {
            "type": "object",
            "required": [
              "groups"
            ],
            "properties": {
              "orientation": {
                "type": "number",
                "default": 0,
                "description": "The orientation of the root group in the layout. 0 for horizontal, 1 for vertical.",
                "enum": [
                  0,
                  1
                ],
                "enumDescriptions": [
                  "Horizontal",
                  "Vertical"
                ]
              },
              "groups": {
                "$ref": "#/definitions/editorGroupsSchema",
                "default": [
                  {},
                  {}
                ]
              }
            }
          }
        }
      ]
    }
  },
  {
    "id": "vscode.getEditorLayout",
    "metadata": {
      "description": "Get Editor Layout",
      "args": [],
      "returns": "An editor layout object, in the same format as vscode.setEditorLayout"
    }
  },
  {
    "id": "workbench.action.compareEditor.nextChange",
    "key": "alt+f5",
    "when": "textCompareEditorVisible"
  },
  {
    "id": "workbench.action.compareEditor.previousChange",
    "key": "shift+alt+f5",
    "when": "textCompareEditorVisible"
  },
  {
    "id": "toggle.diff.renderSideBySide"
  },
  {
    "id": "workbench.action.compareEditor.focusPrimarySide"
  },
  {
    "id": "workbench.action.compareEditor.focusSecondarySide"
  },
  {
    "id": "workbench.action.compareEditor.focusOtherSide"
  },
  {
    "id": "toggle.diff.ignoreTrimWhitespace"
  },
  {
    "id": "workbench.action.compareEditor.swapSides"
  },
  {
    "id": "vscode.open",
    "metadata": {
      "description": "Opens the provided resource in the editor.",
      "args": [
        {
          "name": "Uri"
        }
      ]
    }
  },
  {
    "id": "_workbench.open"
  },
  {
    "id": "vscode.diff",
    "metadata": {
      "description": "Opens the provided resources in the diff editor to compare their contents.",
      "args": [
        {
          "name": "left",
          "description": "Left-hand side resource of the diff editor"
        },
        {
          "name": "right",
          "description": "Right-hand side resource of the diff editor"
        },
        {
          "name": "title",
          "description": "Human readable title for the diff editor"
        }
      ]
    }
  },
  {
    "id": "_workbench.diff"
  },
  {
    "id": "_workbench.openWith"
  },
  {
    "id": "vscode.changes",
    "metadata": {
      "description": "Opens a list of resources in the changes editor to compare their contents.",
      "args": [
        {
          "name": "title",
          "description": "Human readable title for the diff editor"
        },
        {
          "name": "resources",
          "description": "List of resources to open in the changes editor"
        }
      ]
    }
  },
  {
    "id": "_workbench.changes"
  },
  {
    "id": "_workbench.openMultiDiffEditor"
  },
  {
    "id": "workbench.action.openEditorAtIndex"
  },
  {
    "id": "workbench.action.openEditorAtIndex1",
    "key": "alt+1"
  },
  {
    "id": "workbench.action.openEditorAtIndex2",
    "key": "alt+2"
  },
  {
    "id": "workbench.action.openEditorAtIndex3",
    "key": "alt+3"
  },
  {
    "id": "workbench.action.openEditorAtIndex4",
    "key": "alt+4"
  },
  {
    "id": "workbench.action.openEditorAtIndex5",
    "key": "alt+5"
  },
  {
    "id": "workbench.action.openEditorAtIndex6",
    "key": "alt+6"
  },
  {
    "id": "workbench.action.openEditorAtIndex7",
    "key": "alt+7"
  },
  {
    "id": "workbench.action.openEditorAtIndex8",
    "key": "alt+8"
  },
  {
    "id": "workbench.action.openEditorAtIndex9",
    "key": "alt+9"
  },
  {
    "id": "workbench.action.closeActiveEditor",
    "key": "ctrl+f4"
  },
  {
    "id": "workbench.action.closeActivePinnedEditor"
  },
  {
    "id": "workbench.action.closeEditorsInGroup",
    "key": "ctrl+k w"
  },
  {
    "id": "workbench.action.closeGroup",
    "key": "ctrl+f4",
    "when": "activeEditorGroupEmpty && multipleEditorGroups"
  },
  {
    "id": "workbench.action.closeUnmodifiedEditors",
    "key": "ctrl+k u"
  },
  {
    "id": "workbench.action.closeOtherEditors"
  },
  {
    "id": "workbench.action.closeEditorsToTheRight"
  },
  {
    "id": "workbench.action.reopenWithEditor"
  },
  {
    "id": "workbench.action.closeEditorsAndGroup"
  },
  {
    "id": "workbench.action.keepEditor",
    "key": "ctrl+k enter"
  },
  {
    "id": "workbench.action.toggleKeepEditors"
  },
  {
    "id": "workbench.action.toggleEditorGroupLock",
    "metadata": {
      "description": {
        "value": "Toggle Editor Group Lock",
        "original": "Toggle Editor Group Lock"
      }
    }
  },
  {
    "id": "workbench.action.lockEditorGroup",
    "metadata": {
      "description": {
        "value": "Lock Editor Group",
        "original": "Lock Editor Group"
      }
    }
  },
  {
    "id": "workbench.action.unlockEditorGroup",
    "metadata": {
      "description": {
        "value": "Unlock Editor Group",
        "original": "Unlock Editor Group"
      }
    }
  },
  {
    "id": "workbench.action.pinEditor",
    "key": "ctrl+k shift+enter",
    "when": "!activeEditorIsPinned"
  },
  {
    "id": "workbench.action.compareEditor.openSide",
    "key": "ctrl+k shift+o",
    "when": "inDiffEditor"
  },
  {
    "id": "workbench.action.unpinEditor",
    "key": "ctrl+k shift+enter",
    "when": "activeEditorIsPinned"
  },
  {
    "id": "workbench.action.showEditorsInGroup"
  },
  {
    "id": "workbench.action.splitEditorInGroup",
    "metadata": {
      "description": {
        "value": "Split Editor in Group",
        "original": "Split Editor in Group"
      }
    },
    "key": "ctrl+k ctrl+shift+\\",
    "when": "activeEditorCanSplitInGroup"
  },
  {
    "id": "workbench.action.joinEditorInGroup",
    "metadata": {
      "description": {
        "value": "Join Editor in Group",
        "original": "Join Editor in Group"
      }
    },
    "key": "ctrl+k ctrl+shift+\\",
    "when": "sideBySideEditorActive"
  },
  {
    "id": "workbench.action.toggleSplitEditorInGroup",
    "metadata": {
      "description": {
        "value": "Toggle Split Editor in Group",
        "original": "Toggle Split Editor in Group"
      }
    }
  },
  {
    "id": "workbench.action.toggleSplitEditorInGroupLayout",
    "metadata": {
      "description": {
        "value": "Toggle Layout of Split Editor in Group",
        "original": "Toggle Layout of Split Editor in Group"
      }
    }
  },
  {
    "id": "workbench.action.focusFirstSideEditor",
    "metadata": {
      "description": {
        "value": "Focus First Side in Active Editor",
        "original": "Focus First Side in Active Editor"
      }
    }
  },
  {
    "id": "workbench.action.focusSecondSideEditor",
    "metadata": {
      "description": {
        "value": "Focus Second Side in Active Editor",
        "original": "Focus Second Side in Active Editor"
      }
    }
  },
  {
    "id": "workbench.action.focusOtherSideEditor",
    "metadata": {
      "description": {
        "value": "Focus Other Side in Active Editor",
        "original": "Focus Other Side in Active Editor"
      }
    }
  },
  {
    "id": "workbench.action.focusSecondEditorGroup",
    "key": "ctrl+2"
  },
  {
    "id": "workbench.action.focusThirdEditorGroup",
    "key": "ctrl+3"
  },
  {
    "id": "workbench.action.focusFourthEditorGroup",
    "key": "ctrl+4"
  },
  {
    "id": "workbench.action.focusFifthEditorGroup",
    "key": "ctrl+5"
  },
  {
    "id": "workbench.action.focusSixthEditorGroup",
    "key": "ctrl+6"
  },
  {
    "id": "workbench.action.focusSeventhEditorGroup",
    "key": "ctrl+7"
  },
  {
    "id": "workbench.action.focusEighthEditorGroup",
    "key": "ctrl+8"
  },
  {
    "id": "workbench.action.focusLeftGroupWithoutWrap"
  },
  {
    "id": "workbench.action.focusRightGroupWithoutWrap"
  },
  {
    "id": "workbench.action.focusAboveGroupWithoutWrap"
  },
  {
    "id": "workbench.action.focusBelowGroupWithoutWrap"
  },
  {
    "id": "breadcrumbs.toggle",
    "metadata": {
      "description": {
        "value": "Toggle Breadcrumbs",
        "original": "Toggle Breadcrumbs",
        "mnemonicTitle": "Toggle &&Breadcrumbs"
      }
    }
  },
  {
    "id": "breadcrumbs.focusAndSelect",
    "metadata": {
      "description": {
        "value": "Focus and Select Breadcrumbs",
        "original": "Focus and Select Breadcrumbs"
      }
    },
    "key": "ctrl+shift+.",
    "when": "breadcrumbsPossible && breadcrumbsVisible"
  },
  {
    "id": "breadcrumbs.focus",
    "metadata": {
      "description": {
        "value": "Focus Breadcrumbs",
        "original": "Focus Breadcrumbs"
      }
    },
    "key": "ctrl+shift+;",
    "when": "breadcrumbsPossible && breadcrumbsVisible"
  },
  {
    "id": "breadcrumbs.toggleToOn",
    "key": "ctrl+shift+.",
    "when": "!config.breadcrumbs.enabled"
  },
  {
    "id": "breadcrumbs.focusNext",
    "key": "right",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "id": "breadcrumbs.focusPrevious",
    "key": "left",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "id": "breadcrumbs.focusNextWithPicker",
    "key": "ctrl+right",
    "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "id": "breadcrumbs.focusPreviousWithPicker",
    "key": "ctrl+left",
    "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "id": "breadcrumbs.selectFocused",
    "key": "enter",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "id": "breadcrumbs.revealFocused",
    "key": "space",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "id": "breadcrumbs.selectEditor",
    "key": "escape",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "id": "breadcrumbs.revealFocusedFromTreeAside",
    "key": "ctrl+enter",
    "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "id": "workbench.action.focusSideBar",
    "metadata": {
      "description": {
        "value": "Focus into Primary Side Bar",
        "original": "Focus into Primary Side Bar"
      }
    },
    "key": "ctrl+0"
  },
  {
    "id": "workbench.action.activityBarLocation.default",
    "metadata": {
      "description": {
        "value": "Move Activity Bar to Side",
        "original": "Move Activity Bar to Side",
        "mnemonicTitle": "&&Default"
      }
    }
  },
  {
    "id": "workbench.action.activityBarLocation.top",
    "metadata": {
      "description": {
        "value": "Move Activity Bar to Top",
        "original": "Move Activity Bar to Top",
        "mnemonicTitle": "&&Top"
      }
    }
  },
  {
    "id": "workbench.action.activityBarLocation.bottom",
    "metadata": {
      "description": {
        "value": "Move Activity Bar to Bottom",
        "original": "Move Activity Bar to Bottom",
        "mnemonicTitle": "&&Bottom"
      }
    }
  },
  {
    "id": "workbench.action.activityBarLocation.hide",
    "metadata": {
      "description": {
        "value": "Hide Activity Bar",
        "original": "Hide Activity Bar",
        "mnemonicTitle": "&&Hidden"
      }
    }
  },
  {
    "id": "workbench.action.previousSideBarView",
    "metadata": {
      "description": {
        "value": "Previous Primary Side Bar View",
        "original": "Previous Primary Side Bar View"
      }
    }
  },
  {
    "id": "workbench.action.nextSideBarView",
    "metadata": {
      "description": {
        "value": "Next Primary Side Bar View",
        "original": "Next Primary Side Bar View"
      }
    }
  },
  {
    "id": "workbench.action.focusActivityBar",
    "metadata": {
      "description": {
        "value": "Focus Activity Bar",
        "original": "Focus Activity Bar"
      }
    }
  },
  {
    "id": "workbench.banner.focusBanner",
    "key": "escape",
    "when": "bannerFocused"
  },
  {
    "id": "workbench.banner.focusNextAction",
    "key": "right",
    "when": "bannerFocused"
  },
  {
    "id": "workbench.banner.focusPreviousAction",
    "key": "left",
    "when": "bannerFocused"
  },
  {
    "id": "workbench.action.focusBanner",
    "metadata": {
      "description": {
        "value": "Focus Banner",
        "original": "Focus Banner"
      }
    }
  },
  {
    "id": "workbench.statusBar.focusPrevious",
    "key": "left",
    "when": "statusBarFocused"
  },
  {
    "id": "workbench.statusBar.focusNext",
    "key": "right",
    "when": "statusBarFocused"
  },
  {
    "id": "workbench.statusBar.focusFirst",
    "key": "home",
    "when": "statusBarFocused"
  },
  {
    "id": "workbench.statusBar.focusLast",
    "key": "end",
    "when": "statusBarFocused"
  },
  {
    "id": "workbench.statusBar.clearFocus",
    "key": "escape",
    "when": "statusBarFocused"
  },
  {
    "id": "workbench.action.focusStatusBar",
    "metadata": {
      "description": {
        "value": "Focus Status Bar",
        "original": "Focus Status Bar"
      }
    }
  },
  {
    "id": "menu.resetHiddenStates",
    "metadata": {
      "description": {
        "value": "Reset All Menus",
        "original": "Reset All Menus"
      }
    }
  },
  {
    "id": "extension.bisect.start",
    "metadata": {
      "description": {
        "value": "Start Extension Bisect",
        "original": "Start Extension Bisect"
      }
    }
  },
  {
    "id": "extension.bisect.next",
    "metadata": {
      "description": {
        "value": "Continue Extension Bisect",
        "original": "Continue Extension Bisect"
      }
    }
  },
  {
    "id": "extension.bisect.stop",
    "metadata": {
      "description": {
        "value": "Stop Extension Bisect",
        "original": "Stop Extension Bisect"
      }
    }
  },
  {
    "id": "_workbench.output.showViewsLog",
    "metadata": {
      "description": {
        "value": "Show Views Log",
        "original": "Show Views Log"
      }
    }
  },
  {
    "id": "quickInput.pageNext",
    "metadata": {
      "description": "Used while in the context of the quick pick. If you change one keybinding for this command, you should change all of the other keybindings (modifier variants) of this command as well."
    },
    "key": "pagedown",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "id": "quickInput.pagePrevious",
    "metadata": {
      "description": "Used while in the context of the quick pick. If you change one keybinding for this command, you should change all of the other keybindings (modifier variants) of this command as well."
    },
    "key": "pageup",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "id": "quickInput.first",
    "metadata": {
      "description": "Used while in the context of the quick pick. If you change one keybinding for this command, you should change all of the other keybindings (modifier variants) of this command as well."
    },
    "key": "ctrl+home",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "id": "quickInput.last",
    "metadata": {
      "description": "Used while in the context of the quick pick. If you change one keybinding for this command, you should change all of the other keybindings (modifier variants) of this command as well."
    },
    "key": "ctrl+end",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "id": "quickInput.next",
    "metadata": {
      "description": "Used while in the context of the quick pick. If you change one keybinding for this command, you should change all of the other keybindings (modifier variants) of this command as well."
    },
    "key": "down",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "id": "quickInput.previous",
    "metadata": {
      "description": "Used while in the context of the quick pick. If you change one keybinding for this command, you should change all of the other keybindings (modifier variants) of this command as well."
    },
    "key": "up",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "id": "quickInput.nextSeparatorWithQuickAccessFallback",
    "metadata": {
      "description": "If we're in quick access mode, this will navigate to the next item. If we are not in quick access mode, this will navigate to the next separator."
    },
    "key": "alt+down",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "id": "quickInput.nextSeparator",
    "metadata": {
      "description": "Used while in the context of the quick pick. If you change one keybinding for this command, you should change all of the other keybindings (modifier variants) of this command as well."
    },
    "key": "ctrl+alt+down",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "id": "quickInput.previousSeparatorWithQuickAccessFallback",
    "metadata": {
      "description": "If we're in quick access mode, this will navigate to the previous item. If we are not in quick access mode, this will navigate to the previous separator."
    },
    "key": "alt+up",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "id": "quickInput.previousSeparator",
    "metadata": {
      "description": "Used while in the context of the quick pick. If you change one keybinding for this command, you should change all of the other keybindings (modifier variants) of this command as well."
    },
    "key": "ctrl+alt+up",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "id": "quickInput.acceptInBackground",
    "metadata": {
      "description": "Used while in the context of the quick pick. If you change one keybinding for this command, you should change all of the other keybindings (modifier variants) of this command as well."
    },
    "key": "right",
    "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'"
  },
  {
    "id": "_setContext"
  },
  {
    "id": "getContextKeyInfo",
    "metadata": {
      "description": "A command that returns information about context keys",
      "args": []
    }
  },
  {
    "id": "_generateContextKeyInfo"
  },
  {
    "id": "_getAllSettings"
  },
  {
    "id": "_getAllCommands"
  },
  {
    "id": "editor.action.toggleWordWrap",
    "key": "alt+z"
  },
  {
    "id": "perfview.show",
    "metadata": {
      "description": {
        "value": "Startup Performance",
        "original": "Startup Performance"
      }
    }
  },
  {
    "id": "perf.insta.printAsyncCycles",
    "metadata": {
      "description": {
        "value": "Print Service Cycles",
        "original": "Print Service Cycles"
      }
    }
  },
  {
    "id": "perf.insta.printTraces",
    "metadata": {
      "description": {
        "value": "Print Service Traces",
        "original": "Print Service Traces"
      }
    }
  },
  {
    "id": "perf.event.profiling",
    "metadata": {
      "description": {
        "value": "Print Emitter Profiles",
        "original": "Print Emitter Profiles"
      }
    }
  },
  {
    "id": "_notebook.selectKernel",
    "metadata": {
      "description": "Notebook Kernel Args",
      "args": [
        {
          "name": "kernelInfo",
          "description": "The kernel info",
          "schema": {
            "type": "object",
            "required": [
              "id",
              "extension"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "extension": {
                "type": "string"
              },
              "notebookEditorId": {
                "type": "string"
              }
            }
          }
        }
      ]
    }
  },
  {
    "id": "notebook.toggleLineNumbers",
    "metadata": {
      "description": {
        "value": "Toggle Notebook Line Numbers",
        "original": "Toggle Notebook Line Numbers"
      }
    },
    "key": "shift+l",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "id": "notebook.cell.toggleLineNumbers",
    "metadata": {
      "description": "Show Cell Line Numbers"
    },
    "key": "l",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "id": "notebook.cellOuput.showEmptyOutputs",
    "metadata": {
      "description": "Show empty outputs"
    }
  },
  {
    "id": "notebook.cellOutput.copy",
    "metadata": {
      "description": "Copy Cell Output"
    }
  },
  {
    "id": "notebook.cellOutput.openInTextEditor",
    "metadata": {
      "description": "Open Cell Output in Text Editor"
    }
  },
  {
    "id": "notebook.fold",
    "metadata": {
      "description": "Fold Cell",
      "args": [
        {
          "isOptional": true,
          "name": "index",
          "description": "The cell index",
          "schema": {
            "type": "object",
            "required": [
              "index",
              "direction"
            ],
            "properties": {
              "index": {
                "type": "number"
              },
              "direction": {
                "type": "string",
                "enum": [
                  "up",
                  "down"
                ],
                "default": "down"
              },
              "levels": {
                "type": "number",
                "default": 1
              }
            }
          }
        }
      ]
    },
    "key": "ctrl+shift+[",
    "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "id": "notebook.unfold",
    "metadata": {
      "description": {
        "value": "Unfold Cell",
        "original": "Unfold Cell"
      },
      "args": [
        {
          "isOptional": true,
          "name": "index",
          "description": "The cell index",
          "schema": {
            "type": "object",
            "required": [
              "index",
              "direction"
            ],
            "properties": {
              "index": {
                "type": "number"
              },
              "direction": {
                "type": "string",
                "enum": [
                  "up",
                  "down"
                ],
                "default": "down"
              },
              "levels": {
                "type": "number",
                "default": 1
              }
            }
          }
        }
      ]
    },
    "key": "ctrl+shift+]",
    "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "id": "notebook.cell.insertCodeCellAbove",
    "metadata": {
      "description": "Insert Code Cell Above"
    },
    "key": "ctrl+shift+enter",
    "when": "notebookCellListFocused && !inputFocus"
  },
  {
    "id": "notebook.cell.insertCodeCellAboveAndFocusContainer",
    "metadata": {
      "description": "Insert Code Cell Above and Focus Container"
    },
    "key": "a",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "id": "notebook.cell.insertCodeCellBelow",
    "metadata": {
      "description": "Insert Code Cell Below"
    },
    "key": "ctrl+enter",
    "when": "notebookCellListFocused && !inputFocus && notebookChatOuterFocusPosition == ''"
  },
  {
    "id": "notebook.cell.insertCodeCellBelowAndFocusContainer",
    "metadata": {
      "description": "Insert Code Cell Below and Focus Container"
    },
    "key": "b",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "id": "notebook.cell.insertMarkdownCellAbove",
    "metadata": {
      "description": "Insert Markdown Cell Above"
    }
  },
  {
    "id": "notebook.cell.insertMarkdownCellBelow",
    "metadata": {
      "description": "Insert Markdown Cell Below"
    }
  },
  {
    "id": "notebook.cell.insertCodeCellAtTop",
    "metadata": {
      "description": "Add Code Cell At Top"
    }
  },
  {
    "id": "notebook.cell.insertMarkdownCellAtTop",
    "metadata": {
      "description": "Add Markdown Cell At Top"
    }
  },
  {
    "id": "notebook.renderAllMarkdownCells",
    "metadata": {
      "description": "Render All Markdown Cells"
    }
  },
  {
    "id": "notebook.execute",
    "metadata": {
      "description": "Run All",
      "args": [
        {
          "name": "uri",
          "description": "The document uri"
        }
      ]
    }
  },
  {
    "id": "notebook.cell.execute",
    "metadata": {
      "description": "Execute Cell",
      "args": [
        {
          "isOptional": true,
          "name": "options",
          "description": "The cell range options",
          "schema": {
            "type": "object",
            "required": [
              "ranges"
            ],
            "properties": {
              "ranges": {
                "type": "array",
                "items": [
                  {
                    "type": "object",
                    "required": [
                      "start",
                      "end"
                    ],
                    "properties": {
                      "start": {
                        "type": "number"
                      },
                      "end": {
                        "type": "number"
                      }
                    }
                  }
                ]
              },
              "document": {
                "type": "object",
                "description": "The document uri"
              },
              "autoReveal": {
                "type": "boolean",
                "description": "Whether the cell should be revealed into view automatically"
              }
            }
          }
        }
      ]
    },
    "key": "ctrl+alt+enter",
    "when": "notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || !notebookCellExecuting && notebookCellType == 'code' && notebookCellListFocused || inlineChatFocused && notebookCellChatFocused && notebookKernelCount > 0 || !notebookCellExecuting && notebookCellType == 'code' && notebookCellListFocused || inlineChatFocused && notebookCellChatFocused && notebookKernelSourceCount > 0 || inlineChatFocused && notebookCellChatFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code'"
  },
  {
    "id": "notebook.cell.executeCellsAbove",
    "metadata": {
      "description": "Execute Above Cells"
    }
  },
  {
    "id": "notebook.cell.executeCellAndBelow",
    "metadata": {
      "description": "Execute Cell and Below"
    }
  },
  {
    "id": "notebook.cell.executeAndFocusContainer",
    "metadata": {
      "description": "Execute Cell and Focus Container",
      "args": [
        {
          "isOptional": true,
          "name": "options",
          "description": "The cell range options",
          "schema": {
            "type": "object",
            "required": [
              "ranges"
            ],
            "properties": {
              "ranges": {
                "type": "array",
                "items": [
                  {
                    "type": "object",
                    "required": [
                      "start",
                      "end"
                    ],
                    "properties": {
                      "start": {
                        "type": "number"
                      },
                      "end": {
                        "type": "number"
                      }
                    }
                  }
                ]
              },
              "document": {
                "type": "object",
                "description": "The document uri"
              },
              "autoReveal": {
                "type": "boolean",
                "description": "Whether the cell should be revealed into view automatically"
              }
            }
          }
        }
      ]
    },
    "key": "ctrl+enter",
    "when": "notebookCellListFocused || editorTextFocus && inputFocus && notebookEditorFocused"
  },
  {
    "id": "notebook.cell.cancelExecution",
    "metadata": {
      "description": "Stop Cell Execution",
      "args": [
        {
          "name": "options",
          "description": "The cell range options",
          "schema": {
            "type": "object",
            "required": [
              "ranges"
            ],
            "properties": {
              "ranges": {
                "type": "array",
                "items": [
                  {
                    "type": "object",
                    "required": [
                      "start",
                      "end"
                    ],
                    "properties": {
                      "start": {
                        "type": "number"
                      },
                      "end": {
                        "type": "number"
                      }
                    }
                  }
                ]
              },
              "document": {
                "type": "object",
                "description": "The document uri"
              }
            }
          }
        }
      ]
    }
  },
  {
    "id": "notebook.cell.executeAndSelectBelow",
    "metadata": {
      "description": "Execute Notebook Cell and Select Below"
    },
    "key": "shift+enter",
    "when": "notebookCellListFocused && !interactiveEditorFocused && notebookCellType == 'code' || editorTextFocus && inputFocus && notebookEditorFocused && !interactiveEditorFocused"
  },
  {
    "id": "notebook.cell.executeAndInsertBelow",
    "metadata": {
      "description": "Execute Notebook Cell and Insert Below"
    },
    "key": "alt+enter",
    "when": "notebookCellListFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0"
  },
  {
    "id": "notebook.cancelExecution",
    "metadata": {
      "description": {
        "value": "Stop Execution",
        "original": "Stop Execution"
      }
    }
  },
  {
    "id": "notebook.interruptExecution",
    "metadata": {
      "description": {
        "value": "Interrupt",
        "original": "Interrupt"
      }
    }
  },
  {
    "id": "notebook.revealRunningCell",
    "metadata": {
      "description": "Go to Running Cell"
    }
  },
  {
    "id": "notebook.revealLastFailedCell",
    "metadata": {
      "description": "Go to Most Recently Failed Cell"
    }
  },
  {
    "id": "notebook.outline.toggleShowMarkdownHeadersOnly",
    "metadata": {
      "description": "Markdown Headers Only"
    }
  },
  {
    "id": "notebook.outline.toggleCodeCells",
    "metadata": {
      "description": "Code Cells"
    }
  },
  {
    "id": "notebook.outline.toggleCodeCellSymbols",
    "metadata": {
      "description": "Code Cell Symbols"
    }
  },
  {
    "id": "notebook.section.runSingleCell",
    "metadata": {
      "description": {
        "value": "Run Cell",
        "original": "Run Cell",
        "mnemonicTitle": "&&Run Cell"
      }
    }
  },
  {
    "id": "notebook.section.runCells",
    "metadata": {
      "description": {
        "value": "Run Cells In Section",
        "original": "Run Cells In Section",
        "mnemonicTitle": "&&Run Cells In Section"
      }
    }
  },
  {
    "id": "notebook.section.foldSection",
    "metadata": {
      "description": {
        "value": "Fold Section",
        "original": "Fold Section",
        "mnemonicTitle": "&&Fold Section"
      }
    }
  },
  {
    "id": "notebook.section.expandSection",
    "metadata": {
      "description": {
        "value": "Expand Section",
        "original": "Expand Section",
        "mnemonicTitle": "&&Expand Section"
      }
    }
  },
  {
    "id": "workbench.notebook.layout.select",
    "metadata": {
      "description": {
        "value": "Select between Notebook Layouts",
        "original": "Select between Notebook Layouts"
      }
    }
  },
  {
    "id": "workbench.notebook.layout.configure",
    "metadata": {
      "description": {
        "value": "Customize Notebook Layout",
        "original": "Customize Notebook Layout"
      }
    }
  },
  {
    "id": "workbench.notebook.layout.configure.editorTitle",
    "metadata": {
      "description": {
        "value": "Customize Notebook Layout",
        "original": "Customize Notebook Layout"
      }
    }
  },
  {
    "id": "notebook.toggleLineNumbersFromEditorTitle",
    "metadata": {
      "description": {
        "value": "Toggle Notebook Line Numbers",
        "original": "Toggle Notebook Line Numbers"
      }
    }
  },
  {
    "id": "notebook.toggleCellToolbarPositionFromEditorTitle",
    "metadata": {
      "description": {
        "value": "Toggle Cell Toolbar Position",
        "original": "Toggle Cell Toolbar Position"
      }
    }
  },
  {
    "id": "breadcrumbs.toggleFromEditorTitle",
    "metadata": {
      "description": {
        "value": "Toggle Breadcrumbs",
        "original": "Toggle Breadcrumbs"
      }
    }
  },
  {
    "id": "notebook.saveMimeTypeOrder",
    "metadata": {
      "description": {
        "value": "Save Mimetype Display Order",
        "original": "Save Mimetype Display Order"
      }
    }
  },
  {
    "id": "workbench.notebook.layout.webview.reset",
    "metadata": {
      "description": {
        "value": "Reset Notebook Webview",
        "original": "Reset Notebook Webview"
      }
    }
  },
  {
    "id": "notebook.action.toggleNotebookStickyScroll",
    "metadata": {
      "description": {
        "value": "Toggle Notebook Sticky Scroll",
        "original": "Toggle Notebook Sticky Scroll",
        "mnemonicTitle": "&&Toggle Notebook Sticky Scroll"
      }
    }
  },
  {
    "id": "notebook.action.indentUsingSpaces",
    "metadata": {
      "description": "Indent Using Spaces"
    }
  },
  {
    "id": "notebook.action.indentUsingTabs",
    "metadata": {
      "description": "Indent Using Tabs"
    }
  },
  {
    "id": "notebook.action.changeTabDisplaySize",
    "metadata": {
      "description": "Change Tab Display Size"
    }
  },
  {
    "id": "notebook.action.convertIndentationToSpaces",
    "metadata": {
      "description": "Convert Indentation to Spaces"
    }
  },
  {
    "id": "notebook.action.convertIndentationToTabs",
    "metadata": {
      "description": "Convert Indentation to Tabs"
    }
  },
  {
    "id": "notebook.cell.edit",
    "metadata": {
      "description": "Edit Cell"
    },
    "key": "enter",
    "when": "notebookCellListFocused && notebookEditable && !editorHoverFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "id": "notebook.cell.quitEdit",
    "metadata": {
      "description": "Stop Editing Cell"
    },
    "key": "escape",
    "when": "notebookEditorFocused && notebookOutputFocused"
  },
  {
    "id": "notebook.cell.delete",
    "metadata": {
      "description": "Delete Cell"
    },
    "key": "d d",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "id": "notebook.cell.clearOutputs",
    "metadata": {
      "description": "Clear Cell Outputs"
    },
    "key": "alt+delete",
    "when": "notebookCellEditable && notebookCellHasOutputs && notebookEditable && notebookEditorFocused && !inputFocus"
  },
  {
    "id": "notebook.clearAllCellsOutputs",
    "metadata": {
      "description": "Clear All Outputs"
    }
  },
  {
    "id": "notebook.cell.changeLanguage",
    "metadata": {
      "description": "Change Cell Language",
      "args": [
        {
          "name": "range",
          "description": "The cell range",
          "schema": {
            "type": "object",
            "required": [
              "start",
              "end"
            ],
            "properties": {
              "start": {
                "type": "number"
              },
              "end": {
                "type": "number"
              }
            }
          }
        },
        {
          "name": "language",
          "description": "The target cell language",
          "schema": {
            "type": "string"
          }
        }
      ]
    }
  },
  {
    "id": "notebook.cell.detectLanguage",
    "metadata": {
      "description": {
        "value": "Accept Detected Language for Cell",
        "original": "Accept Detected Language for Cell"
      }
    },
    "key": "shift+alt+d",
    "when": "notebookCellEditable && notebookEditable"
  },
  {
    "id": "notebook.selectIndentation",
    "metadata": {
      "description": {
        "value": "Select Indentation",
        "original": "Select Indentation"
      }
    }
  },
  {
    "id": "notebook.commentSelectedCells",
    "metadata": {
      "description": "Comment Selected Cells"
    },
    "key": "ctrl+/",
    "when": "notebookEditable && notebookEditorFocused && !inputFocus"
  },
  {
    "id": "_resolveNotebookContentProvider"
  },
  {
    "id": "_resolveNotebookKernels"
  },
  {
    "id": "workbench.action.chat.assignSelectedAgent",
    "metadata": {
      "description": ""
    }
  },
  {
    "id": "interactiveEditor.start"
  },
  {
    "id": "interactive.acceptChanges",
    "key": "ctrl+alt+enter",
    "when": "interactiveEditorHasProvider && interactiveEditorVisible && !interactiveEditorDocumentChanged || interactiveEditorHasProvider && interactiveEditorVisible && config.interactiveEditor.editMode != 'preview'"
  },
  {
    "id": "notebook.cell.chat.accept",
    "metadata": {
      "description": {
        "value": "Make Request",
        "original": "Make Request"
      }
    },
    "key": "enter",
    "when": "inlineChatFocused && notebookCellChatFocused && !notebookCellEditorFocused"
  },
  {
    "id": "notebook.cell.chat.arrowOutUp",
    "metadata": {
      "description": "Cursor Up"
    },
    "key": "ctrl+up",
    "when": "inlineChatFocused && inlineChatInnerCursorFirst && notebookCellChatFocused && !accessibilityModeEnabled && !notebookCellEditorFocused"
  },
  {
    "id": "notebook.cell.chat.arrowOutDown",
    "metadata": {
      "description": "Cursor Down"
    },
    "key": "ctrl+down",
    "when": "inlineChatFocused && inlineChatInnerCursorLast && notebookCellChatFocused && !accessibilityModeEnabled && !notebookCellEditorFocused"
  },
  {
    "id": "notebook.cell.focusChatWidget",
    "metadata": {
      "description": "Focus Chat Widget"
    },
    "key": "ctrl+up",
    "when": "editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'"
  },
  {
    "id": "notebook.cell.focusNextChatWidget",
    "metadata": {
      "description": "Focus Next Cell Chat Widget"
    },
    "key": "ctrl+down",
    "when": "editorTextFocus && inputFocus && isCompositeNotebook && !accessibilityModeEnabled && !isEmbeddedDiffEditor && !notebookCellEditorFocused && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top' || editorTextFocus && inputFocus && notebookCellEditorFocused && !accessibilityModeEnabled && !isCompositeNotebook && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'"
  },
  {
    "id": "notebook.cell.chat.stop",
    "metadata": {
      "description": {
        "value": "Stop Request",
        "original": "Stop Request"
      }
    }
  },
  {
    "id": "notebook.cell.chat.close",
    "metadata": {
      "description": {
        "value": "Close Chat",
        "original": "Close Chat"
      }
    }
  },
  {
    "id": "notebook.cell.chat.acceptChanges",
    "metadata": {
      "description": {
        "value": "Accept Changes",
        "original": "Accept Changes"
      }
    },
    "key": "ctrl+enter",
    "when": "notebookEditorFocused && !inputFocus && !notebookCellEditorFocused && notebookChatOuterFocusPosition == 'below'"
  },
  {
    "id": "notebook.cell.chat.discard",
    "metadata": {
      "description": "Discard"
    },
    "key": "escape",
    "when": "inlineChatFocused && notebookCellChatFocused && !notebookCellEditorFocused && !notebookChatUserDidEdit"
  },
  {
    "id": "notebook.cell.chat.start",
    "metadata": {
      "description": "Start Chat to Generate Code",
      "args": [
        {
          "name": "args",
          "schema": {
            "type": "object",
            "required": [
              "index"
            ],
            "properties": {
              "index": {
                "type": "number"
              },
              "input": {
                "type": "string"
              },
              "autoSend": {
                "type": "boolean"
              }
            }
          }
        }
      ]
    },
    "key": "ctrl+i",
    "when": "config.notebook.experimental.cellChat && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus || config.notebook.experimental.generate && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus"
  },
  {
    "id": "notebook.cell.chat.startAtTop",
    "metadata": {
      "description": {
        "value": "$(sparkle) Generate",
        "original": "$(sparkle) Generate"
      }
    }
  },
  {
    "id": "notebook.cell.chat.focus",
    "metadata": {
      "description": "Focus Chat"
    },
    "key": "ctrl+up",
    "when": "notebookEditorFocused && !inputFocus && notebookChatOuterFocusPosition == 'below'"
  },
  {
    "id": "notebook.cell.chat.focusNextCell",
    "metadata": {
      "description": "Focus Next Cell"
    },
    "key": "ctrl+down",
    "when": "inlineChatFocused && notebookCellChatFocused"
  },
  {
    "id": "notebook.cell.chat.focusPreviousCell",
    "metadata": {
      "description": "Focus Previous Cell"
    },
    "key": "ctrl+up",
    "when": "inlineChatFocused && notebookCellChatFocused"
  },
  {
    "id": "notebook.cell.chat.previousFromHistory",
    "metadata": {
      "description": {
        "value": "Previous From History",
        "original": "Previous From History"
      }
    },
    "key": "up",
    "when": "inlineChatFocused && notebookCellChatFocused"
  },
  {
    "id": "notebook.cell.chat.nextFromHistory",
    "metadata": {
      "description": {
        "value": "Next From History",
        "original": "Next From History"
      }
    },
    "key": "down",
    "when": "inlineChatFocused && notebookCellChatFocused"
  },
  {
    "id": "notebook.cell.chat.restore",
    "metadata": {
      "description": {
        "value": "Generate",
        "original": "Generate"
      }
    }
  },
  {
    "id": "notebook.inlineChat.acceptChangesAndRun",
    "metadata": {
      "description": {
        "value": "Accept and Run",
        "original": "Accept and Run"
      }
    }
  },
  {
    "id": "notebook.chat.selectAndInsertKernelVariable",
    "metadata": {
      "description": ""
    }
  },
  {
    "id": "notebook.openVariablesView",
    "metadata": {
      "description": {
        "value": "Variables",
        "original": "Variables"
      }
    }
  },
  {
    "id": "notebook.cell.copy",
    "metadata": {
      "description": "Copy Cell"
    },
    "key": "c",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "id": "notebook.cell.cut",
    "metadata": {
      "description": "Cut Cell"
    },
    "key": "x",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "id": "notebook.cell.paste",
    "metadata": {
      "description": "Paste Cell"
    },
    "key": "v",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "id": "notebook.cell.pasteAbove",
    "metadata": {
      "description": "Paste Cell Above"
    },
    "key": "ctrl+shift+v",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "id": "workbench.action.toggleNotebookClipboardLog",
    "metadata": {
      "description": {
        "value": "Toggle Notebook Clipboard Troubleshooting",
        "original": "Toggle Notebook Clipboard Troubleshooting"
      }
    }
  },
  {
    "id": "notebook.cell.output.selectAll",
    "metadata": {
      "description": "Select All"
    },
    "key": "ctrl+a",
    "when": "notebookEditorFocused && notebookOutputFocused"
  },
  {
    "id": "notebook.hideFind",
    "metadata": {
      "description": {
        "value": "Hide Find in Notebook",
        "original": "Hide Find in Notebook"
      }
    },
    "key": "escape",
    "when": "notebookEditorFocused && notebookFindWidgetFocused"
  },
  {
    "id": "notebook.find",
    "metadata": {
      "description": {
        "value": "Find in Notebook",
        "original": "Find in Notebook"
      }
    },
    "key": "f",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "id": "notebook.addFindMatchToSelection",
    "metadata": {
      "description": "Add Find Match to Selection"
    },
    "key": "ctrl+d",
    "when": "config.notebook.multiCursor.enabled && notebookCellEditorFocused && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "id": "noteMultiCursor.exit",
    "metadata": {
      "description": "Exit Multi Cursor Mode"
    },
    "key": "escape",
    "when": "config.notebook.multiCursor.enabled && isNotebookMultiSelect && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "id": "noteMultiCursor.deleteLeft",
    "metadata": {
      "description": "Delete Left"
    },
    "key": "backspace",
    "when": "config.notebook.multiCursor.enabled && isNotebookMultiSelect && activeEditor == 'workbench.editor.notebook' && notebookMultiSelectCursorState == '1' || config.notebook.multiCursor.enabled && isNotebookMultiSelect && activeEditor == 'workbench.editor.notebook' && notebookMultiSelectCursorState == '2'"
  },
  {
    "id": "noteMultiCursor.deleteRight",
    "metadata": {
      "description": "Delete Right"
    },
    "key": "delete",
    "when": "config.notebook.multiCursor.enabled && isNotebookMultiSelect && activeEditor == 'workbench.editor.notebook' && notebookMultiSelectCursorState == '1' || config.notebook.multiCursor.enabled && isNotebookMultiSelect && activeEditor == 'workbench.editor.notebook' && notebookMultiSelectCursorState == '2'"
  },
  {
    "id": "notebook.format",
    "metadata": {
      "description": {
        "value": "Format Notebook",
        "original": "Format Notebook"
      }
    },
    "key": "shift+alt+f",
    "when": "notebookEditable && !editorTextFocus && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "id": "notebook.formatCell",
    "key": "shift+alt+f",
    "when": "editorHasDocumentFormattingProvider && editorTextFocus && inCompositeEditor && notebookEditable && !editorReadonly && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "id": "workbench.notebook.layout.gettingStarted",
    "metadata": {
      "description": {
        "value": "Reset notebook getting started",
        "original": "Reset notebook getting started"
      }
    }
  },
  {
    "id": "notebook.toggleCellToolbarPosition",
    "metadata": {
      "description": {
        "value": "Toggle Cell Toolbar Position",
        "original": "Toggle Cell Toolbar Position"
      }
    }
  },
  {
    "id": "notebook.cell.nullAction",
    "metadata": {
      "description": "Keypresses that should be handled by the focused element in the cell output."
    },
    "key": "up",
    "when": "notebookOutputInputFocused"
  },
  {
    "id": "notebook.focusNextEditor",
    "metadata": {
      "description": "Focus Next Cell Editor"
    },
    "key": "ctrl+pagedown",
    "when": "accessibilityModeEnabled && notebookCellEditorFocused"
  },
  {
    "id": "notebook.focusPreviousEditor",
    "metadata": {
      "description": "Focus Previous Cell Editor"
    },
    "key": "ctrl+pageup",
    "when": "accessibilityModeEnabled && notebookCellEditorFocused"
  },
  {
    "id": "notebook.focusTop",
    "metadata": {
      "description": "Focus First Cell"
    },
    "key": "ctrl+home",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "id": "notebook.focusBottom",
    "metadata": {
      "description": "Focus Last Cell"
    },
    "key": "ctrl+end",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "id": "notebook.cell.focusInOutput",
    "metadata": {
      "description": "Focus In Active Cell Output"
    },
    "key": "ctrl+down",
    "when": "isWindows && notebookCellHasOutputs && notebookEditorFocused && !isCompositeNotebook"
  },
  {
    "id": "notebook.cell.focusOutOutput",
    "metadata": {
      "description": "Focus Out Active Cell Output"
    },
    "key": "ctrl+shift+up",
    "when": "notebookEditorFocused && notebookOutputFocused"
  },
  {
    "id": "notebook.centerActiveCell",
    "metadata": {
      "description": "Center Active Cell"
    },
    "key": "ctrl+l",
    "when": "notebookEditorFocused"
  },
  {
    "id": "notebook.cell.cursorPageUp",
    "metadata": {
      "description": "Cell Cursor Page Up"
    },
    "key": "pageup",
    "when": "editorTextFocus && inputFocus && notebookEditorFocused"
  },
  {
    "id": "notebook.cell.cursorPageUpSelect",
    "metadata": {
      "description": "Cell Cursor Page Up Select"
    },
    "key": "shift+pageup",
    "when": "editorTextFocus && inputFocus && notebookEditorFocused && !notebookOutputFocused"
  },
  {
    "id": "notebook.cell.cursorPageDown",
    "metadata": {
      "description": "Cell Cursor Page Down"
    },
    "key": "pagedown",
    "when": "editorTextFocus && inputFocus && notebookEditorFocused"
  },
  {
    "id": "notebook.cell.cursorPageDownSelect",
    "metadata": {
      "description": "Cell Cursor Page Down Select"
    },
    "key": "shift+pagedown",
    "when": "editorTextFocus && inputFocus && notebookEditorFocused && !notebookOutputFocused"
  },
  {
    "id": "notebook.setProfile",
    "metadata": {
      "description": "Set Profile"
    }
  },
  {
    "id": "notebook.cell.moveUp",
    "metadata": {
      "description": {
        "value": "Move Cell Up",
        "original": "Move Cell Up"
      }
    },
    "key": "alt+up",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "id": "notebook.cell.moveDown",
    "metadata": {
      "description": {
        "value": "Move Cell Down",
        "original": "Move Cell Down"
      }
    },
    "key": "alt+down",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "id": "notebook.cell.copyUp",
    "metadata": {
      "description": {
        "value": "Copy Cell Up",
        "original": "Copy Cell Up"
      }
    },
    "key": "shift+alt+up",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "id": "notebook.cell.copyDown",
    "metadata": {
      "description": {
        "value": "Copy Cell Down",
        "original": "Copy Cell Down"
      }
    },
    "key": "shift+alt+down",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "id": "notebook.cell.split",
    "metadata": {
      "description": {
        "value": "Split Cell",
        "original": "Split Cell"
      }
    },
    "key": "ctrl+shift+-",
    "when": "editorTextFocus && inputFocus && notebookEditorFocused && !notebookOutputInputFocused"
  },
  {
    "id": "notebook.cell.joinAbove",
    "metadata": {
      "description": {
        "value": "Join With Previous Cell",
        "original": "Join With Previous Cell"
      }
    },
    "key": "shift+alt+win+j",
    "when": "notebookEditorFocused"
  },
  {
    "id": "notebook.cell.joinBelow",
    "metadata": {
      "description": {
        "value": "Join With Next Cell",
        "original": "Join With Next Cell"
      }
    },
    "key": "alt+win+j",
    "when": "notebookEditorFocused"
  },
  {
    "id": "notebook.cell.joinSelected",
    "metadata": {
      "description": {
        "value": "Join Selected Cells",
        "original": "Join Selected Cells"
      }
    }
  },
  {
    "id": "notebook.cell.changeToCode",
    "metadata": {
      "description": {
        "value": "Change Cell to Code",
        "original": "Change Cell to Code"
      }
    },
    "key": "y",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputFocused && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'markup'"
  },
  {
    "id": "notebook.cell.changeToMarkdown",
    "metadata": {
      "description": {
        "value": "Change Cell to Markdown",
        "original": "Change Cell to Markdown"
      }
    },
    "key": "m",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputFocused && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'code'"
  },
  {
    "id": "notebook.cell.collapseCellInput",
    "metadata": {
      "description": {
        "value": "Collapse Cell Input",
        "original": "Collapse Cell Input"
      }
    },
    "key": "ctrl+k ctrl+c",
    "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed"
  },
  {
    "id": "notebook.cell.expandCellInput",
    "metadata": {
      "description": {
        "value": "Expand Cell Input",
        "original": "Expand Cell Input"
      }
    },
    "key": "ctrl+k ctrl+c",
    "when": "notebookCellInputIsCollapsed && notebookCellListFocused"
  },
  {
    "id": "notebook.cell.collapseCellOutput",
    "metadata": {
      "description": {
        "value": "Collapse Cell Output",
        "original": "Collapse Cell Output"
      }
    },
    "key": "ctrl+k t",
    "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed"
  },
  {
    "id": "notebook.cell.expandCellOutput",
    "metadata": {
      "description": {
        "value": "Expand Cell Output",
        "original": "Expand Cell Output"
      }
    },
    "key": "ctrl+k t",
    "when": "notebookCellListFocused && notebookCellOutputIsCollapsed"
  },
  {
    "id": "notebook.cell.toggleOutputs",
    "metadata": {
      "description": "Toggle Outputs",
      "args": [
        {
          "isOptional": true,
          "name": "options",
          "description": "The cell range options",
          "schema": {
            "type": "object",
            "required": [
              "ranges"
            ],
            "properties": {
              "ranges": {
                "type": "array",
                "items": [
                  {
                    "type": "object",
                    "required": [
                      "start",
                      "end"
                    ],
                    "properties": {
                      "start": {
                        "type": "number"
                      },
                      "end": {
                        "type": "number"
                      }
                    }
                  }
                ]
              },
              "document": {
                "type": "object",
                "description": "The document uri"
              },
              "autoReveal": {
                "type": "boolean",
                "description": "Whether the cell should be revealed into view automatically"
              }
            }
          }
        }
      ]
    },
    "key": "o",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "id": "notebook.cell.collapseAllCellInputs",
    "metadata": {
      "description": {
        "value": "Collapse All Cell Inputs",
        "original": "Collapse All Cell Inputs"
      }
    }
  },
  {
    "id": "notebook.cell.expandAllCellInputs",
    "metadata": {
      "description": {
        "value": "Expand All Cell Inputs",
        "original": "Expand All Cell Inputs"
      }
    }
  },
  {
    "id": "notebook.cell.collapseAllCellOutputs",
    "metadata": {
      "description": {
        "value": "Collapse All Cell Outputs",
        "original": "Collapse All Cell Outputs"
      }
    }
  },
  {
    "id": "notebook.cell.expandAllCellOutputs",
    "metadata": {
      "description": {
        "value": "Expand All Cell Outputs",
        "original": "Expand All Cell Outputs"
      }
    }
  },
  {
    "id": "notebook.cell.toggleOutputScrolling",
    "metadata": {
      "description": {
        "value": "Toggle Scroll Cell Output",
        "original": "Toggle Scroll Cell Output"
      }
    },
    "key": "ctrl+k y",
    "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus"
  },
  {
    "id": "notebook.toggleLayoutTroubleshoot",
    "metadata": {
      "description": {
        "value": "Toggle Layout Troubleshoot",
        "original": "Toggle Layout Troubleshoot"
      }
    }
  },
  {
    "id": "notebook.inspectLayout",
    "metadata": {
      "description": {
        "value": "Inspect Notebook Layout",
        "original": "Inspect Notebook Layout"
      }
    }
  },
  {
    "id": "notebook.clearNotebookEdtitorTypeCache",
    "metadata": {
      "description": {
        "value": "Clear Notebook Editor Type Cache",
        "original": "Clear Notebook Editor Type Cache"
      }
    }
  },
  {
    "id": "workbench.debug.viewlet.action.addFunctionBreakpointAction",
    "metadata": {
      "description": {
        "value": "Add Function Breakpoint",
        "original": "Add Function Breakpoint",
        "mnemonicTitle": "&&Function Breakpoint..."
      }
    }
  },
  {
    "id": "workbench.debug.viewlet.action.addDataBreakpointOnAddress",
    "metadata": {
      "description": {
        "value": "Add Data Breakpoint at Address",
        "original": "Add Data Breakpoint at Address",
        "mnemonicTitle": "&&Data Breakpoint..."
      }
    }
  },
  {
    "id": "workbench.debug.viewlet.action.editDataBreakpointOnAddress",
    "metadata": {
      "description": {
        "value": "Edit Address...",
        "original": "Edit Address..."
      }
    }
  },
  {
    "id": "workbench.debug.viewlet.action.toggleBreakpointsActivatedAction",
    "metadata": {
      "description": {
        "value": "Toggle Activate Breakpoints",
        "original": "Toggle Activate Breakpoints"
      }
    }
  },
  {
    "id": "workbench.debug.viewlet.action.removeBreakpoint",
    "metadata": {
      "description": "Remove Breakpoint"
    }
  },
  {
    "id": "workbench.debug.viewlet.action.removeAllBreakpoints",
    "metadata": {
      "description": {
        "value": "Remove All Breakpoints",
        "original": "Remove All Breakpoints",
        "mnemonicTitle": "Remove &&All Breakpoints"
      }
    }
  },
  {
    "id": "workbench.debug.viewlet.action.enableAllBreakpoints",
    "metadata": {
      "description": {
        "value": "Enable All Breakpoints",
        "original": "Enable All Breakpoints",
        "mnemonicTitle": "&&Enable All Breakpoints"
      }
    }
  },
  {
    "id": "workbench.debug.viewlet.action.disableAllBreakpoints",
    "metadata": {
      "description": {
        "value": "Disable All Breakpoints",
        "original": "Disable All Breakpoints",
        "mnemonicTitle": "Disable A&&ll Breakpoints"
      }
    }
  },
  {
    "id": "workbench.debug.viewlet.action.reapplyBreakpointsAction",
    "metadata": {
      "description": {
        "value": "Reapply All Breakpoints",
        "original": "Reapply All Breakpoints"
      }
    }
  },
  {
    "id": "debug.editBreakpoint",
    "metadata": {
      "description": "Edit Condition..."
    }
  },
  {
    "id": "debug.editFunctionBreakpoint",
    "metadata": {
      "description": "Edit Function Condition..."
    }
  },
  {
    "id": "debug.editFunctionBreakpointHitCount",
    "metadata": {
      "description": "Edit Hit Count..."
    }
  },
  {
    "id": "debug.editBreakpointMode",
    "metadata": {
      "description": "Edit Mode..."
    }
  },
  {
    "id": "breakpointWidget.action.acceptInput",
    "key": "enter",
    "when": "breakpointWidgetVisible && inBreakpointWidget"
  },
  {
    "id": "closeBreakpointWidget",
    "key": "escape",
    "when": "breakpointWidgetVisible && textInputFocus"
  },
  {
    "id": "notebook.cell.openFailureActions",
    "metadata": {
      "description": {
        "value": "Show Cell Failure Actions",
        "original": "Show Cell Failure Actions"
      }
    },
    "key": "ctrl+.",
    "when": "notebookCellFocused && notebookCellHasErrorDiagnostics && !notebookCellEditorFocused"
  },
  {
    "id": "notebook.diff.openFile",
    "metadata": {
      "description": {
        "value": "Open File",
        "original": "Open File"
      }
    }
  },
  {
    "id": "notebook.diff.cell.toggleCollapseUnchangedRegions",
    "metadata": {
      "description": {
        "value": "Toggle Collapse Unchanged Regions",
        "original": "Toggle Collapse Unchanged Regions"
      }
    }
  },
  {
    "id": "notebook.diff.switchToText",
    "metadata": {
      "description": {
        "value": "Open Text Diff Editor",
        "original": "Open Text Diff Editor"
      }
    }
  },
  {
    "id": "notebook.diffEditor.showUnchangedCells",
    "metadata": {
      "description": {
        "value": "Show Unchanged Cells",
        "original": "Show Unchanged Cells"
      }
    }
  },
  {
    "id": "notebook.diffEditor.hideUnchangedCells",
    "metadata": {
      "description": {
        "value": "Hide Unchanged Cells",
        "original": "Hide Unchanged Cells"
      }
    }
  },
  {
    "id": "notebook.diffEditor.2.goToCell",
    "metadata": {
      "description": {
        "value": "Go To Cell",
        "original": "Go To Cell"
      }
    }
  },
  {
    "id": "notebook.diff.revertMetadata",
    "metadata": {
      "description": "Revert Notebook Metadata"
    }
  },
  {
    "id": "notebook.diffEditor.2.cell.revertInput",
    "metadata": {
      "description": "Revert Input"
    }
  },
  {
    "id": "notebook.diffEditor.2.cell.revertOutputs",
    "metadata": {
      "description": "Revert Outputs"
    }
  },
  {
    "id": "notebook.diffEditor.2.cell.revertMetadata",
    "metadata": {
      "description": "Revert Metadata"
    }
  },
  {
    "id": "notebook.diff.cell.revertMetadata",
    "metadata": {
      "description": "Revert Metadata"
    }
  },
  {
    "id": "notebook.diff.cell.switchOutputRenderingStyleToText",
    "metadata": {
      "description": "Switch Output Rendering"
    }
  },
  {
    "id": "notebook.diff.cell.revertOutputs",
    "metadata": {
      "description": "Revert Outputs"
    }
  },
  {
    "id": "notebook.toggle.diff.cell.ignoreTrimWhitespace",
    "metadata": {
      "description": "Show Leading/Trailing Whitespace Differences"
    }
  },
  {
    "id": "notebook.diff.cell.revertInput",
    "metadata": {
      "description": "Revert Input"
    }
  },
  {
    "id": "notebook.diff.showOutputs",
    "metadata": {
      "description": {
        "value": "Show Outputs Differences",
        "original": "Show Outputs Differences"
      }
    }
  },
  {
    "id": "notebook.diff.showMetadata",
    "metadata": {
      "description": {
        "value": "Show Metadata Differences",
        "original": "Show Metadata Differences"
      }
    }
  },
  {
    "id": "notebook.diff.action.previous",
    "metadata": {
      "description": "Show Previous Change"
    },
    "key": "shift+alt+f3",
    "when": "activeEditor == 'workbench.editor.notebookTextDiffEditor'"
  },
  {
    "id": "notebook.diff.action.next",
    "metadata": {
      "description": "Show Next Change"
    },
    "key": "alt+f3",
    "when": "activeEditor == 'workbench.editor.notebookTextDiffEditor'"
  },
  {
    "id": "notebook.clearNotebookKernelsMRUCache",
    "metadata": {
      "description": {
        "value": "Clear Notebook Kernels MRU Cache",
        "original": "Clear Notebook Kernels MRU Cache"
      }
    }
  },
  {
    "id": "debug.copyStackTrace"
  },
  {
    "id": "workbench.action.debug.reverseContinue"
  },
  {
    "id": "workbench.action.debug.stepBack"
  },
  {
    "id": "workbench.action.debug.terminateThread"
  },
  {
    "id": "debug.jumpToCursor"
  },
  {
    "id": "workbench.action.debug.callStackTop"
  },
  {
    "id": "workbench.action.debug.callStackBottom"
  },
  {
    "id": "workbench.action.debug.callStackUp"
  },
  {
    "id": "workbench.action.debug.callStackDown"
  },
  {
    "id": "workbench.action.debug.nextConsole",
    "key": "ctrl+pagedown",
    "when": "inDebugRepl"
  },
  {
    "id": "workbench.action.debug.prevConsole",
    "key": "ctrl+pageup",
    "when": "inDebugRepl"
  },
  {
    "id": "workbench.action.debug.restart",
    "key": "ctrl+shift+f5",
    "when": "inDebugMode"
  },
  {
    "id": "workbench.action.debug.stepOver",
    "key": "f10",
    "when": "debugState == 'stopped'"
  },
  {
    "id": "workbench.action.debug.stepInto",
    "key": "f11",
    "when": "debugState != 'inactive'"
  },
  {
    "id": "workbench.action.debug.stepOut",
    "key": "shift+f11",
    "when": "debugState == 'stopped'"
  },
  {
    "id": "workbench.action.debug.pause",
    "key": "f6",
    "when": "debugState == 'running'"
  },
  {
    "id": "workbench.action.debug.stepIntoTarget",
    "key": "ctrl+f11",
    "when": "inDebugMode && stepIntoTargetsSupported && debugState == 'stopped'"
  },
  {
    "id": "workbench.action.debug.disconnect",
    "key": "shift+f5",
    "when": "focusedSessionIsAttach && inDebugMode"
  },
  {
    "id": "workbench.action.debug.disconnectAndSuspend"
  },
  {
    "id": "workbench.action.debug.stop",
    "key": "shift+f5",
    "when": "inDebugMode && !focusedSessionIsAttach"
  },
  {
    "id": "workbench.action.debug.restartFrame"
  },
  {
    "id": "workbench.action.debug.continue",
    "key": "f5",
    "when": "debugState == 'stopped'"
  },
  {
    "id": "workbench.action.debug.showLoadedScripts"
  },
  {
    "id": "workbench.debug.action.focusRepl"
  },
  {
    "id": "debug.startFromConfig"
  },
  {
    "id": "workbench.action.debug.focusProcess"
  },
  {
    "id": "workbench.action.debug.selectandstart"
  },
  {
    "id": "workbench.action.debug.selectDebugConsole"
  },
  {
    "id": "workbench.action.debug.selectDebugSession"
  },
  {
    "id": "workbench.action.debug.start",
    "key": "f5",
    "when": "debuggersAvailable && debugState == 'inactive'"
  },
  {
    "id": "workbench.action.debug.run",
    "key": "ctrl+f5",
    "when": "debuggersAvailable && debugState != 'initializing'"
  },
  {
    "id": "debug.toggleBreakpoint",
    "key": "space",
    "when": "breakpointsFocused && !inputFocus"
  },
  {
    "id": "debug.enableOrDisableBreakpoint"
  },
  {
    "id": "debug.renameWatchExpression",
    "key": "f2",
    "when": "watchExpressionsFocused"
  },
  {
    "id": "debug.setWatchExpression"
  },
  {
    "id": "debug.setVariable",
    "key": "f2",
    "when": "variablesFocused"
  },
  {
    "id": "debug.removeWatchExpression",
    "key": "delete",
    "when": "watchExpressionsFocused && !expressionSelected"
  },
  {
    "id": "debug.removeBreakpoint",
    "key": "delete",
    "when": "breakpointsFocused && !breakpointInputFocused"
  },
  {
    "id": "debug.installAdditionalDebuggers"
  },
  {
    "id": "debug.addConfiguration",
    "metadata": {
      "description": {
        "value": "Add Configuration...",
        "original": "Add Configuration..."
      }
    }
  },
  {
    "id": "editor.debug.action.toggleInlineBreakpoint",
    "key": "shift+f9",
    "when": "editorTextFocus"
  },
  {
    "id": "debug.openBreakpointToSide",
    "key": "ctrl+enter",
    "when": "breakpointsFocused"
  },
  {
    "id": "debug.openView",
    "key": "f5",
    "when": "!debuggersAvailable"
  },
  {
    "id": "editor.action.formatDocument.multiple"
  },
  {
    "id": "editor.action.formatSelection.multiple"
  },
  {
    "id": "workbench.action.gotoSymbol",
    "metadata": {
      "description": {
        "value": "Go to Symbol in Editor...",
        "original": "Go to Symbol in Editor...",
        "mnemonicTitle": "Go to &&Symbol in Editor..."
      }
    },
    "key": "ctrl+shift+o",
    "when": "!accessibilityHelpIsShown && !accessibleViewIsShown"
  },
  {
    "id": "workbench.action.chat.open",
    "metadata": {
      "description": {
        "value": "Open Chat",
        "original": "Open Chat"
      }
    },
    "key": "ctrl+alt+i"
  },
  {
    "id": "workbench.action.chat.history",
    "metadata": {
      "description": {
        "value": "Show Chats...",
        "original": "Show Chats..."
      }
    }
  },
  {
    "id": "workbench.action.openChat",
    "metadata": {
      "description": {
        "value": "Open Editor",
        "original": "Open Editor"
      }
    }
  },
  {
    "id": "workbench.action.chat.addParticipant",
    "metadata": {
      "description": {
        "value": "Chat with Extension",
        "original": "Chat with Extension"
      }
    }
  },
  {
    "id": "workbench.action.chat.clearInputHistory",
    "metadata": {
      "description": {
        "value": "Clear Input History",
        "original": "Clear Input History"
      }
    }
  },
  {
    "id": "workbench.action.chat.clearHistory",
    "metadata": {
      "description": {
        "value": "Clear All Workspace Chats",
        "original": "Clear All Workspace Chats"
      }
    }
  },
  {
    "id": "chat.action.focus",
    "metadata": {
      "description": {
        "value": "Focus Chat List",
        "original": "Focus Chat List"
      }
    },
    "key": "ctrl+down",
    "when": "inChat && inChatInput && quickChatHasFocus"
  },
  {
    "id": "workbench.action.chat.focusInput",
    "metadata": {
      "description": {
        "value": "Focus Chat Input",
        "original": "Focus Chat Input"
      }
    },
    "key": "ctrl+up",
    "when": "inChat && quickChatHasFocus && !inChatInput"
  },
  {
    "id": "workbench.action.chat.copyAll",
    "metadata": {
      "description": {
        "value": "Copy All",
        "original": "Copy All"
      }
    }
  },
  {
    "id": "workbench.action.chat.copyItem",
    "metadata": {
      "description": {
        "value": "Copy",
        "original": "Copy"
      }
    }
  },
  {
    "id": "workbench.action.chat.copyCodeBlock",
    "metadata": {
      "description": {
        "value": "Copy",
        "original": "Copy"
      }
    }
  },
  {
    "id": "workbench.action.chat.applyInEditor",
    "metadata": {
      "description": {
        "value": "Apply in Editor",
        "original": "Apply in Editor"
      }
    },
    "key": "ctrl+enter",
    "when": "accessibleViewInCodeBlock && chatIsEnabled || chatIsEnabled && inChat && !inChatInput"
  },
  {
    "id": "workbench.action.chat.applyAll",
    "metadata": {
      "description": {
        "value": "Apply All Edits",
        "original": "Apply All Edits"
      }
    }
  },
  {
    "id": "workbench.action.chat.insertCodeBlock",
    "metadata": {
      "description": {
        "value": "Insert At Cursor",
        "original": "Insert At Cursor"
      }
    },
    "key": "ctrl+enter",
    "when": "accessibleViewInCodeBlock && chatIsEnabled || chatIsEnabled && inChat && !inChatInput"
  },
  {
    "id": "workbench.action.chat.insertIntoNewFile",
    "metadata": {
      "description": {
        "value": "Insert into New File",
        "original": "Insert into New File"
      }
    }
  },
  {
    "id": "workbench.action.chat.runInTerminal",
    "metadata": {
      "description": {
        "value": "Insert into Terminal",
        "original": "Insert into Terminal"
      }
    },
    "key": "ctrl+alt+enter",
    "when": "accessibleViewInCodeBlock && chatIsEnabled || chatIsEnabled && inChat"
  },
  {
    "id": "workbench.action.chat.nextCodeBlock",
    "metadata": {
      "description": {
        "value": "Next Code Block",
        "original": "Next Code Block"
      }
    },
    "key": "ctrl+alt+pagedown",
    "when": "chatIsEnabled && inChat"
  },
  {
    "id": "workbench.action.chat.previousCodeBlock",
    "metadata": {
      "description": {
        "value": "Previous Code Block",
        "original": "Previous Code Block"
      }
    },
    "key": "ctrl+alt+pageup",
    "when": "chatIsEnabled && inChat"
  },
  {
    "id": "workbench.action.chat.applyCompareEdits",
    "metadata": {
      "description": {
        "value": "Apply Edits",
        "original": "Apply Edits"
      }
    }
  },
  {
    "id": "workbench.action.chat.discardCompareEdits",
    "metadata": {
      "description": {
        "value": "Discard Edits",
        "original": "Discard Edits"
      }
    }
  },
  {
    "id": "workbench.action.chat.nextFileTree",
    "metadata": {
      "description": {
        "value": "Next File Tree",
        "original": "Next File Tree"
      }
    },
    "key": "ctrl+f9",
    "when": "chatIsEnabled && inChat"
  },
  {
    "id": "workbench.action.chat.previousFileTree",
    "metadata": {
      "description": {
        "value": "Previous File Tree",
        "original": "Previous File Tree"
      }
    },
    "key": "ctrl+shift+f9",
    "when": "chatIsEnabled && inChat"
  },
  {
    "id": "workbench.action.chat.markHelpful",
    "metadata": {
      "description": {
        "value": "Helpful",
        "original": "Helpful"
      }
    }
  },
  {
    "id": "workbench.action.chat.markUnhelpful",
    "metadata": {
      "description": {
        "value": "Unhelpful",
        "original": "Unhelpful"
      }
    }
  },
  {
    "id": "workbench.action.chat.reportIssueForBug",
    "metadata": {
      "description": {
        "value": "Report Issue",
        "original": "Report Issue"
      }
    }
  },
  {
    "id": "workbench.action.chat.retry",
    "metadata": {
      "description": {
        "value": "Retry",
        "original": "Retry"
      }
    }
  },
  {
    "id": "workbench.action.chat.insertIntoNotebook",
    "metadata": {
      "description": {
        "value": "Insert into Notebook",
        "original": "Insert into Notebook"
      }
    }
  },
  {
    "id": "workbench.action.chat.remove",
    "metadata": {
      "description": {
        "value": "Remove Request and Response",
        "original": "Remove Request and Response"
      }
    },
    "key": "delete",
    "when": "inChat && !inChatInput"
  },
  {
    "id": "workbench.action.chat.startEditing",
    "metadata": {
      "description": {
        "value": "Edit with Copilot",
        "original": "Edit with Copilot"
      }
    }
  },
  {
    "id": "workbench.action.chat.submit",
    "metadata": {
      "description": {
        "value": "Send",
        "original": "Send"
      }
    },
    "key": "enter",
    "when": "chatInputHasText && inChatInput && !chatSessionRequestInProgress"
  },
  {
    "id": "workbench.action.chat.cancel",
    "metadata": {
      "description": {
        "value": "Cancel",
        "original": "Cancel"
      }
    },
    "key": "alt+backspace"
  },
  {
    "id": "workbench.action.chat.sendToNewChat",
    "metadata": {
      "description": {
        "value": "Send to New Chat",
        "original": "Send to New Chat"
      }
    },
    "key": "ctrl+shift+enter",
    "when": "chatInputHasText && inChatInput && !chatSessionRequestInProgress"
  },
  {
    "id": "workbench.action.chat.submitSecondaryAgent",
    "metadata": {
      "description": {
        "value": "Submit to Secondary Agent",
        "original": "Submit to Secondary Agent"
      }
    },
    "key": "ctrl+enter",
    "when": "chatInputHasText && inChatInput && !chatInputHasAgent && !chatSessionRequestInProgress"
  },
  {
    "id": "workbench.action.chat.sendToChatEditing",
    "metadata": {
      "description": {
        "value": "Send to Copilot Edits",
        "original": "Send to Copilot Edits"
      }
    }
  },
  {
    "id": "workbench.action.quickchat.toggle",
    "metadata": {
      "description": "Toggle the quick chat",
      "args": [
        {
          "name": "args",
          "schema": {
            "anyOf": [
              {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "description": "The query to open the quick chat with",
                    "type": "string"
                  },
                  "isPartialQuery": {
                    "description": "Whether the query is partial; it will wait for more user input",
                    "type": "boolean"
                  }
                }
              },
              {
                "type": "string",
                "description": "The query to open the quick chat with"
              }
            ]
          }
        }
      ]
    },
    "key": "ctrl+shift+i",
    "when": "chatIsEnabled"
  },
  {
    "id": "workbench.action.openQuickChat",
    "metadata": {
      "description": {
        "value": "Open Quick Chat",
        "original": "Open Quick Chat"
      }
    }
  },
  {
    "id": "workbench.action.quickchat.openInChatView",
    "metadata": {
      "description": {
        "value": "Open in Chat View",
        "original": "Open in Chat View"
      }
    }
  },
  {
    "id": "workbench.action.quickchat.close",
    "metadata": {
      "description": {
        "value": "Close Quick Chat",
        "original": "Close Quick Chat"
      }
    }
  },
  {
    "id": "workbench.action.quickchat.launchInlineChat",
    "metadata": {
      "description": {
        "value": "Launch Inline Chat",
        "original": "Launch Inline Chat"
      }
    }
  },
  {
    "id": "workbench.action.chat.export",
    "metadata": {
      "description": {
        "value": "Export Chat...",
        "original": "Export Chat..."
      }
    }
  },
  {
    "id": "workbench.action.chat.import",
    "metadata": {
      "description": {
        "value": "Import Chat...",
        "original": "Import Chat..."
      }
    }
  },
  {
    "id": "workbench.action.chat.openInEditor",
    "metadata": {
      "description": {
        "value": "Open Chat in Editor",
        "original": "Open Chat in Editor"
      }
    }
  },
  {
    "id": "workbench.action.chat.openInNewWindow",
    "metadata": {
      "description": {
        "value": "Open Chat in New Window",
        "original": "Open Chat in New Window"
      }
    }
  },
  {
    "id": "workbench.action.chat.openInSidebar",
    "metadata": {
      "description": {
        "value": "Open Chat in Side Bar",
        "original": "Open Chat in Side Bar"
      }
    }
  },
  {
    "id": "workbench.action.chatEditor.newChat",
    "metadata": {
      "description": {
        "value": "New Chat",
        "original": "New Chat"
      }
    }
  },
  {
    "id": "workbench.action.chat.newChat",
    "metadata": {
      "description": {
        "value": "New Chat",
        "original": "New Chat"
      }
    },
    "key": "ctrl+l",
    "when": "chatIsEnabled && inChat"
  },
  {
    "id": "workbench.action.chat.newEditSession",
    "metadata": {
      "description": {
        "value": "New Edit Session",
        "original": "New Edit Session"
      }
    }
  },
  {
    "id": "workbench.action.chat.openEditSession",
    "metadata": {
      "description": {
        "value": "Open Edit Session",
        "original": "Open Edit Session"
      }
    }
  },
  {
    "id": "workbench.action.chat.attachContext",
    "metadata": {
      "description": {
        "value": "Attach Context",
        "original": "Attach Context"
      }
    },
    "key": "ctrl+/",
    "when": "inChatInput && chatLocation == 'panel' || config.chat.experimental.variables.editor && inChatInput && chatLocation == 'editor' || config.chat.experimental.variables.notebook && inChatInput && chatLocation == 'notebook' || config.chat.experimental.variables.terminal && inChatInput && chatLocation == 'terminal'"
  },
  {
    "id": "workbench.action.chat.attachFile",
    "metadata": {
      "description": {
        "value": "Add File to Chat",
        "original": "Add File to Chat"
      }
    }
  },
  {
    "id": "workbench.action.chat.attachSelection",
    "metadata": {
      "description": {
        "value": "Add Selection to Chat",
        "original": "Add Selection to Chat"
      }
    }
  },
  {
    "id": "workbench.action.chat.logInputHistory",
    "metadata": {
      "description": {
        "value": "Log Chat Input History",
        "original": "Log Chat Input History"
      }
    }
  },
  {
    "id": "chatEditor.action.navigateNext",
    "metadata": {
      "description": {
        "value": "Go to Next Chat Edit",
        "original": "Go to Next Chat Edit"
      }
    }
  },
  {
    "id": "chatEditor.action.navigatePrevious",
    "metadata": {
      "description": {
        "value": "Go to Previous Chat Edit",
        "original": "Go to Previous Chat Edit"
      }
    }
  },
  {
    "id": "chatEditor.action.accept",
    "metadata": {
      "description": {
        "value": "Accept Chat Edit",
        "original": "Accept Chat Edit"
      }
    }
  },
  {
    "id": "chatEditor.action.reject",
    "metadata": {
      "description": {
        "value": "Reject Chat Edit",
        "original": "Reject Chat Edit"
      }
    }
  },
  {
    "id": "inlineChat.startWithCurrentLine",
    "metadata": {
      "description": {
        "value": "Start in Editor with Current Line",
        "original": "Start in Editor with Current Line"
      }
    },
    "key": "win+i",
    "when": "editorFocus && github.copilot.chat.editor.enableLineTrigger && inlineChatHasProvider && !editorReadonly && !inlineChatVisible"
  },
  {
    "id": "inlineChat.start",
    "metadata": {
      "description": {
        "value": "Editor Inline Chat",
        "original": "Editor Inline Chat"
      }
    },
    "key": "ctrl+i",
    "when": "editorFocus && inlineChatHasProvider && inlineChatPossible && !editorReadonly"
  },
  {
    "id": "inlineChat.close",
    "metadata": {
      "description": "Close"
    },
    "key": "escape",
    "when": "inlineChatHasProvider && inlineChatVisible"
  },
  {
    "id": "inlineChat.configure",
    "metadata": {
      "description": {
        "value": "Configure Inline Chat",
        "original": "Configure Inline Chat"
      }
    }
  },
  {
    "id": "inlineChat.unstash",
    "metadata": {
      "description": {
        "value": "Resume Last Dismissed Inline Chat",
        "original": "Resume Last Dismissed Inline Chat"
      }
    },
    "key": "ctrl+z",
    "when": "inlineChatHasStashedSession && !editorReadonly"
  },
  {
    "id": "inlineChat.discardHunkChange",
    "metadata": {
      "description": "Discard"
    },
    "key": "escape",
    "when": "inlineChatHasProvider && inlineChatVisible && inlineChatResponseType == 'messagesAndEdits'"
  },
  {
    "id": "inlineChat.regenerate",
    "metadata": {
      "description": {
        "value": "Rerun Request",
        "original": "Rerun Request"
      }
    },
    "key": "ctrl+r",
    "when": "inlineChatHasProvider && inlineChatVisible"
  },
  {
    "id": "inlineChat.moveToNextHunk",
    "metadata": {
      "description": {
        "value": "Move to Next Change",
        "original": "Move to Next Change"
      }
    },
    "key": "f7",
    "when": "inlineChatHasProvider && inlineChatVisible"
  },
  {
    "id": "inlineChat.moveToPreviousHunk",
    "metadata": {
      "description": {
        "value": "Move to Previous Change",
        "original": "Move to Previous Change"
      }
    },
    "key": "shift+f7",
    "when": "inlineChatHasProvider && inlineChatVisible"
  },
  {
    "id": "inlineChat.arrowOutUp",
    "metadata": {
      "description": "Cursor Up"
    },
    "key": "ctrl+up",
    "when": "inlineChatFocused && inlineChatHasProvider && inlineChatInnerCursorFirst && !accessibilityModeEnabled && !isEmbeddedDiffEditor"
  },
  {
    "id": "inlineChat.arrowOutDown",
    "metadata": {
      "description": "Cursor Down"
    },
    "key": "ctrl+down",
    "when": "inlineChatFocused && inlineChatHasProvider && inlineChatInnerCursorLast && !accessibilityModeEnabled && !isEmbeddedDiffEditor"
  },
  {
    "id": "inlineChat.focus",
    "metadata": {
      "description": {
        "value": "Focus Input",
        "original": "Focus Input"
      }
    },
    "key": "ctrl+up",
    "when": "editorTextFocus && inlineChatVisible && !accessibilityModeEnabled && !inlineChatFocused && !isEmbeddedDiffEditor && inlineChatOuterCursorPosition == 'below'"
  },
  {
    "id": "inlineChat.viewInChat",
    "metadata": {
      "description": "View in Chat"
    },
    "key": "ctrl+down",
    "when": "inChatInput && inlineChatHasProvider && inlineChatVisible"
  },
  {
    "id": "inlineChat.toggleDiff",
    "metadata": {
      "description": {
        "value": "Toggle Changes",
        "original": "Toggle Changes"
      }
    }
  },
  {
    "id": "inlineChat.acceptChanges",
    "metadata": {
      "description": {
        "value": "Accept Changes",
        "original": "Accept Changes"
      }
    },
    "key": "ctrl+enter",
    "when": "inlineChatHasProvider && inlineChatVisible && !inlineChatDocumentChanged || inlineChatHasProvider && inlineChatVisible && config.inlineChat.mode != 'preview'"
  },
  {
    "id": "_interactive.open",
    "metadata": {
      "description": "Open Interactive Window",
      "args": [
        {
          "name": "showOptions",
          "description": "Show Options",
          "schema": {
            "type": "object",
            "properties": {
              "viewColumn": {
                "type": "number",
                "default": -1
              },
              "preserveFocus": {
                "type": "boolean",
                "default": true
              }
            }
          }
        },
        {
          "name": "resource",
          "description": "Interactive resource Uri",
          "isOptional": true
        },
        {
          "name": "controllerId",
          "description": "Notebook controller Id",
          "isOptional": true
        },
        {
          "name": "title",
          "description": "Notebook editor title",
          "isOptional": true
        }
      ]
    }
  },
  {
    "id": "interactive.execute",
    "metadata": {
      "description": "Execute the Contents of the Input Box",
      "args": [
        {
          "name": "resource",
          "description": "Interactive resource Uri",
          "isOptional": true
        }
      ]
    },
    "key": "enter",
    "when": "!config.interactiveWindow.executeWithShiftEnter && activeEditor == 'workbench.editor.interactive'"
  },
  {
    "id": "interactive.input.clear",
    "metadata": {
      "description": {
        "value": "Clear the interactive window input editor contents",
        "original": "Clear the interactive window input editor contents"
      }
    }
  },
  {
    "id": "interactive.history.previous",
    "metadata": {
      "description": {
        "value": "Previous value in history",
        "original": "Previous value in history"
      }
    },
    "key": "up",
    "when": "isCompositeNotebook && !notebookEditorFocused && !suggestWidgetVisible && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'"
  },
  {
    "id": "interactive.history.next",
    "metadata": {
      "description": {
        "value": "Next value in history",
        "original": "Next value in history"
      }
    },
    "key": "down",
    "when": "isCompositeNotebook && !notebookEditorFocused && !suggestWidgetVisible && interactiveInputCursorAtBoundary != 'none' && interactiveInputCursorAtBoundary != 'top'"
  },
  {
    "id": "interactive.scrollToTop",
    "metadata": {
      "description": "Scroll to Top"
    },
    "key": "ctrl+home",
    "when": "activeEditor == 'workbench.editor.interactive'"
  },
  {
    "id": "interactive.scrollToBottom",
    "metadata": {
      "description": "Scroll to Bottom"
    },
    "key": "ctrl+end",
    "when": "activeEditor == 'workbench.editor.interactive'"
  },
  {
    "id": "interactive.input.focus",
    "metadata": {
      "description": {
        "value": "Focus Input Editor",
        "original": "Focus Input Editor"
      }
    },
    "key": "ctrl+down",
    "when": "isCompositeNotebook && notebookEditorFocused"
  },
  {
    "id": "interactive.history.focus",
    "metadata": {
      "description": {
        "value": "Focus History",
        "original": "Focus History"
      }
    },
    "key": "ctrl+up",
    "when": "isCompositeNotebook && !notebookEditorFocused && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'"
  },
  {
    "id": "repl.action.acceptInput",
    "key": "enter",
    "when": "inDebugRepl && textInputFocus"
  },
  {
    "id": "repl.action.copyAll"
  },
  {
    "id": "repl.action.filter",
    "metadata": {
      "description": "Debug Console: Focus Filter"
    },
    "key": "ctrl+f",
    "when": "inDebugRepl && textInputFocus"
  },
  {
    "id": "repl.action.find",
    "metadata": {
      "description": "Debug Console: Focus Find"
    },
    "key": "ctrl+alt+f",
    "when": "inDebugRepl || inDebugRepl && focusedView == 'workbench.panel.repl.view'"
  },
  {
    "id": "workbench.action.debug.selectRepl",
    "metadata": {
      "description": "Select Debug Console"
    }
  },
  {
    "id": "workbench.debug.panel.action.clearReplAction",
    "metadata": {
      "description": {
        "value": "Clears all program output from your debug REPL",
        "original": "Clears all program output from your debug REPL"
      }
    }
  },
  {
    "id": "debug.collapseRepl",
    "metadata": {
      "description": "Collapse All"
    }
  },
  {
    "id": "debug.replPaste",
    "metadata": {
      "description": "Paste"
    }
  },
  {
    "id": "workbench.debug.action.copyAll",
    "metadata": {
      "description": "Copy All"
    }
  },
  {
    "id": "debug.replCopy",
    "metadata": {
      "description": "Copy"
    }
  },
  {
    "id": "repl.execute",
    "metadata": {
      "description": "Execute the Contents of the Input Box",
      "args": [
        {
          "name": "resource",
          "description": "Interactive resource Uri",
          "isOptional": true
        }
      ]
    },
    "key": "enter",
    "when": "!config.interactiveWindow.executeWithShiftEnter && activeEditor == 'workbench.editor.repl'"
  },
  {
    "id": "list.find.replInputFocus",
    "key": "ctrl+alt+f",
    "when": "view == 'workbench.panel.repl.view'"
  },
  {
    "id": "testing.toggleInlineCoverage",
    "metadata": {
      "description": {
        "value": "Toggle Inline Coverage",
        "original": "Toggle Inline Coverage"
      }
    },
    "key": "ctrl+; ctrl+shift+i"
  },
  {
    "id": "testing.coverageToggleToolbar",
    "metadata": {
      "description": {
        "value": "Toggle the sticky coverage bar in the editor.",
        "original": "Toggle the sticky coverage bar in the editor."
      }
    }
  },
  {
    "id": "testing.coverageFilterToTestInEditor",
    "metadata": {
      "description": {
        "value": "Filter Coverage to Test",
        "original": "Filter Coverage to Test"
      }
    }
  },
  {
    "id": "testing.coverageFilterToTest",
    "metadata": {
      "description": {
        "value": "Filter Coverage by Test",
        "original": "Filter Coverage by Test"
      }
    }
  },
  {
    "id": "testing.coverageViewChangeSorting",
    "metadata": {
      "description": {
        "value": "Change Sort Order",
        "original": "Change Sort Order"
      }
    }
  },
  {
    "id": "callStackWidget.goToFile",
    "metadata": {
      "description": {
        "value": "Open File",
        "original": "Open File"
      }
    }
  },
  {
    "id": "testing.callStack.run",
    "metadata": {
      "description": "Rerun Test"
    }
  },
  {
    "id": "testing.callStack.debug",
    "metadata": {
      "description": "Debug Test"
    }
  },
  {
    "id": "vscode.pickMultipleTestProfiles"
  },
  {
    "id": "vscode.pickTestProfile"
  },
  {
    "id": "testing.cancelTestRefresh",
    "metadata": {
      "description": {
        "value": "Cancel Test Refresh",
        "original": "Cancel Test Refresh"
      }
    }
  },
  {
    "id": "testing.cancelRun",
    "metadata": {
      "description": {
        "value": "Cancel Test Run",
        "original": "Cancel Test Run"
      }
    },
    "key": "ctrl+; ctrl+x"
  },
  {
    "id": "testing.coverage.close",
    "metadata": {
      "description": {
        "value": "Clear Coverage",
        "original": "Clear Coverage"
      }
    }
  },
  {
    "id": "testing.clearTestResults",
    "metadata": {
      "description": {
        "value": "Clear All Results",
        "original": "Clear All Results"
      }
    }
  },
  {
    "id": "testing.collapseAll",
    "metadata": {
      "description": {
        "value": "Collapse All Tests",
        "original": "Collapse All Tests"
      }
    }
  },
  {
    "id": "testing.configureProfile",
    "metadata": {
      "description": {
        "value": "Configure Test Profiles",
        "original": "Configure Test Profiles"
      }
    }
  },
  {
    "id": "testing.toggleContinuousRunForTest",
    "metadata": {
      "description": {
        "value": "Turn on Continuous Run",
        "original": "Turn on Continuous Run"
      }
    }
  },
  {
    "id": "testing.continuousRunUsingForTest",
    "metadata": {
      "description": {
        "value": "Start Continous Run Using...",
        "original": "Start Continous Run Using..."
      }
    }
  },
  {
    "id": "testing.coverage",
    "metadata": {
      "description": {
        "value": "Run Test with Coverage",
        "original": "Run Test with Coverage"
      }
    }
  },
  {
    "id": "testing.coverageAll",
    "metadata": {
      "description": {
        "value": "Run All Tests with Coverage",
        "original": "Run All Tests with Coverage"
      }
    },
    "key": "ctrl+; ctrl+shift+a"
  },
  {
    "id": "testing.coverageAtCursor",
    "metadata": {
      "description": {
        "value": "Run Test at Cursor with Coverage",
        "original": "Run Test at Cursor with Coverage"
      }
    },
    "key": "ctrl+; ctrl+shift+c",
    "when": "editorTextFocus"
  },
  {
    "id": "testing.coverageCurrentFile",
    "metadata": {
      "description": {
        "value": "Run Tests with Coverage in Current File",
        "original": "Run Tests with Coverage in Current File"
      }
    },
    "key": "ctrl+; ctrl+shift+f",
    "when": "editorTextFocus"
  },
  {
    "id": "testing.coverageLastRun",
    "metadata": {
      "description": {
        "value": "Rerun Last Run with Coverage",
        "original": "Rerun Last Run with Coverage"
      }
    },
    "key": "ctrl+; ctrl+shift+l"
  },
  {
    "id": "testing.coverageSelected",
    "metadata": {
      "description": {
        "value": "Run Tests with Coverage",
        "original": "Run Tests with Coverage"
      }
    }
  },
  {
    "id": "testing.coverage.uri",
    "metadata": {
      "description": {
        "value": "Run Tests with Coverage",
        "original": "Run Tests with Coverage"
      }
    }
  },
  {
    "id": "testing.debug",
    "metadata": {
      "description": {
        "value": "Debug Test",
        "original": "Debug Test"
      }
    }
  },
  {
    "id": "testing.debugAll",
    "metadata": {
      "description": {
        "value": "Debug All Tests",
        "original": "Debug All Tests"
      }
    },
    "key": "ctrl+; ctrl+a"
  },
  {
    "id": "testing.debugAtCursor",
    "metadata": {
      "description": {
        "value": "Debug Test at Cursor",
        "original": "Debug Test at Cursor"
      }
    },
    "key": "ctrl+; ctrl+c",
    "when": "editorTextFocus"
  },
  {
    "id": "testing.debugCurrentFile",
    "metadata": {
      "description": {
        "value": "Debug Tests in Current File",
        "original": "Debug Tests in Current File"
      }
    },
    "key": "ctrl+; ctrl+f",
    "when": "editorTextFocus"
  },
  {
    "id": "testing.debugFailTests",
    "metadata": {
      "description": {
        "value": "Debug Failed Tests",
        "original": "Debug Failed Tests"
      }
    },
    "key": "ctrl+; ctrl+e"
  },
  {
    "id": "testing.debugLastRun",
    "metadata": {
      "description": {
        "value": "Debug Last Run",
        "original": "Debug Last Run"
      }
    },
    "key": "ctrl+; ctrl+l"
  },
  {
    "id": "testing.debugSelected",
    "metadata": {
      "description": {
        "value": "Debug Tests",
        "original": "Debug Tests"
      }
    }
  },
  {
    "id": "testing.debug.uri",
    "metadata": {
      "description": {
        "value": "Debug Tests",
        "original": "Debug Tests"
      }
    }
  },
  {
    "id": "_testing.getExplorerSelection",
    "metadata": {
      "description": {
        "value": "Get Explorer Selection",
        "original": "Get Explorer Selection"
      }
    }
  },
  {
    "id": "testing.getSelectedProfiles",
    "metadata": {
      "description": {
        "value": "Get Selected Profiles",
        "original": "Get Selected Profiles"
      }
    }
  },
  {
    "id": "testing.goToRelatedCode",
    "metadata": {
      "description": {
        "value": "Go to Related Code",
        "original": "Go to Related Code"
      }
    }
  },
  {
    "id": "testing.goToRelatedTest",
    "metadata": {
      "description": {
        "value": "Go to Related Test",
        "original": "Go to Related Test"
      }
    }
  },
  {
    "id": "testing.editFocusedTest",
    "metadata": {
      "description": {
        "value": "Go to Test",
        "original": "Go to Test"
      }
    },
    "key": "alt+enter",
    "when": "focusedView == 'workbench.view.testing'"
  },
  {
    "id": "testing.hideTest",
    "metadata": {
      "description": {
        "value": "Hide Test",
        "original": "Hide Test"
      }
    }
  },
  {
    "id": "testing.openCoverage",
    "metadata": {
      "description": {
        "value": "Open Coverage",
        "original": "Open Coverage"
      }
    }
  },
  {
    "id": "testing.openOutputPeek",
    "metadata": {
      "description": {
        "value": "Peek Output",
        "original": "Peek Output"
      }
    },
    "key": "ctrl+; ctrl+m"
  },
  {
    "id": "testing.peekRelatedCode",
    "metadata": {
      "description": {
        "value": "Peek Related Code",
        "original": "Peek Related Code"
      }
    }
  },
  {
    "id": "testing.peekRelatedTest",
    "metadata": {
      "description": {
        "value": "Peek Related Test",
        "original": "Peek Related Test"
      }
    }
  },
  {
    "id": "testing.refreshTests",
    "metadata": {
      "description": {
        "value": "Refresh Tests",
        "original": "Refresh Tests"
      }
    },
    "key": "ctrl+; ctrl+r",
    "when": "testing.canRefresh"
  },
  {
    "id": "testing.reRunFailTests",
    "metadata": {
      "description": {
        "value": "Rerun Failed Tests",
        "original": "Rerun Failed Tests"
      }
    },
    "key": "ctrl+; e"
  },
  {
    "id": "testing.reRunLastRun",
    "metadata": {
      "description": {
        "value": "Rerun Last Run",
        "original": "Rerun Last Run"
      }
    },
    "key": "ctrl+; l"
  },
  {
    "id": "testing.run",
    "metadata": {
      "description": {
        "value": "Run Test",
        "original": "Run Test"
      }
    }
  },
  {
    "id": "testing.runAll",
    "metadata": {
      "description": {
        "value": "Run All Tests",
        "original": "Run All Tests"
      }
    },
    "key": "ctrl+; a"
  },
  {
    "id": "testing.runAtCursor",
    "metadata": {
      "description": {
        "value": "Run Test at Cursor",
        "original": "Run Test at Cursor"
      }
    },
    "key": "ctrl+; c",
    "when": "editorTextFocus"
  },
  {
    "id": "testing.runCurrentFile",
    "metadata": {
      "description": {
        "value": "Run Tests in Current File",
        "original": "Run Tests in Current File"
      }
    },
    "key": "ctrl+; f",
    "when": "editorTextFocus"
  },
  {
    "id": "testing.runSelected",
    "metadata": {
      "description": {
        "value": "Run Tests",
        "original": "Run Tests"
      }
    }
  },
  {
    "id": "testing.run.uri",
    "metadata": {
      "description": {
        "value": "Run Tests",
        "original": "Run Tests"
      }
    }
  },
  {
    "id": "testing.runUsing",
    "metadata": {
      "description": {
        "value": "Execute Using Profile...",
        "original": "Execute Using Profile..."
      }
    }
  },
  {
    "id": "testing.searchForTestExtension",
    "metadata": {
      "description": {
        "value": "Search for Test Extension",
        "original": "Search for Test Extension"
      }
    }
  },
  {
    "id": "testing.selectDefaultTestProfiles",
    "metadata": {
      "description": {
        "value": "Select Default Profile",
        "original": "Select Default Profile"
      }
    }
  },
  {
    "id": "testing.showMostRecentOutput",
    "metadata": {
      "description": {
        "value": "Show Output",
        "original": "Show Output"
      }
    },
    "key": "ctrl+; ctrl+o",
    "when": "testing.hasAnyResults"
  },
  {
    "id": "testing.startContinuousRun",
    "metadata": {
      "description": {
        "value": "Start Continuous Run",
        "original": "Start Continuous Run"
      }
    }
  },
  {
    "id": "testing.stopContinuousRun",
    "metadata": {
      "description": {
        "value": "Stop Continuous Run",
        "original": "Stop Continuous Run"
      }
    }
  },
  {
    "id": "testing.sortByDuration",
    "metadata": {
      "description": {
        "value": "Sort by Duration",
        "original": "Sort by Duration"
      }
    }
  },
  {
    "id": "testing.sortByLocation",
    "metadata": {
      "description": {
        "value": "Sort by Location",
        "original": "Sort by Location"
      }
    }
  },
  {
    "id": "testing.sortByStatus",
    "metadata": {
      "description": {
        "value": "Sort by Status",
        "original": "Sort by Status"
      }
    }
  },
  {
    "id": "testing.viewAsList",
    "metadata": {
      "description": {
        "value": "View as List",
        "original": "View as List"
      }
    }
  },
  {
    "id": "testing.viewAsTree",
    "metadata": {
      "description": {
        "value": "View as Tree",
        "original": "View as Tree"
      }
    }
  },
  {
    "id": "testing.toggleInlineTestOutput",
    "metadata": {
      "description": {
        "value": "Toggle Inline Test Output",
        "original": "Toggle Inline Test Output"
      }
    },
    "key": "ctrl+; ctrl+i"
  },
  {
    "id": "testing.unhideAllTests",
    "metadata": {
      "description": {
        "value": "Unhide All Tests",
        "original": "Unhide All Tests"
      }
    }
  },
  {
    "id": "testing.unhideTest",
    "metadata": {
      "description": {
        "value": "Unhide Test",
        "original": "Unhide Test"
      }
    }
  },
  {
    "id": "testing.openMessageInEditor",
    "metadata": {
      "description": {
        "value": "Open in Editor",
        "original": "Open in Editor"
      }
    }
  },
  {
    "id": "testing.goToPreviousMessage",
    "metadata": {
      "description": {
        "value": "Shows the previous failure message in your file",
        "original": "Shows the previous failure message in your file"
      }
    },
    "key": "shift+alt+f8",
    "when": "editorFocus && testing.isPeekVisible"
  },
  {
    "id": "testing.goToNextMessage",
    "metadata": {
      "description": {
        "value": "Shows the next failure message in your file",
        "original": "Shows the next failure message in your file"
      }
    },
    "key": "alt+f8",
    "when": "editorFocus && testing.isPeekVisible"
  },
  {
    "id": "editor.closeTestPeek",
    "metadata": {
      "description": {
        "value": "Close",
        "original": "Close"
      }
    },
    "key": "escape",
    "when": "testing.isInPeek && !config.editor.stablePeek || testing.isPeekVisible && !config.editor.stablePeek"
  },
  {
    "id": "testing.toggleTestingPeekHistory",
    "metadata": {
      "description": {
        "value": "Shows or hides the history of test runs in the peek view",
        "original": "Shows or hides the history of test runs in the peek view"
      }
    },
    "key": "alt+h",
    "when": "testing.isPeekVisible"
  },
  {
    "id": "testing.collapsePeekStack",
    "metadata": {
      "description": {
        "value": "Collapse Stack Frames",
        "original": "Collapse Stack Frames"
      }
    }
  },
  {
    "id": "_revealTestInExplorer"
  },
  {
    "id": "vscode.peekTestError"
  },
  {
    "id": "vscode.revealTest"
  },
  {
    "id": "vscode.runTestsById"
  },
  {
    "id": "vscode.testing.getControllersWithTests"
  },
  {
    "id": "workbench.action.setLogLevel",
    "metadata": {
      "description": {
        "value": "Set Log Level...",
        "original": "Set Log Level..."
      }
    }
  },
  {
    "id": "workbench.action.setDefaultLogLevel",
    "metadata": {
      "description": {
        "value": "Set Default Log Level",
        "original": "Set Default Log Level"
      }
    }
  },
  {
    "id": "workbench.action.clearCommandHistory",
    "metadata": {
      "description": {
        "value": "Clear Command History",
        "original": "Clear Command History"
      }
    }
  },
  {
    "id": "workbench.action.showCommands",
    "metadata": {
      "description": {
        "value": "Show All Commands",
        "original": "Show All Commands"
      }
    },
    "key": "ctrl+shift+p"
  },
  {
    "id": "workbench.action.openView",
    "metadata": {
      "description": {
        "value": "Open View",
        "original": "Open View"
      }
    }
  },
  {
    "id": "workbench.action.quickOpenView",
    "metadata": {
      "description": {
        "value": "Quick Open View",
        "original": "Quick Open View"
      }
    },
    "key": "ctrl+q"
  },
  {
    "id": "workbench.action.quickOpenNavigateNextInViewPicker",
    "key": "ctrl+q",
    "when": "inQuickOpen && inViewsPicker"
  },
  {
    "id": "workbench.action.quickOpenNavigatePreviousInViewPicker",
    "key": "ctrl+shift+q",
    "when": "inQuickOpen && inViewsPicker"
  },
  {
    "id": "workbench.action.toggleEditorGroupLayout",
    "metadata": {
      "description": {
        "value": "Toggle Vertical/Horizontal Editor Layout",
        "original": "Toggle Vertical/Horizontal Editor Layout"
      }
    },
    "key": "shift+alt+0"
  },
  {
    "id": "workbench.action.files.saveAll",
    "metadata": {
      "description": {
        "value": "Save All",
        "original": "Save All"
      }
    }
  },
  {
    "id": "openEditors.closeAll",
    "metadata": {
      "description": {
        "value": "Close All Editors",
        "original": "Close All Editors"
      }
    }
  },
  {
    "id": "openEditors.newUntitledFile",
    "metadata": {
      "description": {
        "value": "New Untitled Text File",
        "original": "New Untitled Text File"
      }
    }
  },
  {
    "id": "explorer.openToSide",
    "key": "ctrl+enter",
    "when": "explorerViewletFocus && foldersViewVisible && !inputFocus"
  },
  {
    "id": "explorer.openAndPassFocus",
    "key": "enter",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsFolder && !inputFocus"
  },
  {
    "id": "workbench.files.action.compareWithSaved",
    "key": "ctrl+k d"
  },
  {
    "id": "selectForCompare"
  },
  {
    "id": "compareSelected"
  },
  {
    "id": "compareFiles"
  },
  {
    "id": "copyFilePath",
    "key": "shift+alt+c",
    "when": "editorFocus"
  },
  {
    "id": "copyRelativeFilePath",
    "key": "ctrl+k ctrl+shift+c",
    "when": "editorFocus"
  },
  {
    "id": "workbench.action.files.copyPathOfActiveFile",
    "key": "ctrl+k p"
  },
  {
    "id": "revealInExplorer"
  },
  {
    "id": "explorer.openWith"
  },
  {
    "id": "workbench.action.files.save",
    "key": "s",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "id": "workbench.action.files.saveWithoutFormatting",
    "key": "ctrl+k ctrl+shift+s"
  },
  {
    "id": "workbench.action.files.saveAs",
    "key": "ctrl+shift+s"
  },
  {
    "id": "saveAll",
    "key": "ctrl+k s"
  },
  {
    "id": "workbench.files.action.saveAllInGroup"
  },
  {
    "id": "workbench.action.files.saveFiles"
  },
  {
    "id": "workbench.action.files.revert"
  },
  {
    "id": "removeRootFolder"
  },
  {
    "id": "previousCompressedFolder",
    "key": "left",
    "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedFirstFocus && !inputFocus"
  },
  {
    "id": "nextCompressedFolder",
    "key": "right",
    "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedLastFocus && !inputFocus"
  },
  {
    "id": "firstCompressedFolder",
    "key": "home",
    "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedFirstFocus && !inputFocus"
  },
  {
    "id": "lastCompressedFolder",
    "key": "end",
    "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedLastFocus && !inputFocus"
  },
  {
    "id": "workbench.action.files.newUntitledFile",
    "metadata": {
      "description": {
        "value": "New Untitled Text File",
        "original": "New Untitled Text File"
      },
      "args": [
        {
          "isOptional": true,
          "name": "New Untitled Text File arguments",
          "description": "The editor view type or language ID if known",
          "schema": {
            "type": "object",
            "properties": {
              "viewType": {
                "type": "string"
              },
              "languageId": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "key": "ctrl+n"
  },
  {
    "id": "workbench.action.files.newFile"
  },
  {
    "id": "workbench.files.action.compareFileWith",
    "metadata": {
      "description": {
        "value": "Opens a picker to select a file to diff with the active editor.",
        "original": "Opens a picker to select a file to diff with the active editor."
      }
    }
  },
  {
    "id": "workbench.files.action.focusFilesExplorer",
    "metadata": {
      "description": {
        "value": "Moves focus to the file explorer view container.",
        "original": "Moves focus to the file explorer view container."
      }
    }
  },
  {
    "id": "workbench.files.action.showActiveFileInExplorer",
    "metadata": {
      "description": {
        "value": "Reveals and selects the active file within the explorer view.",
        "original": "Reveals and selects the active file within the explorer view."
      }
    }
  },
  {
    "id": "workbench.files.action.compareWithClipboard",
    "metadata": {
      "description": {
        "value": "Opens a new diff editor to compare the active file with the contents of the clipboard.",
        "original": "Opens a new diff editor to compare the active file with the contents of the clipboard."
      }
    },
    "key": "ctrl+k c"
  },
  {
    "id": "workbench.files.action.compareNewUntitledTextFiles",
    "metadata": {
      "description": {
        "value": "Opens a new diff editor with two untitled files.",
        "original": "Opens a new diff editor with two untitled files."
      }
    }
  },
  {
    "id": "workbench.action.toggleAutoSave",
    "metadata": {
      "description": {
        "value": "Toggle the ability to save files automatically after typing",
        "original": "Toggle the ability to save files automatically after typing"
      }
    }
  },
  {
    "id": "workbench.action.files.showOpenedFileInNewWindow",
    "metadata": {
      "description": {
        "value": "Opens the active file in a new window with no folders open.",
        "original": "Opens the active file in a new window with no folders open."
      }
    }
  },
  {
    "id": "workbench.action.files.setActiveEditorReadonlyInSession",
    "metadata": {
      "description": {
        "value": "Set Active Editor Read-only in Session",
        "original": "Set Active Editor Read-only in Session"
      }
    }
  },
  {
    "id": "workbench.action.files.setActiveEditorWriteableInSession",
    "metadata": {
      "description": {
        "value": "Set Active Editor Writeable in Session",
        "original": "Set Active Editor Writeable in Session"
      }
    }
  },
  {
    "id": "workbench.action.files.toggleActiveEditorReadonlyInSession",
    "metadata": {
      "description": {
        "value": "Toggle Active Editor Read-only in Session",
        "original": "Toggle Active Editor Read-only in Session"
      }
    }
  },
  {
    "id": "workbench.action.files.resetActiveEditorReadonlyInSession",
    "metadata": {
      "description": {
        "value": "Reset Active Editor Read-only in Session",
        "original": "Reset Active Editor Read-only in Session"
      }
    }
  },
  {
    "id": "_files.windowOpen"
  },
  {
    "id": "_files.newWindow"
  },
  {
    "id": "renameFile",
    "key": "f2",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "id": "moveFileToTrash",
    "key": "delete",
    "when": "explorerResourceMoveableToTrash && filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus && !treeFindOpen"
  },
  {
    "id": "deleteFile",
    "key": "delete",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceMoveableToTrash && !explorerResourceReadonly && !inputFocus && !treeFindOpen"
  },
  {
    "id": "filesExplorer.cut",
    "key": "ctrl+x",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus && !treeFindOpen"
  },
  {
    "id": "filesExplorer.copy",
    "key": "ctrl+c",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !inputFocus"
  },
  {
    "id": "filesExplorer.paste",
    "key": "ctrl+v",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus && !treeFindOpen"
  },
  {
    "id": "filesExplorer.cancelCut",
    "key": "escape",
    "when": "explorerResourceCut && filesExplorerFocus && foldersViewVisible && !inputFocus"
  },
  {
    "id": "filesExplorer.openFilePreserveFocus",
    "key": "space",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsFolder && !inputFocus"
  },
  {
    "id": "workbench.files.action.acceptLocalChanges"
  },
  {
    "id": "workbench.files.action.revertLocalChanges"
  },
  {
    "id": "refactorPreview.apply",
    "metadata": {
      "description": {
        "value": "Apply Refactoring",
        "original": "Apply Refactoring"
      }
    },
    "key": "ctrl+enter",
    "when": "refactorPreview.enabled && refactorPreview.hasCheckedChanges && focusedView == 'refactorPreview'"
  },
  {
    "id": "refactorPreview.discard",
    "metadata": {
      "description": {
        "value": "Discard Refactoring",
        "original": "Discard Refactoring"
      }
    }
  },
  {
    "id": "refactorPreview.toggleCheckedState",
    "metadata": {
      "description": {
        "value": "Toggle Change",
        "original": "Toggle Change"
      }
    },
    "key": "space",
    "when": "listFocus && refactorPreview.enabled && !inputFocus && !treestickyScrollFocused"
  },
  {
    "id": "refactorPreview.groupByFile",
    "metadata": {
      "description": {
        "value": "Group Changes By File",
        "original": "Group Changes By File"
      }
    }
  },
  {
    "id": "refactorPreview.groupByType",
    "metadata": {
      "description": {
        "value": "Group Changes By Type",
        "original": "Group Changes By Type"
      }
    }
  },
  {
    "id": "refactorPreview.toggleGrouping",
    "metadata": {
      "description": {
        "value": "Group Changes By Type",
        "original": "Group Changes By Type"
      }
    }
  },
  {
    "id": "search.action.copyMatch",
    "metadata": {
      "description": {
        "value": "Copy",
        "original": "Copy"
      }
    },
    "key": "ctrl+c",
    "when": "fileMatchOrMatchFocus"
  },
  {
    "id": "search.action.copyPath",
    "metadata": {
      "description": {
        "value": "Copy Path",
        "original": "Copy Path"
      }
    },
    "key": "shift+alt+c",
    "when": "fileMatchOrFolderMatchWithResourceFocus"
  },
  {
    "id": "search.action.copyAll",
    "metadata": {
      "description": {
        "value": "Copy All",
        "original": "Copy All"
      }
    }
  },
  {
    "id": "search.action.clearHistory",
    "metadata": {
      "description": {
        "value": "Clear Search History",
        "original": "Clear Search History"
      }
    }
  },
  {
    "id": "search.action.cancel",
    "metadata": {
      "description": {
        "value": "Cancel Search",
        "original": "Cancel Search"
      }
    },
    "key": "escape",
    "when": "listFocus && searchViewletVisible && !inputFocus && !treestickyScrollFocused && searchState != '0'"
  },
  {
    "id": "search.action.refreshSearchResults",
    "metadata": {
      "description": {
        "value": "Refresh",
        "original": "Refresh"
      }
    }
  },
  {
    "id": "search.action.collapseSearchResults",
    "metadata": {
      "description": {
        "value": "Collapse All",
        "original": "Collapse All"
      }
    }
  },
  {
    "id": "search.action.expandSearchResults",
    "metadata": {
      "description": {
        "value": "Expand All",
        "original": "Expand All"
      }
    }
  },
  {
    "id": "search.action.clearSearchResults",
    "metadata": {
      "description": {
        "value": "Clear Search Results",
        "original": "Clear Search Results"
      }
    }
  },
  {
    "id": "search.action.viewAsTree",
    "metadata": {
      "description": {
        "value": "View as Tree",
        "original": "View as Tree"
      }
    }
  },
  {
    "id": "search.action.viewAsList",
    "metadata": {
      "description": {
        "value": "View as List",
        "original": "View as List"
      }
    }
  },
  {
    "id": "search.action.restrictSearchToFolder",
    "metadata": {
      "description": {
        "value": "Restrict Search to Folder",
        "original": "Restrict Search to Folder"
      }
    },
    "key": "shift+alt+f",
    "when": "folderMatchWithResourceFocus && searchViewletVisible"
  },
  {
    "id": "search.action.expandRecursively",
    "metadata": {
      "description": "Expand Recursively"
    }
  },
  {
    "id": "search.action.excludeFromSearch",
    "metadata": {
      "description": {
        "value": "Exclude Folder from Search",
        "original": "Exclude Folder from Search"
      }
    }
  },
  {
    "id": "search.action.revealInSideBar",
    "metadata": {
      "description": {
        "value": "Reveal in Explorer View",
        "original": "Reveal in Explorer View"
      }
    }
  },
  {
    "id": "workbench.action.findInFiles",
    "metadata": {
      "description": "Open a workspace search",
      "args": [
        {
          "name": "A set of options for the search",
          "schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string"
              },
              "replace": {
                "type": "string"
              },
              "preserveCase": {
                "type": "boolean"
              },
              "triggerSearch": {
                "type": "boolean"
              },
              "filesToInclude": {
                "type": "string"
              },
              "filesToExclude": {
                "type": "string"
              },
              "isRegex": {
                "type": "boolean"
              },
              "isCaseSensitive": {
                "type": "boolean"
              },
              "matchWholeWord": {
                "type": "boolean"
              },
              "useExcludeSettingsAndIgnoreFiles": {
                "type": "boolean"
              },
              "onlyOpenEditors": {
                "type": "boolean"
              },
              "showIncludesExcludes": {
                "type": "boolean"
              }
            }
          }
        }
      ]
    },
    "key": "ctrl+shift+f"
  },
  {
    "id": "filesExplorer.findInFolder",
    "metadata": {
      "description": {
        "value": "Find in Folder...",
        "original": "Find in Folder..."
      }
    },
    "key": "shift+alt+f",
    "when": "explorerResourceIsFolder && filesExplorerFocus && foldersViewVisible && !inputFocus"
  },
  {
    "id": "filesExplorer.findInWorkspace",
    "metadata": {
      "description": {
        "value": "Find in Workspace...",
        "original": "Find in Workspace..."
      }
    }
  },
  {
    "id": "workbench.action.search.toggleQueryDetails",
    "metadata": {
      "description": {
        "value": "Toggle Query Details",
        "original": "Toggle Query Details"
      }
    },
    "key": "ctrl+shift+j",
    "when": "inSearchEditor || searchViewletFocus"
  },
  {
    "id": "closeReplaceInFilesWidget",
    "metadata": {
      "description": {
        "value": "Close Replace Widget",
        "original": "Close Replace Widget"
      }
    },
    "key": "escape",
    "when": "replaceInputBoxFocus && searchViewletVisible"
  },
  {
    "id": "toggleSearchCaseSensitive",
    "metadata": {
      "description": {
        "value": "Toggle Case Sensitive",
        "original": "Toggle Case Sensitive"
      }
    },
    "key": "alt+c",
    "when": "searchViewletFocus"
  },
  {
    "id": "toggleSearchWholeWord",
    "metadata": {
      "description": {
        "value": "Toggle Whole Word",
        "original": "Toggle Whole Word"
      }
    },
    "key": "alt+w",
    "when": "searchViewletFocus"
  },
  {
    "id": "toggleSearchRegex",
    "metadata": {
      "description": {
        "value": "Toggle Regex",
        "original": "Toggle Regex"
      }
    },
    "key": "alt+r",
    "when": "searchViewletFocus"
  },
  {
    "id": "toggleSearchPreserveCase",
    "metadata": {
      "description": {
        "value": "Toggle Preserve Case",
        "original": "Toggle Preserve Case"
      }
    },
    "key": "alt+p",
    "when": "searchViewletFocus"
  },
  {
    "id": "search.action.openResult",
    "metadata": {
      "description": {
        "value": "Open Match",
        "original": "Open Match"
      }
    },
    "key": "enter",
    "when": "fileMatchOrMatchFocus && searchViewletVisible"
  },
  {
    "id": "search.action.openResultToSide",
    "metadata": {
      "description": {
        "value": "Open Match To Side",
        "original": "Open Match To Side"
      }
    },
    "key": "ctrl+enter",
    "when": "fileMatchOrMatchFocus && searchViewletVisible"
  },
  {
    "id": "addCursorsAtSearchResults",
    "metadata": {
      "description": {
        "value": "Add Cursors at Search Results",
        "original": "Add Cursors at Search Results"
      }
    },
    "key": "ctrl+shift+l",
    "when": "fileMatchOrMatchFocus && searchViewletVisible"
  },
  {
    "id": "search.focus.nextInputBox",
    "metadata": {
      "description": {
        "value": "Focus Next Input",
        "original": "Focus Next Input"
      }
    },
    "key": "ctrl+down",
    "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible"
  },
  {
    "id": "search.focus.previousInputBox",
    "metadata": {
      "description": {
        "value": "Focus Previous Input",
        "original": "Focus Previous Input"
      }
    },
    "key": "ctrl+up",
    "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus"
  },
  {
    "id": "search.action.focusSearchFromResults",
    "metadata": {
      "description": {
        "value": "Focus Search From Results",
        "original": "Focus Search From Results"
      }
    },
    "key": "ctrl+up",
    "when": "accessibilityModeEnabled && searchViewletVisible || firstMatchFocus && searchViewletVisible"
  },
  {
    "id": "workbench.action.toggleSearchOnType",
    "metadata": {
      "description": {
        "value": "Toggle Search on Type",
        "original": "Toggle Search on Type"
      }
    }
  },
  {
    "id": "search.action.focusSearchList",
    "metadata": {
      "description": {
        "value": "Focus List",
        "original": "Focus List"
      }
    }
  },
  {
    "id": "search.action.focusNextSearchResult",
    "metadata": {
      "description": {
        "value": "Focus Next Search Result",
        "original": "Focus Next Search Result"
      }
    },
    "key": "f4",
    "when": "hasSearchResult || inSearchEditor"
  },
  {
    "id": "search.action.focusPreviousSearchResult",
    "metadata": {
      "description": {
        "value": "Focus Previous Search Result",
        "original": "Focus Previous Search Result"
      }
    },
    "key": "shift+f4",
    "when": "hasSearchResult || inSearchEditor"
  },
  {
    "id": "workbench.action.replaceInFiles",
    "metadata": {
      "description": {
        "value": "Replace in Files",
        "original": "Replace in Files"
      }
    },
    "key": "ctrl+shift+h"
  },
  {
    "id": "search.action.remove",
    "metadata": {
      "description": {
        "value": "Dismiss",
        "original": "Dismiss"
      }
    },
    "key": "delete",
    "when": "fileMatchOrMatchFocus && searchViewletVisible"
  },
  {
    "id": "search.action.replace",
    "metadata": {
      "description": {
        "value": "Replace",
        "original": "Replace"
      }
    },
    "key": "ctrl+shift+1",
    "when": "isEditableItem && matchFocus && replaceActive && searchViewletVisible"
  },
  {
    "id": "search.action.replaceAllInFile",
    "metadata": {
      "description": {
        "value": "Replace All",
        "original": "Replace All"
      }
    },
    "key": "ctrl+shift+1",
    "when": "fileMatchFocus && isEditableItem && replaceActive && searchViewletVisible"
  },
  {
    "id": "search.action.replaceAllInFolder",
    "metadata": {
      "description": {
        "value": "Replace All",
        "original": "Replace All"
      }
    },
    "key": "ctrl+shift+1",
    "when": "folderMatchFocus && isEditableItem && replaceActive && searchViewletVisible"
  },
  {
    "id": "workbench.action.showAllSymbols",
    "metadata": {
      "description": {
        "value": "Go to Symbol in Workspace...",
        "original": "Go to Symbol in Workspace...",
        "mnemonicTitle": "Go to Symbol in &&Workspace..."
      }
    },
    "key": "ctrl+t"
  },
  {
    "id": "workbench.action.quickTextSearch",
    "metadata": {
      "description": {
        "value": "Quick Search",
        "original": "Quick Search"
      }
    }
  },
  {
    "id": "search.action.replaceAll",
    "key": "ctrl+alt+enter",
    "when": "replaceActive && searchViewletVisible && !findWidgetVisible"
  },
  {
    "id": "_executeWorkspaceSymbolProvider"
  },
  {
    "id": "cleanSearchEditorState"
  },
  {
    "id": "search.searchEditor.action.deleteFileResults",
    "metadata": {
      "description": {
        "value": "Delete File Results",
        "original": "Delete File Results"
      }
    },
    "key": "ctrl+shift+backspace",
    "when": "inSearchEditor"
  },
  {
    "id": "search.action.openNewEditor",
    "metadata": {
      "description": "Open a new search editor. Arguments passed can include variables like ${relativeFileDirname}.",
      "args": [
        {
          "name": "Open new Search Editor args",
          "schema": {
            "properties": {
              "query": {
                "type": "string"
              },
              "filesToInclude": {
                "type": "string"
              },
              "filesToExclude": {
                "type": "string"
              },
              "contextLines": {
                "type": "number"
              },
              "matchWholeWord": {
                "type": "boolean"
              },
              "isCaseSensitive": {
                "type": "boolean"
              },
              "isRegexp": {
                "type": "boolean"
              },
              "useExcludeSettingsAndIgnoreFiles": {
                "type": "boolean"
              },
              "showIncludesExcludes": {
                "type": "boolean"
              },
              "triggerSearch": {
                "type": "boolean"
              },
              "focusResults": {
                "type": "boolean"
              },
              "onlyOpenEditors": {
                "type": "boolean"
              }
            }
          }
        }
      ]
    }
  },
  {
    "id": "search.action.openEditor",
    "metadata": {
      "description": "Open a new search editor. Arguments passed can include variables like ${relativeFileDirname}.",
      "args": [
        {
          "name": "Open new Search Editor args",
          "schema": {
            "properties": {
              "query": {
                "type": "string"
              },
              "filesToInclude": {
                "type": "string"
              },
              "filesToExclude": {
                "type": "string"
              },
              "contextLines": {
                "type": "number"
              },
              "matchWholeWord": {
                "type": "boolean"
              },
              "isCaseSensitive": {
                "type": "boolean"
              },
              "isRegexp": {
                "type": "boolean"
              },
              "useExcludeSettingsAndIgnoreFiles": {
                "type": "boolean"
              },
              "showIncludesExcludes": {
                "type": "boolean"
              },
              "triggerSearch": {
                "type": "boolean"
              },
              "focusResults": {
                "type": "boolean"
              },
              "onlyOpenEditors": {
                "type": "boolean"
              }
            }
          }
        }
      ]
    }
  },
  {
    "id": "search.action.openNewEditorToSide",
    "metadata": {
      "description": "Open a new search editor. Arguments passed can include variables like ${relativeFileDirname}.",
      "args": [
        {
          "name": "Open new Search Editor args",
          "schema": {
            "properties": {
              "query": {
                "type": "string"
              },
              "filesToInclude": {
                "type": "string"
              },
              "filesToExclude": {
                "type": "string"
              },
              "contextLines": {
                "type": "number"
              },
              "matchWholeWord": {
                "type": "boolean"
              },
              "isCaseSensitive": {
                "type": "boolean"
              },
              "isRegexp": {
                "type": "boolean"
              },
              "useExcludeSettingsAndIgnoreFiles": {
                "type": "boolean"
              },
              "showIncludesExcludes": {
                "type": "boolean"
              },
              "triggerSearch": {
                "type": "boolean"
              },
              "focusResults": {
                "type": "boolean"
              },
              "onlyOpenEditors": {
                "type": "boolean"
              }
            }
          }
        }
      ]
    }
  },
  {
    "id": "search.action.openInEditor",
    "metadata": {
      "description": {
        "value": "Open Results in Editor",
        "original": "Open Results in Editor"
      }
    },
    "key": "alt+enter",
    "when": "hasSearchResult && searchViewletFocus"
  },
  {
    "id": "rerunSearchEditorSearch",
    "metadata": {
      "description": {
        "value": "Search Again",
        "original": "Search Again"
      }
    },
    "key": "ctrl+shift+r",
    "when": "inSearchEditor"
  },
  {
    "id": "search.action.focusQueryEditorWidget",
    "metadata": {
      "description": {
        "value": "Focus Search Editor Input",
        "original": "Focus Search Editor Input"
      }
    },
    "key": "escape",
    "when": "inSearchEditor"
  },
  {
    "id": "search.action.focusFilesToInclude",
    "metadata": {
      "description": {
        "value": "Focus Search Editor Files to Include",
        "original": "Focus Search Editor Files to Include"
      }
    }
  },
  {
    "id": "search.action.focusFilesToExclude",
    "metadata": {
      "description": {
        "value": "Focus Search Editor Files to Exclude",
        "original": "Focus Search Editor Files to Exclude"
      }
    }
  },
  {
    "id": "toggleSearchEditorCaseSensitive",
    "metadata": {
      "description": {
        "value": "Toggle Match Case",
        "original": "Toggle Match Case"
      }
    },
    "key": "alt+c",
    "when": "inSearchEditor && searchInputBoxFocus"
  },
  {
    "id": "toggleSearchEditorWholeWord",
    "metadata": {
      "description": {
        "value": "Toggle Match Whole Word",
        "original": "Toggle Match Whole Word"
      }
    },
    "key": "alt+w",
    "when": "inSearchEditor && searchInputBoxFocus"
  },
  {
    "id": "toggleSearchEditorRegex",
    "metadata": {
      "description": {
        "value": "Toggle Use Regular Expression",
        "original": "Toggle Use Regular Expression"
      }
    },
    "key": "alt+r",
    "when": "inSearchEditor && searchInputBoxFocus"
  },
  {
    "id": "toggleSearchEditorContextLines",
    "metadata": {
      "description": {
        "value": "Toggle Context Lines",
        "original": "Toggle Context Lines"
      }
    },
    "key": "alt+l",
    "when": "inSearchEditor"
  },
  {
    "id": "increaseSearchEditorContextLines",
    "metadata": {
      "description": {
        "value": "Increase Context Lines",
        "original": "Increase Context Lines"
      }
    },
    "key": "alt+=",
    "when": "inSearchEditor"
  },
  {
    "id": "decreaseSearchEditorContextLines",
    "metadata": {
      "description": {
        "value": "Decrease Context Lines",
        "original": "Decrease Context Lines"
      }
    },
    "key": "alt+-",
    "when": "inSearchEditor"
  },
  {
    "id": "selectAllSearchEditorMatches",
    "metadata": {
      "description": {
        "value": "Select All Matches",
        "original": "Select All Matches"
      }
    },
    "key": "ctrl+shift+l",
    "when": "inSearchEditor"
  },
  {
    "id": "search.action.openNewEditorFromView",
    "metadata": {
      "description": "Open New Search Editor"
    }
  },
  {
    "id": "editor.action.dirtydiff.previous",
    "key": "shift+alt+f3",
    "when": "editorTextFocus && !textCompareEditorActive"
  },
  {
    "id": "editor.action.dirtydiff.next",
    "key": "alt+f3",
    "when": "editorTextFocus && !textCompareEditorActive"
  },
  {
    "id": "workbench.action.editor.previousChange",
    "key": "shift+alt+f5",
    "when": "editorTextFocus && !textCompareEditorActive"
  },
  {
    "id": "workbench.action.editor.nextChange",
    "key": "alt+f5",
    "when": "editorTextFocus && !textCompareEditorActive"
  },
  {
    "id": "closeDirtyDiff",
    "key": "escape",
    "when": "dirtyDiffVisible"
  },
  {
    "id": "workbench.scm.action.setListViewMode",
    "metadata": {
      "description": "View as List"
    }
  },
  {
    "id": "workbench.scm.action.setTreeViewMode",
    "metadata": {
      "description": "View as Tree"
    }
  },
  {
    "id": "workbench.scm.action.setListViewModeNavigation",
    "metadata": {
      "description": "View as List"
    }
  },
  {
    "id": "workbench.scm.action.setTreeViewModeNavigation",
    "metadata": {
      "description": "View as Tree"
    }
  },
  {
    "id": "workbench.scm.action.repositories.setSortKey.discoveryTime",
    "metadata": {
      "description": "Sort by Discovery Time"
    }
  },
  {
    "id": "workbench.scm.action.repositories.setSortKey.name",
    "metadata": {
      "description": "Sort by Name"
    }
  },
  {
    "id": "workbench.scm.action.repositories.setSortKey.path",
    "metadata": {
      "description": "Sort by Path"
    }
  },
  {
    "id": "workbench.scm.action.setSortKey.name",
    "metadata": {
      "description": "Sort Changes by Name"
    }
  },
  {
    "id": "workbench.scm.action.setSortKey.path",
    "metadata": {
      "description": "Sort Changes by Path"
    }
  },
  {
    "id": "workbench.scm.action.setSortKey.status",
    "metadata": {
      "description": "Sort Changes by Status"
    }
  },
  {
    "id": "workbench.scm.action.collapseAllRepositories",
    "metadata": {
      "description": "Collapse All Repositories"
    }
  },
  {
    "id": "workbench.scm.action.expandAllRepositories",
    "metadata": {
      "description": "Expand All Repositories"
    }
  },
  {
    "id": "workbench.scm.action.graph.pickRepository",
    "metadata": {
      "description": "Repository Picker"
    }
  },
  {
    "id": "workbench.scm.action.graph.pickHistoryItemRefs",
    "metadata": {
      "description": "History Item Reference Picker"
    }
  },
  {
    "id": "workbench.scm.action.graph.revealCurrentHistoryItem",
    "metadata": {
      "description": "Go to Current History Item"
    }
  },
  {
    "id": "workbench.scm.action.graph.refresh",
    "metadata": {
      "description": "Refresh"
    }
  },
  {
    "id": "workbench.scm.action.graph.viewChanges",
    "metadata": {
      "description": "View Changes"
    }
  },
  {
    "id": "scm.acceptInput",
    "metadata": {
      "description": "Source Control: Accept Input",
      "args": []
    },
    "key": "ctrl+enter",
    "when": "scmRepository"
  },
  {
    "id": "scm.clearInput",
    "key": "escape",
    "when": "scmRepository && !suggestWidgetVisible"
  },
  {
    "id": "scm.viewNextCommit",
    "key": "down",
    "when": "scmInputIsInLastPosition && scmRepository && !suggestWidgetVisible"
  },
  {
    "id": "scm.viewPreviousCommit",
    "key": "up",
    "when": "scmInputIsInFirstPosition && scmRepository && !suggestWidgetVisible"
  },
  {
    "id": "scm.forceViewNextCommit",
    "key": "alt+down",
    "when": "scmRepository"
  },
  {
    "id": "scm.forceViewPreviousCommit",
    "key": "alt+up",
    "when": "scmRepository"
  },
  {
    "id": "scm.openInIntegratedTerminal"
  },
  {
    "id": "scm.openInTerminal"
  },
  {
    "id": "workbench.scm.action.focusPreviousInput"
  },
  {
    "id": "workbench.scm.action.focusNextInput"
  },
  {
    "id": "workbench.scm.action.focusPreviousResourceGroup"
  },
  {
    "id": "workbench.scm.action.focusNextResourceGroup"
  },
  {
    "id": "callStack.collapse",
    "metadata": {
      "description": "Collapse All"
    }
  },
  {
    "id": "debug.action.openDisassemblyView",
    "metadata": {
      "description": {
        "value": "Open Disassembly View",
        "original": "Open Disassembly View",
        "mnemonicTitle": "&&DisassemblyView"
      }
    }
  },
  {
    "id": "debug.action.toggleDisassemblyViewSourceCode",
    "metadata": {
      "description": {
        "value": "Shows or hides source code in disassembly",
        "original": "Shows or hides source code in disassembly"
      }
    }
  },
  {
    "id": "editor.debug.action.toggleBreakpoint",
    "metadata": {
      "description": {
        "value": "Debug: Toggle Breakpoint",
        "original": "Debug: Toggle Breakpoint",
        "mnemonicTitle": "Toggle &&Breakpoint"
      }
    },
    "key": "f9",
    "when": "debuggersAvailable && disassemblyViewFocus || debuggersAvailable && editorTextFocus"
  },
  {
    "id": "editor.debug.action.conditionalBreakpoint"
  },
  {
    "id": "editor.debug.action.addLogPoint"
  },
  {
    "id": "editor.debug.action.triggerByBreakpoint"
  },
  {
    "id": "editor.debug.action.editBreakpoint"
  },
  {
    "id": "editor.debug.action.runToCursor"
  },
  {
    "id": "editor.debug.action.stepIntoTargets"
  },
  {
    "id": "editor.debug.action.selectionToRepl"
  },
  {
    "id": "editor.debug.action.selectionToWatch"
  },
  {
    "id": "editor.debug.action.showDebugHover",
    "key": "ctrl+k ctrl+i",
    "when": "editorTextFocus && inDebugMode"
  },
  {
    "id": "editor.debug.action.goToNextBreakpoint"
  },
  {
    "id": "editor.debug.action.goToPreviousBreakpoint"
  },
  {
    "id": "editor.debug.action.closeExceptionWidget",
    "key": "escape",
    "when": "exceptionWidgetVisible"
  },
  {
    "id": "workbench.debug.viewlet.action.copyValue",
    "metadata": {
      "description": {
        "value": "Copy Value",
        "original": "Copy Value"
      }
    }
  },
  {
    "id": "workbench.debug.viewlet.action.viewMemory"
  },
  {
    "id": "debug.breakWhenValueChanges"
  },
  {
    "id": "debug.breakWhenValueIsAccessed"
  },
  {
    "id": "debug.breakWhenValueIsRead"
  },
  {
    "id": "debug.copyEvaluatePath",
    "metadata": {
      "description": {
        "value": "Copy as Expression",
        "original": "Copy as Expression"
      }
    }
  },
  {
    "id": "debug.addToWatchExpressions",
    "metadata": {
      "description": {
        "value": "Add to Watch",
        "original": "Add to Watch"
      }
    }
  },
  {
    "id": "variables.collapse",
    "metadata": {
      "description": "Collapse All"
    }
  },
  {
    "id": "_executeInlineValueProvider"
  },
  {
    "id": "workbench.action.debug.configure",
    "metadata": {
      "description": {
        "value": "Opens the file used to configure how your program is debugged",
        "original": "Opens the file used to configure how your program is debugged"
      }
    }
  },
  {
    "id": "debug.toggleReplIgnoreFocus",
    "metadata": {
      "description": "Debug Console"
    }
  },
  {
    "id": "loadedScripts.collapse",
    "metadata": {
      "description": "Collapse All"
    }
  },
  {
    "id": "watch.collapse",
    "metadata": {
      "description": "Collapse All"
    }
  },
  {
    "id": "workbench.debug.viewlet.action.addWatchExpression",
    "metadata": {
      "description": "Add Expression"
    }
  },
  {
    "id": "workbench.debug.viewlet.action.removeAllWatchExpressions",
    "metadata": {
      "description": "Remove All Expressions"
    }
  },
  {
    "id": "workbench.debug.viewlet.action.copyWorkspaceVariableValue",
    "metadata": {
      "description": "Copy Value"
    }
  },
  {
    "id": "_executeNotebookVariableProvider",
    "metadata": {
      "description": "Execute Notebook Variable Provider"
    }
  },
  {
    "id": "problems.action.open",
    "key": "enter",
    "when": "problemFocus"
  },
  {
    "id": "problems.action.openToSide",
    "key": "ctrl+enter",
    "when": "problemFocus"
  },
  {
    "id": "workbench.action.showErrorsWarnings"
  },
  {
    "id": "problems.action.showQuickFixes",
    "key": "ctrl+.",
    "when": "problemFocus"
  },
  {
    "id": "workbench.actions.table.workbench.panel.markers.view.viewAsTree",
    "metadata": {
      "description": "View as Tree"
    }
  },
  {
    "id": "workbench.actions.table.workbench.panel.markers.view.viewAsTable",
    "metadata": {
      "description": "View as Table"
    }
  },
  {
    "id": "workbench.actions.workbench.panel.markers.view.toggleErrors",
    "metadata": {
      "description": "Show Errors"
    }
  },
  {
    "id": "workbench.actions.workbench.panel.markers.view.toggleWarnings",
    "metadata": {
      "description": "Show Warnings"
    }
  },
  {
    "id": "workbench.actions.workbench.panel.markers.view.toggleInfos",
    "metadata": {
      "description": "Show Infos"
    }
  },
  {
    "id": "workbench.actions.workbench.panel.markers.view.toggleActiveFile",
    "metadata": {
      "description": "Show Active File Only"
    }
  },
  {
    "id": "workbench.actions.workbench.panel.markers.view.toggleExcludedFiles",
    "metadata": {
      "description": "Show Excluded Files"
    }
  },
  {
    "id": "workbench.action.problems.focus",
    "metadata": {
      "description": {
        "value": "Focus Problems (Errors, Warnings, Infos)",
        "original": "Focus Problems (Errors, Warnings, Infos)"
      }
    }
  },
  {
    "id": "problems.action.copy",
    "metadata": {
      "description": {
        "value": "Copy",
        "original": "Copy"
      }
    },
    "key": "ctrl+c",
    "when": "problemsVisibility && !relatedInformationFocus && focusedView == 'workbench.panel.markers.view'"
  },
  {
    "id": "problems.action.copyMessage",
    "metadata": {
      "description": {
        "value": "Copy Message",
        "original": "Copy Message"
      }
    }
  },
  {
    "id": "problems.action.copyRelatedInformationMessage",
    "metadata": {
      "description": {
        "value": "Copy Message",
        "original": "Copy Message"
      }
    }
  },
  {
    "id": "problems.action.focusProblemsFromFilter",
    "metadata": {
      "description": "Focus problems view"
    },
    "key": "ctrl+down",
    "when": "problemsFilterFocus"
  },
  {
    "id": "problems.action.focusFilter",
    "metadata": {
      "description": "Focus problems filter"
    },
    "key": "ctrl+f",
    "when": "focusedView == 'workbench.panel.markers.view'"
  },
  {
    "id": "problems.action.showMultilineMessage",
    "metadata": {
      "description": {
        "value": "Show message in multiple lines",
        "original": "Show message in multiple lines"
      }
    }
  },
  {
    "id": "problems.action.showSinglelineMessage",
    "metadata": {
      "description": {
        "value": "Show message in single line",
        "original": "Show message in single line"
      }
    }
  },
  {
    "id": "problems.action.clearFilterText",
    "metadata": {
      "description": "Clear filters text"
    },
    "key": "escape",
    "when": "problemsFilterFocus"
  },
  {
    "id": "workbench.actions.treeView.workbench.panel.markers.view.collapseAll",
    "metadata": {
      "description": "Collapse All"
    }
  },
  {
    "id": "workbench.actions.view.toggleProblems",
    "metadata": {
      "description": "Toggle Problems (Errors, Warnings, Infos)"
    }
  },
  {
    "id": "merge.openResult",
    "metadata": {
      "description": {
        "value": "Open File",
        "original": "Open File"
      }
    }
  },
  {
    "id": "merge.mixedLayout",
    "metadata": {
      "description": {
        "value": "Mixed Layout",
        "original": "Mixed Layout"
      }
    }
  },
  {
    "id": "merge.columnLayout",
    "metadata": {
      "description": {
        "value": "Column Layout",
        "original": "Column Layout"
      }
    }
  },
  {
    "id": "_open.mergeEditor",
    "metadata": {
      "description": {
        "value": "Open Merge Editor",
        "original": "Open Merge Editor"
      }
    }
  },
  {
    "id": "merge.openBaseEditor",
    "metadata": {
      "description": {
        "value": "Open Base File",
        "original": "Open Base File"
      }
    }
  },
  {
    "id": "merge.showNonConflictingChanges",
    "metadata": {
      "description": {
        "value": "Show Non-Conflicting Changes",
        "original": "Show Non-Conflicting Changes"
      }
    }
  },
  {
    "id": "merge.showBase",
    "metadata": {
      "description": {
        "value": "Show Base",
        "original": "Show Base"
      }
    }
  },
  {
    "id": "merge.showBaseTop",
    "metadata": {
      "description": {
        "value": "Show Base Top",
        "original": "Show Base Top"
      }
    }
  },
  {
    "id": "merge.showBaseCenter",
    "metadata": {
      "description": {
        "value": "Show Base Center",
        "original": "Show Base Center"
      }
    }
  },
  {
    "id": "merge.goToNextUnhandledConflict",
    "metadata": {
      "description": {
        "value": "Go to Next Unhandled Conflict",
        "original": "Go to Next Unhandled Conflict"
      }
    }
  },
  {
    "id": "merge.goToPreviousUnhandledConflict",
    "metadata": {
      "description": {
        "value": "Go to Previous Unhandled Conflict",
        "original": "Go to Previous Unhandled Conflict"
      }
    }
  },
  {
    "id": "merge.toggleActiveConflictInput1",
    "metadata": {
      "description": {
        "value": "Toggle Current Conflict from Left",
        "original": "Toggle Current Conflict from Left"
      }
    }
  },
  {
    "id": "merge.toggleActiveConflictInput2",
    "metadata": {
      "description": {
        "value": "Toggle Current Conflict from Right",
        "original": "Toggle Current Conflict from Right"
      }
    }
  },
  {
    "id": "mergeEditor.compareInput1WithBase",
    "metadata": {
      "description": {
        "value": "Compare Input 1 With Base",
        "original": "Compare Input 1 With Base"
      }
    }
  },
  {
    "id": "mergeEditor.compareInput2WithBase",
    "metadata": {
      "description": {
        "value": "Compare Input 2 With Base",
        "original": "Compare Input 2 With Base"
      }
    }
  },
  {
    "id": "merge.acceptAllInput1",
    "metadata": {
      "description": {
        "value": "Accept All Changes from Left",
        "original": "Accept All Changes from Left"
      }
    }
  },
  {
    "id": "merge.acceptAllInput2",
    "metadata": {
      "description": {
        "value": "Accept All Changes from Right",
        "original": "Accept All Changes from Right"
      }
    }
  },
  {
    "id": "mergeEditor.resetResultToBaseAndAutoMerge",
    "metadata": {
      "description": {
        "value": "Reset Result",
        "original": "Reset Result"
      }
    }
  },
  {
    "id": "mergeEditor.acceptMerge",
    "metadata": {
      "description": {
        "value": "Complete Merge",
        "original": "Complete Merge"
      }
    }
  },
  {
    "id": "mergeEditor.resetCloseWithConflictsChoice",
    "metadata": {
      "description": {
        "value": "Reset Choice for 'Close with Conflicts'",
        "original": "Reset Choice for 'Close with Conflicts'"
      }
    }
  },
  {
    "id": "merge.dev.copyContentsJson",
    "metadata": {
      "description": {
        "value": "Copy Merge Editor State as JSON",
        "original": "Copy Merge Editor State as JSON"
      }
    }
  },
  {
    "id": "merge.dev.saveContentsToFolder",
    "metadata": {
      "description": {
        "value": "Save Merge Editor State to Folder",
        "original": "Save Merge Editor State to Folder"
      }
    }
  },
  {
    "id": "merge.dev.loadContentsFromFolder",
    "metadata": {
      "description": {
        "value": "Load Merge Editor State from Folder",
        "original": "Load Merge Editor State from Folder"
      }
    }
  },
  {
    "id": "multiDiffEditor.goToFile",
    "metadata": {
      "description": {
        "value": "Open File",
        "original": "Open File"
      }
    }
  },
  {
    "id": "multiDiffEditor.collapseAll",
    "metadata": {
      "description": {
        "value": "Collapse All Diffs",
        "original": "Collapse All Diffs"
      }
    }
  },
  {
    "id": "multiDiffEditor.expandAll",
    "metadata": {
      "description": {
        "value": "Expand All Diffs",
        "original": "Expand All Diffs"
      }
    }
  },
  {
    "id": "_workbench.openScmMultiDiffEditor",
    "metadata": {
      "description": {
        "value": "View Changes",
        "original": "View Changes"
      }
    }
  },
  {
    "id": "_executeMappedEditsProvider"
  },
  {
    "id": "runCommands",
    "metadata": {
      "description": "Run several commands",
      "args": [
        {
          "name": "args",
          "schema": {
            "type": "object",
            "required": [
              "commands"
            ],
            "properties": {
              "commands": {
                "type": "array",
                "description": "Commands to run",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "vscode://schemas/keybindings#/definitions/commandNames"
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "object",
                      "required": [
                        "command"
                      ],
                      "properties": {
                        "command": {
                          "anyOf": [
                            {
                              "$ref": "vscode://schemas/keybindings#/definitions/commandNames"
                            },
                            {
                              "type": "string"
                            }
                          ]
                        }
                      },
                      "$ref": "vscode://schemas/keybindings#/definitions/commandsSchemas"
                    }
                  ]
                }
              }
            }
          }
        }
      ]
    }
  },
  {
    "id": "editor.action.nextCommentThreadAction",
    "key": "alt+f9"
  },
  {
    "id": "editor.action.previousCommentThreadAction",
    "key": "shift+alt+f9"
  },
  {
    "id": "editor.action.nextCommentedRangeAction",
    "metadata": {
      "description": {
        "value": "Go to Next Commented Range",
        "original": "Go to Next Commented Range"
      }
    },
    "key": "alt+f10",
    "when": "activeEditorHasCommentingRange"
  },
  {
    "id": "editor.action.previousCommentedRangeAction",
    "metadata": {
      "description": {
        "value": "Go to Previous Commented Range",
        "original": "Go to Previous Commented Range"
      }
    },
    "key": "shift+alt+f10",
    "when": "activeEditorHasCommentingRange"
  },
  {
    "id": "editor.action.nextCommentingRange",
    "metadata": {
      "description": {
        "value": "Go to Next Commenting Range",
        "original": "Go to Next Commenting Range"
      }
    },
    "key": "ctrl+k ctrl+alt+down",
    "when": "accessibilityModeEnabled && commentFocused || accessibilityModeEnabled && editorFocus || accessibilityHelpIsShown && accessibilityModeEnabled && accessibleViewCurrentProviderId == 'comments'"
  },
  {
    "id": "editor.action.previousCommentingRange",
    "metadata": {
      "description": {
        "value": "Go to Previous Commenting Range",
        "original": "Go to Previous Commenting Range"
      }
    },
    "key": "ctrl+k ctrl+alt+up",
    "when": "accessibilityModeEnabled && commentFocused || accessibilityModeEnabled && editorFocus || accessibilityHelpIsShown && accessibilityModeEnabled && accessibleViewCurrentProviderId == 'comments'"
  },
  {
    "id": "workbench.action.toggleCommenting",
    "metadata": {
      "description": {
        "value": "Toggle Editor Commenting",
        "original": "Toggle Editor Commenting"
      }
    }
  },
  {
    "id": "workbench.action.addComment",
    "metadata": {
      "description": {
        "value": "Add Comment on Current Selection",
        "original": "Add Comment on Current Selection"
      }
    },
    "key": "ctrl+k ctrl+alt+c"
  },
  {
    "id": "workbench.action.focusCommentOnCurrentLine",
    "metadata": {
      "description": {
        "value": "Focus Comment on Current Line",
        "original": "Focus Comment on Current Line"
      }
    }
  },
  {
    "id": "workbench.action.collapseAllComments",
    "metadata": {
      "description": {
        "value": "Collapse All Comments",
        "original": "Collapse All Comments"
      }
    }
  },
  {
    "id": "workbench.action.expandAllComments",
    "metadata": {
      "description": {
        "value": "Expand All Comments",
        "original": "Expand All Comments"
      }
    }
  },
  {
    "id": "workbench.action.expandUnresolvedComments",
    "metadata": {
      "description": {
        "value": "Expand Unresolved Comments",
        "original": "Expand Unresolved Comments"
      }
    }
  },
  {
    "id": "editor.action.submitComment",
    "key": "ctrl+enter",
    "when": "commentEditorFocused"
  },
  {
    "id": "workbench.action.hideComment",
    "key": "escape",
    "when": "commentEditorFocused"
  },
  {
    "id": "comments.collapse",
    "metadata": {
      "description": "Collapse All"
    }
  },
  {
    "id": "comments.expand",
    "metadata": {
      "description": "Expand All"
    }
  },
  {
    "id": "comments.reply",
    "metadata": {
      "description": "Reply"
    }
  },
  {
    "id": "workbench.action.url.openUrl",
    "metadata": {
      "description": {
        "value": "Open URL",
        "original": "Open URL"
      }
    }
  },
  {
    "id": "workbench.action.manageTrustedDomain"
  },
  {
    "id": "editor.action.webvieweditor.showFind",
    "metadata": {
      "description": "Show find"
    },
    "key": "ctrl+f",
    "when": "webviewFindWidgetEnabled && !editorFocus && activeEditor == 'WebviewEditor'"
  },
  {
    "id": "editor.action.webvieweditor.hideFind",
    "metadata": {
      "description": "Stop find"
    },
    "key": "escape",
    "when": "webviewFindWidgetVisible && !editorFocus && activeEditor == 'WebviewEditor'"
  },
  {
    "id": "editor.action.webvieweditor.findNext",
    "metadata": {
      "description": "Find next"
    },
    "key": "enter",
    "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'"
  },
  {
    "id": "editor.action.webvieweditor.findPrevious",
    "metadata": {
      "description": "Find previous"
    },
    "key": "shift+enter",
    "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'"
  },
  {
    "id": "workbench.action.webview.reloadWebviewAction",
    "metadata": {
      "description": {
        "value": "Reload Webviews",
        "original": "Reload Webviews"
      }
    }
  },
  {
    "id": "editor.action.extensioneditor.showfind",
    "metadata": {
      "description": "Find"
    },
    "key": "ctrl+f",
    "when": "!editorFocus && activeEditor == 'workbench.editor.extension'"
  },
  {
    "id": "editor.action.extensioneditor.findNext",
    "metadata": {
      "description": "Find Next"
    },
    "key": "enter",
    "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'"
  },
  {
    "id": "editor.action.extensioneditor.findPrevious",
    "metadata": {
      "description": "Find Previous"
    },
    "key": "shift+enter",
    "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'"
  },
  {
    "id": "_extensions.manage"
  },
  {
    "id": "extension.open"
  },
  {
    "id": "workbench.extensions.installExtension",
    "metadata": {
      "description": "Install the given extension",
      "args": [
        {
          "name": "extensionIdOrVSIXUri",
          "description": "Extension id or VSIX resource uri"
        },
        {
          "name": "options",
          "description": "(optional) Options for installing the extension. Object with the following properties: `installOnlyNewlyAddedFromExtensionPackVSIX`: When enabled, VS Code installs only newly added extensions from the extension pack VSIX. This option is considered only when installing VSIX. ",
          "isOptional": true,
          "schema": {
            "type": "object",
            "properties": {
              "installOnlyNewlyAddedFromExtensionPackVSIX": {
                "type": "boolean",
                "description": "When enabled, VS Code installs only newly added extensions from the extension pack VSIX. This option is considered only while installing a VSIX.",
                "default": false
              },
              "installPreReleaseVersion": {
                "type": "boolean",
                "description": "When enabled, VS Code installs the pre-release version of the extension if available.",
                "default": false
              },
              "donotSync": {
                "type": "boolean",
                "description": "When enabled, VS Code do not sync this extension when Settings Sync is on.",
                "default": false
              },
              "justification": {
                "type": [
                  "string",
                  "object"
                ],
                "description": "Justification for installing the extension. This is a string or an object that can be used to pass any information to the installation handlers. i.e. `{reason: 'This extension wants to open a URI', action: 'Open URI'}` will show a message box with the reason and action upon install."
              },
              "enable": {
                "type": "boolean",
                "description": "When enabled, the extension will be enabled if it is installed but disabled. If the extension is already enabled, this has no effect.",
                "default": false
              },
              "context": {
                "type": "object",
                "description": "Context for the installation. This is a JSON object that can be used to pass any information to the installation handlers. i.e. `{skipWalkthrough: true}` will skip opening the walkthrough upon install."
              }
            }
          }
        }
      ]
    }
  },
  {
    "id": "workbench.extensions.uninstallExtension",
    "metadata": {
      "description": "Uninstall the given extension",
      "args": [
        {
          "name": "Id of the extension to uninstall",
          "schema": {
            "type": "string"
          }
        }
      ]
    }
  },
  {
    "id": "workbench.extensions.search",
    "metadata": {
      "description": "Search for a specific extension",
      "args": [
        {
          "name": "Query to use in search",
          "schema": {
            "type": "string"
          }
        }
      ]
    }
  },
  {
    "id": "workbench.action.showRuntimeExtensions",
    "metadata": {
      "description": {
        "value": "Show Running Extensions",
        "original": "Show Running Extensions"
      }
    }
  },
  {
    "id": "workbench.action.terminal.newInActiveWorkspace",
    "metadata": {
      "description": {
        "value": "Create New Terminal (In Active Workspace)",
        "original": "Create New Terminal (In Active Workspace)"
      }
    }
  },
  {
    "id": "workbench.action.terminal.newWithProfile",
    "metadata": {
      "description": "workbench.action.terminal.newWithProfile",
      "args": [
        {
          "name": "args",
          "schema": {
            "type": "object",
            "required": [
              "profileName"
            ],
            "properties": {
              "profileName": {
                "description": "The name of the profile to create",
                "type": "string",
                "enum": [
                  null
                ],
                "markdownEnumDescriptions": [
                  "Automatically detect the default"
                ]
              },
              "location": {
                "description": "Where to create the terminal",
                "type": "string",
                "enum": [
                  "view",
                  "editor"
                ],
                "enumDescriptions": [
                  "Create the terminal in the terminal view",
                  "Create the terminal in the editor"
                ]
              }
            }
          }
        }
      ]
    }
  },
  {
    "id": "workbench.action.createTerminalEditor",
    "metadata": {
      "description": {
        "value": "Create New Terminal in Editor Area",
        "original": "Create New Terminal in Editor Area"
      }
    }
  },
  {
    "id": "workbench.action.createTerminalEditorSameGroup",
    "metadata": {
      "description": {
        "value": "Create New Terminal in Editor Area",
        "original": "Create New Terminal in Editor Area"
      }
    }
  },
  {
    "id": "workbench.action.createTerminalEditorSide",
    "metadata": {
      "description": {
        "value": "Create New Terminal in Editor Area to the Side",
        "original": "Create New Terminal in Editor Area to the Side"
      }
    }
  },
  {
    "id": "workbench.action.terminal.moveToEditor",
    "metadata": {
      "description": {
        "value": "Move Terminal into Editor Area",
        "original": "Move Terminal into Editor Area"
      }
    }
  },
  {
    "id": "workbench.action.terminal.moveIntoNewWindow",
    "metadata": {
      "description": {
        "value": "Move Terminal into New Window",
        "original": "Move Terminal into New Window"
      }
    }
  },
  {
    "id": "workbench.action.terminal.moveToTerminalPanel",
    "metadata": {
      "description": {
        "value": "Move Terminal into Panel",
        "original": "Move Terminal into Panel"
      }
    }
  },
  {
    "id": "workbench.action.terminal.focusPreviousPane",
    "metadata": {
      "description": {
        "value": "Focus Previous Terminal in Terminal Group",
        "original": "Focus Previous Terminal in Terminal Group"
      }
    },
    "key": "alt+left",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "id": "workbench.action.terminal.focusNextPane",
    "metadata": {
      "description": {
        "value": "Focus Next Terminal in Terminal Group",
        "original": "Focus Next Terminal in Terminal Group"
      }
    },
    "key": "alt+right",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "id": "workbench.action.terminal.resizePaneLeft",
    "metadata": {
      "description": {
        "value": "Resize Terminal Left",
        "original": "Resize Terminal Left"
      }
    }
  },
  {
    "id": "workbench.action.terminal.resizePaneRight",
    "metadata": {
      "description": {
        "value": "Resize Terminal Right",
        "original": "Resize Terminal Right"
      }
    }
  },
  {
    "id": "workbench.action.terminal.resizePaneUp",
    "metadata": {
      "description": {
        "value": "Resize Terminal Up",
        "original": "Resize Terminal Up"
      }
    }
  },
  {
    "id": "workbench.action.terminal.resizePaneDown",
    "metadata": {
      "description": {
        "value": "Resize Terminal Down",
        "original": "Resize Terminal Down"
      }
    }
  },
  {
    "id": "workbench.action.terminal.focus",
    "metadata": {
      "description": {
        "value": "Focus Terminal",
        "original": "Focus Terminal"
      }
    },
    "key": "ctrl+down",
    "when": "accessibilityModeEnabled && accessibleViewOnLastLine && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibilityModeEnabled && accessibleViewOnLastLine && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
  },
  {
    "id": "workbench.action.terminal.focusTabs",
    "metadata": {
      "description": {
        "value": "Focus Terminal Tabs View",
        "original": "Focus Terminal Tabs View"
      }
    },
    "key": "ctrl+shift+\\",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus"
  },
  {
    "id": "workbench.action.terminal.focusNext",
    "metadata": {
      "description": {
        "value": "Focus Next Terminal Group",
        "original": "Focus Next Terminal Group"
      }
    },
    "key": "ctrl+pagedown",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
  },
  {
    "id": "workbench.action.terminal.focusPrevious",
    "metadata": {
      "description": {
        "value": "Focus Previous Terminal Group",
        "original": "Focus Previous Terminal Group"
      }
    },
    "key": "ctrl+pageup",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
  },
  {
    "id": "workbench.action.terminal.runSelectedText",
    "metadata": {
      "description": {
        "value": "Run Selected Text In Active Terminal",
        "original": "Run Selected Text In Active Terminal"
      }
    }
  },
  {
    "id": "workbench.action.terminal.runActiveFile",
    "metadata": {
      "description": {
        "value": "Run Active File In Active Terminal",
        "original": "Run Active File In Active Terminal"
      }
    }
  },
  {
    "id": "workbench.action.terminal.scrollDown",
    "metadata": {
      "description": {
        "value": "Scroll Down (Line)",
        "original": "Scroll Down (Line)"
      }
    },
    "key": "ctrl+alt+pagedown",
    "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"
  },
  {
    "id": "workbench.action.terminal.scrollDownPage",
    "metadata": {
      "description": {
        "value": "Scroll Down (Page)",
        "original": "Scroll Down (Page)"
      }
    },
    "key": "shift+pagedown",
    "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"
  },
  {
    "id": "workbench.action.terminal.scrollToBottom",
    "metadata": {
      "description": {
        "value": "Scroll to Bottom",
        "original": "Scroll to Bottom"
      }
    },
    "key": "ctrl+end",
    "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"
  },
  {
    "id": "workbench.action.terminal.scrollUp",
    "metadata": {
      "description": {
        "value": "Scroll Up (Line)",
        "original": "Scroll Up (Line)"
      }
    },
    "key": "ctrl+alt+pageup",
    "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"
  },
  {
    "id": "workbench.action.terminal.scrollUpPage",
    "metadata": {
      "description": {
        "value": "Scroll Up (Page)",
        "original": "Scroll Up (Page)"
      }
    },
    "key": "shift+pageup",
    "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"
  },
  {
    "id": "workbench.action.terminal.scrollToTop",
    "metadata": {
      "description": {
        "value": "Scroll to Top",
        "original": "Scroll to Top"
      }
    },
    "key": "ctrl+home",
    "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"
  },
  {
    "id": "workbench.action.terminal.clearSelection",
    "metadata": {
      "description": {
        "value": "Clear Selection",
        "original": "Clear Selection"
      }
    },
    "key": "escape",
    "when": "terminalFocusInAny && terminalHasBeenCreated && terminalTextSelected && !terminalFindVisible || terminalFocusInAny && terminalProcessSupported && terminalTextSelected && !terminalFindVisible"
  },
  {
    "id": "workbench.action.terminal.changeIcon",
    "metadata": {
      "description": {
        "value": "Change Icon...",
        "original": "Change Icon..."
      }
    }
  },
  {
    "id": "workbench.action.terminal.changeIconActiveTab",
    "metadata": {
      "description": {
        "value": "Change Icon...",
        "original": "Change Icon..."
      }
    }
  },
  {
    "id": "workbench.action.terminal.changeColor",
    "metadata": {
      "description": {
        "value": "Change Color...",
        "original": "Change Color..."
      }
    }
  },
  {
    "id": "workbench.action.terminal.changeColorActiveTab",
    "metadata": {
      "description": {
        "value": "Change Color...",
        "original": "Change Color..."
      }
    }
  },
  {
    "id": "workbench.action.terminal.rename",
    "metadata": {
      "description": {
        "value": "Rename...",
        "original": "Rename..."
      }
    }
  },
  {
    "id": "workbench.action.terminal.renameActiveTab",
    "metadata": {
      "description": {
        "value": "Rename...",
        "original": "Rename..."
      }
    },
    "key": "f2",
    "when": "terminalHasBeenCreated && terminalTabsFocus && terminalTabsSingularSelection || terminalProcessSupported && terminalTabsFocus && terminalTabsSingularSelection"
  },
  {
    "id": "workbench.action.terminal.detachSession",
    "metadata": {
      "description": {
        "value": "Detach Session",
        "original": "Detach Session"
      }
    }
  },
  {
    "id": "workbench.action.terminal.attachToSession",
    "metadata": {
      "description": {
        "value": "Attach to Session",
        "original": "Attach to Session"
      }
    }
  },
  {
    "id": "workbench.action.terminal.scrollToPreviousCommand",
    "metadata": {
      "description": {
        "value": "Scroll To Previous Command",
        "original": "Scroll To Previous Command"
      }
    },
    "key": "ctrl+up",
    "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled"
  },
  {
    "id": "workbench.action.terminal.scrollToNextCommand",
    "metadata": {
      "description": {
        "value": "Scroll To Next Command",
        "original": "Scroll To Next Command"
      }
    },
    "key": "ctrl+down",
    "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled"
  },
  {
    "id": "workbench.action.terminal.selectToPreviousCommand",
    "metadata": {
      "description": {
        "value": "Select To Previous Command",
        "original": "Select To Previous Command"
      }
    },
    "key": "ctrl+shift+up",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "id": "workbench.action.terminal.selectToNextCommand",
    "metadata": {
      "description": {
        "value": "Select To Next Command",
        "original": "Select To Next Command"
      }
    },
    "key": "ctrl+shift+down",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "id": "workbench.action.terminal.selectToPreviousLine",
    "metadata": {
      "description": {
        "value": "Select To Previous Line",
        "original": "Select To Previous Line"
      }
    }
  },
  {
    "id": "workbench.action.terminal.selectToNextLine",
    "metadata": {
      "description": {
        "value": "Select To Next Line",
        "original": "Select To Next Line"
      }
    }
  },
  {
    "id": "workbench.action.terminal.sendSequence",
    "key": "ctrl+space",
    "when": "config.terminal.integrated.suggest.enabled && terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'"
  },
  {
    "id": "workbench.action.terminal.newWithCwd",
    "metadata": {
      "description": "Create New Terminal Starting in a Custom Working Directory",
      "args": [
        {
          "name": "args",
          "schema": {
            "type": "object",
            "required": [
              "cwd"
            ],
            "properties": {
              "cwd": {
                "description": "The directory to start the terminal at",
                "type": "string"
              }
            }
          }
        }
      ]
    }
  },
  {
    "id": "workbench.action.terminal.renameWithArg",
    "metadata": {
      "description": "Rename the Currently Active Terminal",
      "args": [
        {
          "name": "args",
          "schema": {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "description": "The new name for the terminal",
                "type": "string",
                "minLength": 1
              }
            }
          }
        }
      ]
    }
  },
  {
    "id": "workbench.action.terminal.relaunch",
    "metadata": {
      "description": {
        "value": "Relaunch Active Terminal",
        "original": "Relaunch Active Terminal"
      }
    }
  },
  {
    "id": "workbench.action.terminal.split",
    "metadata": {
      "description": {
        "value": "Split Terminal",
        "original": "Split Terminal",
        "short": "Split"
      }
    },
    "key": "ctrl+shift+5",
    "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile"
  },
  {
    "id": "workbench.action.terminal.splitActiveTab",
    "metadata": {
      "description": {
        "value": "Split Terminal",
        "original": "Split Terminal",
        "short": "Split"
      }
    },
    "key": "ctrl+shift+5",
    "when": "terminalProcessSupported && terminalTabsFocus"
  },
  {
    "id": "workbench.action.terminal.unsplit",
    "metadata": {
      "description": {
        "value": "Unsplit Terminal",
        "original": "Unsplit Terminal"
      }
    }
  },
  {
    "id": "workbench.action.terminal.joinActiveTab",
    "metadata": {
      "description": {
        "value": "Join Terminals",
        "original": "Join Terminals"
      }
    }
  },
  {
    "id": "workbench.action.terminal.join",
    "metadata": {
      "description": {
        "value": "Join Terminals...",
        "original": "Join Terminals..."
      }
    }
  },
  {
    "id": "workbench.action.terminal.splitInActiveWorkspace",
    "metadata": {
      "description": {
        "value": "Split Terminal (In Active Workspace)",
        "original": "Split Terminal (In Active Workspace)"
      }
    }
  },
  {
    "id": "workbench.action.terminal.selectAll",
    "metadata": {
      "description": {
        "value": "Select All",
        "original": "Select All"
      }
    }
  },
  {
    "id": "workbench.action.terminal.new",
    "metadata": {
      "description": {
        "value": "Create New Terminal",
        "original": "Create New Terminal"
      }
    },
    "key": "ctrl+shift+`",
    "when": "terminalProcessSupported || terminalWebExtensionContributedProfile"
  },
  {
    "id": "workbench.action.terminal.kill",
    "metadata": {
      "description": {
        "value": "Kill the Active Terminal Instance",
        "original": "Kill the Active Terminal Instance"
      }
    }
  },
  {
    "id": "workbench.action.terminal.killViewOrEditor",
    "metadata": {
      "description": {
        "value": "Kill Terminal",
        "original": "Kill Terminal",
        "short": "Kill"
      }
    }
  },
  {
    "id": "workbench.action.terminal.killAll",
    "metadata": {
      "description": {
        "value": "Kill All Terminals",
        "original": "Kill All Terminals"
      }
    }
  },
  {
    "id": "workbench.action.terminal.killEditor",
    "metadata": {
      "description": {
        "value": "Kill the Active Terminal in Editor Area",
        "original": "Kill the Active Terminal in Editor Area"
      }
    },
    "key": "ctrl+f4",
    "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated || terminalEditorFocus && terminalFocus && terminalProcessSupported"
  },
  {
    "id": "workbench.action.terminal.killActiveTab",
    "metadata": {
      "description": {
        "value": "Kill Terminal",
        "original": "Kill Terminal",
        "short": "Kill"
      }
    },
    "key": "delete",
    "when": "terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus"
  },
  {
    "id": "workbench.action.terminal.focusHover",
    "metadata": {
      "description": {
        "value": "Focus Hover",
        "original": "Focus Hover"
      }
    },
    "key": "ctrl+k ctrl+i",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalIsOpen || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus"
  },
  {
    "id": "workbench.action.terminal.clear",
    "metadata": {
      "description": {
        "value": "Clear",
        "original": "Clear"
      }
    }
  },
  {
    "id": "workbench.action.terminal.selectDefaultShell",
    "metadata": {
      "description": {
        "value": "Select Default Profile",
        "original": "Select Default Profile"
      }
    }
  },
  {
    "id": "workbench.action.terminal.openSettings",
    "metadata": {
      "description": {
        "value": "Configure Terminal Settings",
        "original": "Configure Terminal Settings"
      }
    }
  },
  {
    "id": "workbench.action.terminal.setDimensions",
    "metadata": {
      "description": {
        "value": "Set Fixed Dimensions",
        "original": "Set Fixed Dimensions"
      }
    }
  },
  {
    "id": "workbench.action.terminal.sizeToContentWidth",
    "metadata": {
      "description": {
        "value": "Toggle Size to Content Width",
        "original": "Toggle Size to Content Width"
      }
    },
    "key": "alt+z",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen || terminalFocus && terminalIsOpen && terminalProcessSupported"
  },
  {
    "id": "workbench.action.terminal.switchTerminal",
    "metadata": {
      "description": {
        "value": "Switch Terminal",
        "original": "Switch Terminal"
      }
    }
  },
  {
    "id": "workbench.action.terminal.focusAtIndex1"
  },
  {
    "id": "workbench.action.terminal.focusAtIndex2"
  },
  {
    "id": "workbench.action.terminal.focusAtIndex3"
  },
  {
    "id": "workbench.action.terminal.focusAtIndex4"
  },
  {
    "id": "workbench.action.terminal.focusAtIndex5"
  },
  {
    "id": "workbench.action.terminal.focusAtIndex6"
  },
  {
    "id": "workbench.action.terminal.focusAtIndex7"
  },
  {
    "id": "workbench.action.terminal.focusAtIndex8"
  },
  {
    "id": "workbench.action.terminal.focusAtIndex9"
  },
  {
    "id": "workbench.action.terminal.focusAccessibleBuffer",
    "metadata": {
      "description": {
        "value": "Focus Accessible Terminal View",
        "original": "Focus Accessible Terminal View"
      }
    },
    "key": "alt+f2",
    "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported"
  },
  {
    "id": "workbench.action.terminal.accessibleBufferGoToNextCommand",
    "metadata": {
      "description": {
        "value": "Accessible Buffer Go to Next Command",
        "original": "Accessible Buffer Go to Next Command"
      }
    },
    "key": "alt+down",
    "when": "accessibleViewIsShown && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
  },
  {
    "id": "workbench.action.terminal.accessibleBufferGoToPreviousCommand",
    "metadata": {
      "description": {
        "value": "Accessible Buffer Go to Previous Command",
        "original": "Accessible Buffer Go to Previous Command"
      }
    },
    "key": "alt+up",
    "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
  },
  {
    "id": "workbench.action.terminal.scrollToBottomAccessibleView",
    "metadata": {
      "description": {
        "value": "Scroll to Accessible View Bottom",
        "original": "Scroll to Accessible View Bottom"
      }
    },
    "key": "ctrl+end",
    "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
  },
  {
    "id": "workbench.action.terminal.scrollToTopAccessibleView",
    "metadata": {
      "description": {
        "value": "Scroll to Accessible View Top",
        "original": "Scroll to Accessible View Top"
      }
    },
    "key": "ctrl+home",
    "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
  },
  {
    "id": "workbench.action.terminal.showTextureAtlas",
    "metadata": {
      "description": {
        "value": "Show Terminal Texture Atlas",
        "original": "Show Terminal Texture Atlas"
      }
    }
  },
  {
    "id": "workbench.action.terminal.writeDataToTerminal",
    "metadata": {
      "description": {
        "value": "Write Data to Terminal",
        "original": "Write Data to Terminal"
      }
    }
  },
  {
    "id": "workbench.action.terminal.recordSession",
    "metadata": {
      "description": {
        "value": "Record Terminal Session",
        "original": "Record Terminal Session"
      }
    }
  },
  {
    "id": "workbench.action.terminal.restartPtyHost",
    "metadata": {
      "description": {
        "value": "Restart Pty Host",
        "original": "Restart Pty Host"
      }
    }
  },
  {
    "id": "workbench.action.terminal.showEnvironmentContributions",
    "metadata": {
      "description": {
        "value": "Show Environment Contributions",
        "original": "Show Environment Contributions"
      }
    }
  },
  {
    "id": "workbench.action.terminal.copyLastCommand",
    "metadata": {
      "description": {
        "value": "Copy Last Command",
        "original": "Copy Last Command"
      }
    }
  },
  {
    "id": "workbench.action.terminal.copyLastCommandOutput",
    "metadata": {
      "description": {
        "value": "Copy Last Command Output",
        "original": "Copy Last Command Output"
      }
    }
  },
  {
    "id": "workbench.action.terminal.copyLastCommandAndLastCommandOutput",
    "metadata": {
      "description": {
        "value": "Copy Last Command and Output",
        "original": "Copy Last Command and Output"
      }
    }
  },
  {
    "id": "workbench.action.terminal.copySelection",
    "metadata": {
      "description": {
        "value": "Copy Selection",
        "original": "Copy Selection"
      }
    },
    "key": "ctrl+shift+c",
    "when": "terminalTextSelectedInFocused || terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected || terminalFocus && terminalTextSelected && terminalTextSelectedInFocused || terminalHasBeenCreated && terminalTextSelected && terminalTextSelectedInFocused || terminalProcessSupported && terminalTextSelected && terminalTextSelectedInFocused"
  },
  {
    "id": "workbench.action.terminal.copyAndClearSelection",
    "metadata": {
      "description": {
        "value": "Copy and Clear Selection",
        "original": "Copy and Clear Selection"
      }
    },
    "key": "ctrl+c",
    "when": "terminalTextSelectedInFocused || terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected || terminalFocus && terminalTextSelected && terminalTextSelectedInFocused || terminalHasBeenCreated && terminalTextSelected && terminalTextSelectedInFocused || terminalProcessSupported && terminalTextSelected && terminalTextSelectedInFocused"
  },
  {
    "id": "workbench.action.terminal.copySelectionAsHtml",
    "metadata": {
      "description": {
        "value": "Copy Selection as HTML",
        "original": "Copy Selection as HTML"
      }
    }
  },
  {
    "id": "workbench.action.terminal.paste",
    "metadata": {
      "description": {
        "value": "Paste into Active Terminal",
        "original": "Paste into Active Terminal"
      }
    },
    "key": "ctrl+v",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "id": "workbench.action.terminal.focusFind",
    "metadata": {
      "description": {
        "value": "Focus Find",
        "original": "Focus Find"
      }
    },
    "key": "ctrl+f",
    "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported"
  },
  {
    "id": "workbench.action.terminal.hideFind",
    "metadata": {
      "description": {
        "value": "Hide Find",
        "original": "Hide Find"
      }
    },
    "key": "escape",
    "when": "terminalFindVisible && terminalFocusInAny && terminalHasBeenCreated || terminalFindVisible && terminalFocusInAny && terminalProcessSupported"
  },
  {
    "id": "workbench.action.terminal.toggleFindRegex",
    "metadata": {
      "description": {
        "value": "Toggle Find Using Regex",
        "original": "Toggle Find Using Regex"
      }
    },
    "key": "alt+r",
    "when": "terminalFindVisible && terminalHasBeenCreated || terminalFindVisible && terminalProcessSupported"
  },
  {
    "id": "workbench.action.terminal.toggleFindWholeWord",
    "metadata": {
      "description": {
        "value": "Toggle Find Using Whole Word",
        "original": "Toggle Find Using Whole Word"
      }
    },
    "key": "alt+w",
    "when": "terminalFindVisible && terminalHasBeenCreated || terminalFindVisible && terminalProcessSupported"
  },
  {
    "id": "workbench.action.terminal.toggleFindCaseSensitive",
    "metadata": {
      "description": {
        "value": "Toggle Find Using Case Sensitive",
        "original": "Toggle Find Using Case Sensitive"
      }
    },
    "key": "alt+c",
    "when": "terminalFindVisible && terminalHasBeenCreated || terminalFindVisible && terminalProcessSupported"
  },
  {
    "id": "workbench.action.terminal.findNext",
    "metadata": {
      "description": {
        "value": "Find Next",
        "original": "Find Next"
      }
    },
    "key": "shift+enter",
    "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported"
  },
  {
    "id": "workbench.action.terminal.findPrevious",
    "metadata": {
      "description": {
        "value": "Find Previous",
        "original": "Find Previous"
      }
    },
    "key": "enter",
    "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported"
  },
  {
    "id": "workbench.action.terminal.searchWorkspace",
    "metadata": {
      "description": {
        "value": "Search Workspace",
        "original": "Search Workspace"
      }
    },
    "key": "ctrl+shift+f",
    "when": "terminalFocus && terminalProcessSupported && terminalTextSelected"
  },
  {
    "id": "workbench.action.terminal.chat.start",
    "metadata": {
      "description": {
        "value": "Start in Terminal",
        "original": "Start in Terminal"
      }
    },
    "key": "ctrl+i",
    "when": "terminalChatAgentRegistered && terminalFocusInAny && terminalHasBeenCreated || terminalChatAgentRegistered && terminalFocusInAny && terminalProcessSupported"
  },
  {
    "id": "workbench.action.terminal.chat.close",
    "metadata": {
      "description": {
        "value": "Close Chat",
        "original": "Close Chat"
      }
    },
    "key": "escape",
    "when": "terminalChatFocus && terminalChatVisible"
  },
  {
    "id": "workbench.action.terminal.chat.discard",
    "metadata": {
      "description": {
        "value": "Discards the terminal current chat response, hide the chat widget, and clear the chat input.",
        "original": "Discards the terminal current chat response, hide the chat widget, and clear the chat input."
      }
    }
  },
  {
    "id": "workbench.action.terminal.chat.runCommand",
    "metadata": {
      "description": {
        "value": "Run Chat Command",
        "original": "Run Chat Command"
      }
    },
    "key": "ctrl+enter",
    "when": "terminalChatResponseContainsCodeBlock && terminalHasBeenCreated && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks || terminalChatResponseContainsCodeBlock && terminalProcessSupported && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks"
  },
  {
    "id": "workbench.action.terminal.chat.runFirstCommand",
    "metadata": {
      "description": {
        "value": "Run First Chat Command",
        "original": "Run First Chat Command"
      }
    },
    "key": "ctrl+enter",
    "when": "terminalChatResponseContainsMultipleCodeBlocks && terminalHasBeenCreated && !terminalChatActiveRequest || terminalChatResponseContainsMultipleCodeBlocks && terminalProcessSupported && !terminalChatActiveRequest"
  },
  {
    "id": "workbench.action.terminal.chat.insertCommand",
    "metadata": {
      "description": {
        "value": "Insert Chat Command",
        "original": "Insert Chat Command"
      }
    },
    "key": "alt+enter",
    "when": "terminalChatResponseContainsCodeBlock && terminalHasBeenCreated && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks || terminalChatResponseContainsCodeBlock && terminalProcessSupported && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks"
  },
  {
    "id": "workbench.action.terminal.chat.insertFirstCommand",
    "metadata": {
      "description": {
        "value": "Insert First Chat Command",
        "original": "Insert First Chat Command"
      }
    },
    "key": "alt+enter",
    "when": "terminalChatResponseContainsMultipleCodeBlocks && terminalHasBeenCreated && !terminalChatActiveRequest || terminalChatResponseContainsMultipleCodeBlocks && terminalProcessSupported && !terminalChatActiveRequest"
  },
  {
    "id": "workbench.action.terminal.chat.viewInChat",
    "metadata": {
      "description": {
        "value": "View in Chat",
        "original": "View in Chat"
      }
    }
  },
  {
    "id": "workbench.action.terminal.chat.makeRequest",
    "metadata": {
      "description": {
        "value": "Make Chat Request",
        "original": "Make Chat Request"
      }
    },
    "key": "enter",
    "when": "terminalChatFocus && terminalHasBeenCreated && !inlineChatEmpty && !terminalChatActiveRequest || terminalChatFocus && terminalProcessSupported && !inlineChatEmpty && !terminalChatActiveRequest"
  },
  {
    "id": "workbench.action.terminal.chat.cancel",
    "metadata": {
      "description": {
        "value": "Cancel Chat",
        "original": "Cancel Chat"
      }
    }
  },
  {
    "id": "workbench.action.terminal.chat.previousFromHistory",
    "metadata": {
      "description": {
        "value": "Previous From History",
        "original": "Previous From History"
      }
    },
    "key": "up",
    "when": "terminalChatFocus"
  },
  {
    "id": "workbench.action.terminal.chat.nextFromHistory",
    "metadata": {
      "description": {
        "value": "Next From History",
        "original": "Next From History"
      }
    },
    "key": "down",
    "when": "terminalChatFocus"
  },
  {
    "id": "workbench.action.terminal.clearPreviousSessionHistory",
    "metadata": {
      "description": {
        "value": "Clear Previous Session History",
        "original": "Clear Previous Session History"
      }
    }
  },
  {
    "id": "workbench.action.terminal.goToRecentDirectory",
    "metadata": {
      "description": {
        "value": "Goes to a recent folder",
        "original": "Goes to a recent folder"
      }
    },
    "key": "ctrl+g",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "id": "workbench.action.terminal.runRecentCommand",
    "metadata": {
      "description": {
        "value": "Run Recent Command...",
        "original": "Run Recent Command..."
      }
    },
    "key": "ctrl+alt+r",
    "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled"
  },
  {
    "id": "workbench.action.terminal.openDetectedLink",
    "metadata": {
      "description": {
        "value": "Open Detected Link...",
        "original": "Open Detected Link..."
      }
    },
    "key": "ctrl+shift+g",
    "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal'"
  },
  {
    "id": "workbench.action.terminal.openUrlLink",
    "metadata": {
      "description": {
        "value": "Opens the last detected URL/URI link in the terminal",
        "original": "Opens the last detected URL/URI link in the terminal"
      }
    }
  },
  {
    "id": "workbench.action.terminal.openFileLink",
    "metadata": {
      "description": {
        "value": "Open Last Local File Link",
        "original": "Open Last Local File Link"
      }
    }
  },
  {
    "id": "workbench.action.terminal.fontZoomIn",
    "metadata": {
      "description": {
        "value": "Increase Font Size",
        "original": "Increase Font Size"
      }
    }
  },
  {
    "id": "workbench.action.terminal.fontZoomOut",
    "metadata": {
      "description": {
        "value": "Decrease Font Size",
        "original": "Decrease Font Size"
      }
    }
  },
  {
    "id": "workbench.action.terminal.fontZoomReset",
    "metadata": {
      "description": {
        "value": "Reset Font Size",
        "original": "Reset Font Size"
      }
    }
  },
  {
    "id": "workbench.action.terminal.toggleStickyScroll",
    "metadata": {
      "description": {
        "value": "Toggle Sticky Scroll",
        "original": "Toggle Sticky Scroll"
      }
    }
  },
  {
    "id": "workbench.action.quickOpenNavigateNextInTerminalPicker"
  },
  {
    "id": "workbench.action.quickOpenNavigatePreviousInTerminalPicker"
  },
  {
    "id": "workbench.action.quickOpenTerm",
    "metadata": {
      "description": {
        "value": "Switch Active Terminal",
        "original": "Switch Active Terminal"
      }
    }
  },
  {
    "id": "workbench.action.terminal.showQuickFixes",
    "metadata": {
      "description": {
        "value": "Show Terminal Quick Fixes",
        "original": "Show Terminal Quick Fixes"
      }
    },
    "key": "ctrl+.",
    "when": "terminalFocus"
  },
  {
    "id": "workbench.action.terminal.selectPrevSuggestion",
    "metadata": {
      "description": {
        "value": "Select the Previous Suggestion",
        "original": "Select the Previous Suggestion"
      }
    },
    "key": "up",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
  },
  {
    "id": "workbench.action.terminal.selectPrevPageSuggestion",
    "metadata": {
      "description": {
        "value": "Select the Previous Page Suggestion",
        "original": "Select the Previous Page Suggestion"
      }
    },
    "key": "pageup",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
  },
  {
    "id": "workbench.action.terminal.selectNextSuggestion",
    "metadata": {
      "description": {
        "value": "Select the Next Suggestion",
        "original": "Select the Next Suggestion"
      }
    },
    "key": "down",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
  },
  {
    "id": "workbench.action.terminal.selectNextPageSuggestion",
    "metadata": {
      "description": {
        "value": "Select the Next Page Suggestion",
        "original": "Select the Next Page Suggestion"
      }
    },
    "key": "pagedown",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
  },
  {
    "id": "workbench.action.terminal.acceptSelectedSuggestion",
    "metadata": {
      "description": {
        "value": "Accept Selected Suggestion",
        "original": "Accept Selected Suggestion"
      }
    },
    "key": "tab",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
  },
  {
    "id": "workbench.action.terminal.acceptSelectedSuggestionEnter",
    "metadata": {
      "description": {
        "value": "Accept Selected Suggestion (Enter)",
        "original": "Accept Selected Suggestion (Enter)"
      }
    },
    "key": "enter",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible && config.terminal.integrated.suggest.runOnEnter != 'ignore' || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible && config.terminal.integrated.suggest.runOnEnter != 'ignore'"
  },
  {
    "id": "workbench.action.terminal.hideSuggestWidget",
    "metadata": {
      "description": {
        "value": "Hide Suggest Widget",
        "original": "Hide Suggest Widget"
      }
    },
    "key": "escape",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
  },
  {
    "id": "workbench.action.terminal.clearSuggestCache",
    "metadata": {
      "description": {
        "value": "Clear Suggest Cache",
        "original": "Clear Suggest Cache"
      }
    }
  },
  {
    "id": "openInTerminal"
  },
  {
    "id": "openInIntegratedTerminal"
  },
  {
    "id": "workbench.action.tasks.manageAutomaticRunning",
    "metadata": {
      "description": "Manage Automatic Tasks"
    }
  },
  {
    "id": "workbench.action.triggerReconnect",
    "metadata": {
      "description": {
        "value": "Connection: Trigger Reconnect",
        "original": "Connection: Trigger Reconnect"
      }
    }
  },
  {
    "id": "workbench.action.pauseSocketWriting",
    "metadata": {
      "description": {
        "value": "Connection: Pause socket writing",
        "original": "Connection: Pause socket writing"
      }
    }
  },
  {
    "id": "resetGettingStartedProgress",
    "metadata": {
      "description": {
        "value": "Reset the progress of all Walkthrough steps on the Welcome Page to make them appear as if they are being viewed for the first time, providing a fresh start to the getting started experience.",
        "original": "Reset the progress of all Walkthrough steps on the Welcome Page to make them appear as if they are being viewed for the first time, providing a fresh start to the getting started experience."
      }
    }
  },
  {
    "id": "editor.emmet.action.expandAbbreviation",
    "key": "tab",
    "when": "config.emmet.triggerExpansionOnTab && editorTextFocus && !editorReadonly && !editorTabMovesFocus"
  },
  {
    "id": "editor.action.toggleScreenReaderAccessibilityMode",
    "metadata": {
      "description": {
        "value": "Toggles an optimized mode for usage with screen readers, braille devices, and other assistive technologies.",
        "original": "Toggles an optimized mode for usage with screen readers, braille devices, and other assistive technologies."
      }
    },
    "key": "shift+alt+f1"
  },
  {
    "id": "workbench.action.inspectKeyMappings",
    "metadata": {
      "description": {
        "value": "Inspect Key Mappings",
        "original": "Inspect Key Mappings"
      }
    }
  },
  {
    "id": "workbench.action.inspectKeyMappingsJSON",
    "metadata": {
      "description": {
        "value": "Inspect Key Mappings (JSON)",
        "original": "Inspect Key Mappings (JSON)"
      }
    }
  },
  {
    "id": "workbench.action.gotoLine",
    "metadata": {
      "description": {
        "value": "Go to Line/Column...",
        "original": "Go to Line/Column..."
      }
    },
    "key": "ctrl+g"
  },
  {
    "id": "editor.action.formatChanges"
  },
  {
    "id": "editor.action.toggleColumnSelection",
    "metadata": {
      "description": {
        "value": "Toggle Column Selection Mode",
        "original": "Toggle Column Selection Mode",
        "mnemonicTitle": "Column &&Selection Mode"
      }
    }
  },
  {
    "id": "editor.action.toggleMinimap",
    "metadata": {
      "description": {
        "value": "Toggle Minimap",
        "original": "Toggle Minimap",
        "mnemonicTitle": "&&Minimap"
      }
    }
  },
  {
    "id": "workbench.action.toggleMultiCursorModifier",
    "metadata": {
      "description": {
        "value": "Toggle Multi-Cursor Modifier",
        "original": "Toggle Multi-Cursor Modifier"
      }
    }
  },
  {
    "id": "editor.action.toggleRenderControlCharacter",
    "metadata": {
      "description": {
        "value": "Toggle Control Characters",
        "original": "Toggle Control Characters",
        "mnemonicTitle": "Render &&Control Characters"
      }
    }
  },
  {
    "id": "editor.action.toggleRenderWhitespace",
    "metadata": {
      "description": {
        "value": "Toggle Render Whitespace",
        "original": "Toggle Render Whitespace",
        "mnemonicTitle": "&&Render Whitespace"
      }
    }
  },
  {
    "id": "workbench.action.toggleKeybindingsLog",
    "metadata": {
      "description": {
        "value": "Toggle Keyboard Shortcuts Troubleshooting",
        "original": "Toggle Keyboard Shortcuts Troubleshooting"
      }
    }
  },
  {
    "id": "editor.action.insertSnippet",
    "metadata": {
      "description": "Insert Snippet",
      "args": [
        {
          "name": "args",
          "schema": {
            "type": "object",
            "properties": {
              "snippet": {
                "type": "string"
              },
              "langId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          }
        }
      ]
    }
  },
  {
    "id": "editor.action.showSnippets"
  },
  {
    "id": "editor.action.surroundWithSnippet",
    "metadata": {
      "description": {
        "value": "Surround with Snippet...",
        "original": "Surround with Snippet..."
      }
    }
  },
  {
    "id": "workbench.action.populateFileFromSnippet",
    "metadata": {
      "description": {
        "value": "Fill File with Snippet",
        "original": "Fill File with Snippet"
      }
    }
  },
  {
    "id": "workbench.action.openSnippets",
    "metadata": {
      "description": {
        "value": "Configure Snippets",
        "original": "Configure Snippets"
      }
    }
  },
  {
    "id": "editor.action.formatDocument.none",
    "key": "shift+alt+f",
    "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly"
  },
  {
    "id": "inlayHints.startReadingLineWithHint",
    "metadata": {
      "description": {
        "value": "Read Line With Inline Hints",
        "original": "Read Line With Inline Hints"
      }
    }
  },
  {
    "id": "inlayHints.stopReadingLineWithHint",
    "metadata": {
      "description": {
        "value": "Stop Inlay Hints Reading",
        "original": "Stop Inlay Hints Reading"
      }
    },
    "key": "escape",
    "when": "isReadingLineWithInlayHints"
  },
  {
    "id": "workbench.action.selectTheme",
    "metadata": {
      "description": {
        "value": "Color Theme",
        "original": "Color Theme"
      }
    },
    "key": "ctrl+k ctrl+t"
  },
  {
    "id": "workbench.action.selectIconTheme",
    "metadata": {
      "description": {
        "value": "File Icon Theme",
        "original": "File Icon Theme"
      }
    }
  },
  {
    "id": "workbench.action.selectProductIconTheme",
    "metadata": {
      "description": {
        "value": "Product Icon Theme",
        "original": "Product Icon Theme"
      }
    }
  },
  {
    "id": "workbench.action.previewColorTheme"
  },
  {
    "id": "workbench.action.generateColorTheme",
    "metadata": {
      "description": {
        "value": "Generate Color Theme From Current Settings",
        "original": "Generate Color Theme From Current Settings"
      }
    }
  },
  {
    "id": "workbench.action.toggleLightDarkThemes",
    "metadata": {
      "description": {
        "value": "Toggle between Light/Dark Themes",
        "original": "Toggle between Light/Dark Themes"
      }
    }
  },
  {
    "id": "workbench.action.browseColorThemesInMarketplace",
    "metadata": {
      "description": {
        "value": "Browse Color Themes in Marketplace",
        "original": "Browse Color Themes in Marketplace"
      }
    }
  },
  {
    "id": "update.showCurrentReleaseNotes",
    "metadata": {
      "description": {
        "value": "Show Release Notes",
        "original": "Show Release Notes",
        "mnemonicTitle": "Show &&Release Notes"
      }
    }
  },
  {
    "id": "developer.showCurrentFileAsReleaseNotes",
    "metadata": {
      "description": {
        "value": "Open Current File as Release Notes",
        "original": "Open Current File as Release Notes",
        "mnemonicTitle": "Show &&Release Notes"
      }
    }
  },
  {
    "id": "workbench.action.download",
    "metadata": {
      "description": {
        "value": "Download Code - OSS Dev",
        "original": "Download Code - OSS Dev"
      }
    }
  },
  {
    "id": "update.checkForUpdate",
    "metadata": {
      "description": {
        "value": "Check for Updates...",
        "original": "Check for Updates..."
      }
    }
  },
  {
    "id": "update.downloadUpdate",
    "metadata": {
      "description": {
        "value": "Download Update",
        "original": "Download Update"
      }
    }
  },
  {
    "id": "update.installUpdate",
    "metadata": {
      "description": {
        "value": "Install Update",
        "original": "Install Update"
      }
    }
  },
  {
    "id": "update.restartToUpdate",
    "metadata": {
      "description": {
        "value": "Restart to Update",
        "original": "Restart to Update"
      }
    }
  },
  {
    "id": "_update.applyupdate",
    "metadata": {
      "description": {
        "value": "Apply Update...",
        "original": "Apply Update..."
      }
    }
  },
  {
    "id": "workbench.action.openWalkthrough",
    "metadata": {
      "description": {
        "value": "Opens a Walkthrough to help you get started in VS Code.",
        "original": "Opens a Walkthrough to help you get started in VS Code."
      }
    }
  },
  {
    "id": "welcome.goBack",
    "metadata": {
      "description": {
        "value": "Go Back",
        "original": "Go Back"
      }
    },
    "key": "escape",
    "when": "inWelcome && activeEditor == 'gettingStartedPage'"
  },
  {
    "id": "walkthroughs.selectStep"
  },
  {
    "id": "welcome.markStepComplete",
    "metadata": {
      "description": "Mark Step Complete"
    }
  },
  {
    "id": "welcome.markStepIncomplete",
    "metadata": {
      "description": "Mark Step Incomplete"
    }
  },
  {
    "id": "welcome.showAllWalkthroughs",
    "metadata": {
      "description": {
        "value": "Open Walkthrough...",
        "original": "Open Walkthrough..."
      }
    }
  },
  {
    "id": "workbench.action.showInteractivePlayground",
    "metadata": {
      "description": {
        "value": "Opens an interactive playground for learning about the editor.",
        "original": "Opens an interactive playground for learning about the editor."
      }
    }
  },
  {
    "id": "workbench.action.interactivePlayground.arrowUp",
    "key": "up",
    "when": "interactivePlaygroundFocus && !editorTextFocus"
  },
  {
    "id": "workbench.action.interactivePlayground.arrowDown",
    "key": "down",
    "when": "interactivePlaygroundFocus && !editorTextFocus"
  },
  {
    "id": "workbench.action.interactivePlayground.pageUp",
    "key": "pageup",
    "when": "interactivePlaygroundFocus && !editorTextFocus"
  },
  {
    "id": "workbench.action.interactivePlayground.pageDown",
    "key": "pagedown",
    "when": "interactivePlaygroundFocus && !editorTextFocus"
  },
  {
    "id": "welcome.showNewFileEntries",
    "metadata": {
      "description": {
        "value": "New File...",
        "original": "New File..."
      }
    },
    "key": "ctrl+alt+win+n"
  },
  {
    "id": "editor.showCallHierarchy",
    "metadata": {
      "description": {
        "value": "Peek Call Hierarchy",
        "original": "Peek Call Hierarchy"
      }
    },
    "key": "shift+alt+h",
    "when": "editorHasCallHierarchyProvider && editorTextFocus && !inReferenceSearchEditor"
  },
  {
    "id": "editor.showIncomingCalls",
    "metadata": {
      "description": {
        "value": "Show Incoming Calls",
        "original": "Show Incoming Calls"
      }
    },
    "key": "shift+alt+h",
    "when": "callHierarchyVisible && callHierarchyDirection == 'outgoingCalls'"
  },
  {
    "id": "editor.showOutgoingCalls",
    "metadata": {
      "description": {
        "value": "Show Outgoing Calls",
        "original": "Show Outgoing Calls"
      }
    },
    "key": "shift+alt+h",
    "when": "callHierarchyVisible && callHierarchyDirection == 'incomingCalls'"
  },
  {
    "id": "editor.refocusCallHierarchy",
    "metadata": {
      "description": {
        "value": "Refocus Call Hierarchy",
        "original": "Refocus Call Hierarchy"
      }
    },
    "key": "shift+enter",
    "when": "callHierarchyVisible"
  },
  {
    "id": "editor.closeCallHierarchy",
    "metadata": {
      "description": "Close"
    },
    "key": "escape",
    "when": "callHierarchyVisible && !config.editor.stablePeek"
  },
  {
    "id": "editor.showTypeHierarchy",
    "metadata": {
      "description": {
        "value": "Peek Type Hierarchy",
        "original": "Peek Type Hierarchy"
      }
    }
  },
  {
    "id": "editor.showSupertypes",
    "metadata": {
      "description": {
        "value": "Show Supertypes",
        "original": "Show Supertypes"
      }
    },
    "key": "shift+alt+h",
    "when": "typeHierarchyVisible && typeHierarchyDirection == 'subtypes'"
  },
  {
    "id": "editor.showSubtypes",
    "metadata": {
      "description": {
        "value": "Show Subtypes",
        "original": "Show Subtypes"
      }
    },
    "key": "shift+alt+h",
    "when": "typeHierarchyVisible && typeHierarchyDirection == 'supertypes'"
  },
  {
    "id": "editor.refocusTypeHierarchy",
    "metadata": {
      "description": {
        "value": "Refocus Type Hierarchy",
        "original": "Refocus Type Hierarchy"
      }
    },
    "key": "shift+enter",
    "when": "typeHierarchyVisible"
  },
  {
    "id": "editor.closeTypeHierarchy",
    "metadata": {
      "description": "Close"
    },
    "key": "escape",
    "when": "typeHierarchyVisible && !config.editor.stablePeek"
  },
  {
    "id": "outline.collapse",
    "metadata": {
      "description": "Collapse All"
    }
  },
  {
    "id": "outline.expand",
    "metadata": {
      "description": "Expand All"
    }
  },
  {
    "id": "outline.followCursor",
    "metadata": {
      "description": "Follow Cursor"
    }
  },
  {
    "id": "outline.filterOnType",
    "metadata": {
      "description": "Filter on Type"
    }
  },
  {
    "id": "outline.sortByPosition",
    "metadata": {
      "description": "Sort By: Position"
    }
  },
  {
    "id": "outline.sortByName",
    "metadata": {
      "description": "Sort By: Name"
    }
  },
  {
    "id": "outline.sortByKind",
    "metadata": {
      "description": "Sort By: Category"
    }
  },
  {
    "id": "editor.detectLanguage",
    "metadata": {
      "description": {
        "value": "Detect Language from Content",
        "original": "Detect Language from Content"
      }
    },
    "key": "shift+alt+d",
    "when": "editorTextFocus && !notebookEditable"
  },
  {
    "id": "editor.inlayHints.Reset",
    "metadata": {
      "description": {
        "value": "Reset Language Status Interaction Counter",
        "original": "Reset Language Status Interaction Counter"
      }
    }
  },
  {
    "id": "workbench.getCodeExchangeProxyEndpoints"
  },
  {
    "id": "workbench.profiles.actions.createTemporaryProfile",
    "metadata": {
      "description": {
        "value": "Create a Temporary Profile",
        "original": "Create a Temporary Profile"
      }
    }
  },
  {
    "id": "workbench.profiles.actions.cleanupProfiles",
    "metadata": {
      "description": {
        "value": "Cleanup Profiles",
        "original": "Cleanup Profiles"
      }
    }
  },
  {
    "id": "workbench.profiles.actions.resetWorkspaces",
    "metadata": {
      "description": {
        "value": "Reset Workspace Profiles Associations",
        "original": "Reset Workspace Profiles Associations"
      }
    }
  },
  {
    "id": "workbench.action.continueOn.extensions",
    "metadata": {
      "description": "Install additional development environment options"
    }
  },
  {
    "id": "files.openTimeline"
  },
  {
    "id": "workbench.action.localHistory.compareWithFile",
    "metadata": {
      "description": {
        "value": "Compare with File",
        "original": "Compare with File"
      }
    }
  },
  {
    "id": "workbench.action.localHistory.compareWithPrevious",
    "metadata": {
      "description": {
        "value": "Compare with Previous",
        "original": "Compare with Previous"
      }
    }
  },
  {
    "id": "workbench.action.localHistory.selectForCompare",
    "metadata": {
      "description": {
        "value": "Select for Compare",
        "original": "Select for Compare"
      }
    }
  },
  {
    "id": "workbench.action.localHistory.compareWithSelected",
    "metadata": {
      "description": {
        "value": "Compare with Selected",
        "original": "Compare with Selected"
      }
    }
  },
  {
    "id": "workbench.action.localHistory.open",
    "metadata": {
      "description": {
        "value": "Show Contents",
        "original": "Show Contents"
      }
    }
  },
  {
    "id": "workbench.action.localHistory.restoreViaEditor",
    "metadata": {
      "description": {
        "value": "Restore Contents",
        "original": "Restore Contents"
      }
    }
  },
  {
    "id": "workbench.action.localHistory.restore",
    "metadata": {
      "description": {
        "value": "Restore Contents",
        "original": "Restore Contents"
      }
    }
  },
  {
    "id": "workbench.action.localHistory.restoreViaPicker",
    "metadata": {
      "description": {
        "value": "Find Entry to Restore",
        "original": "Find Entry to Restore"
      }
    }
  },
  {
    "id": "workbench.action.localHistory.rename",
    "metadata": {
      "description": {
        "value": "Rename",
        "original": "Rename"
      }
    }
  },
  {
    "id": "workbench.action.localHistory.delete",
    "metadata": {
      "description": {
        "value": "Delete",
        "original": "Delete"
      }
    }
  },
  {
    "id": "workbench.action.localHistory.deleteAll",
    "metadata": {
      "description": {
        "value": "Delete All",
        "original": "Delete All"
      }
    }
  },
  {
    "id": "workbench.action.localHistory.create",
    "metadata": {
      "description": {
        "value": "Create Entry",
        "original": "Create Entry"
      }
    }
  },
  {
    "id": "workbench.trust.configure",
    "metadata": {
      "description": {
        "value": "Configure Workspace Trust Settings",
        "original": "Configure Workspace Trust Settings"
      }
    }
  },
  {
    "id": "workbench.trust.manage",
    "metadata": {
      "description": {
        "value": "Manage Workspace Trust",
        "original": "Manage Workspace Trust"
      }
    }
  },
  {
    "id": "workbench.action.openWorkspaceFromEditor",
    "metadata": {
      "description": {
        "value": "Open Workspace",
        "original": "Open Workspace"
      }
    }
  },
  {
    "id": "list.resizeColumn",
    "metadata": {
      "description": {
        "value": "Resize Column",
        "original": "Resize Column"
      }
    }
  },
  {
    "id": "signals.sounds.help",
    "metadata": {
      "description": "List all accessibility sounds, noises, or audio cues and configure their settings"
    }
  },
  {
    "id": "accessibility.announcement.help",
    "metadata": {
      "description": "List all accessibility announcements, alerts, braille messages, and configure their settings"
    }
  },
  {
    "id": "workbench.action.zoomIn",
    "metadata": {
      "description": {
        "value": "Zoom In",
        "original": "Zoom In",
        "mnemonicTitle": "&&Zoom In"
      }
    },
    "key": "ctrl+="
  },
  {
    "id": "workbench.action.zoomOut",
    "metadata": {
      "description": {
        "value": "Zoom Out",
        "original": "Zoom Out",
        "mnemonicTitle": "&&Zoom Out"
      }
    },
    "key": "ctrl+-"
  },
  {
    "id": "workbench.action.zoomReset",
    "metadata": {
      "description": {
        "value": "Reset Zoom",
        "original": "Reset Zoom",
        "mnemonicTitle": "&&Reset Zoom"
      }
    },
    "key": "ctrl+numpad0"
  },
  {
    "id": "workbench.action.switchWindow",
    "metadata": {
      "description": {
        "value": "Switch Window...",
        "original": "Switch Window..."
      }
    }
  },
  {
    "id": "workbench.action.quickSwitchWindow",
    "metadata": {
      "description": {
        "value": "Quick Switch Window...",
        "original": "Quick Switch Window..."
      }
    }
  },
  {
    "id": "workbench.action.closeWindow",
    "metadata": {
      "description": {
        "value": "Close Window",
        "original": "Close Window",
        "mnemonicTitle": "Clos&&e Window"
      }
    },
    "key": "alt+f4"
  },
  {
    "id": "workbench.action.quit"
  },
  {
    "id": "workbench.action.reloadWindowWithExtensionsDisabled",
    "metadata": {
      "description": {
        "value": "Reload With Extensions Disabled",
        "original": "Reload With Extensions Disabled"
      }
    }
  },
  {
    "id": "workbench.action.configureRuntimeArguments",
    "metadata": {
      "description": {
        "value": "Configure Runtime Arguments",
        "original": "Configure Runtime Arguments"
      }
    }
  },
  {
    "id": "workbench.action.toggleDevTools",
    "metadata": {
      "description": {
        "value": "Toggle Developer Tools",
        "original": "Toggle Developer Tools"
      }
    },
    "key": "ctrl+shift+i",
    "when": "isDevelopment"
  },
  {
    "id": "workbench.action.openUserDataFolder",
    "metadata": {
      "description": {
        "value": "Open User Data Folder",
        "original": "Open User Data Folder"
      }
    }
  },
  {
    "id": "workbench.action.showGPUInfo",
    "metadata": {
      "description": {
        "value": "Show GPU Info",
        "original": "Show GPU Info"
      }
    }
  },
  {
    "id": "editor.action.measureExtHostLatency",
    "metadata": {
      "description": {
        "value": "Measure Extension Host Latency",
        "original": "Measure Extension Host Latency"
      }
    }
  },
  {
    "id": "workbench.action.restartExtensionHost",
    "metadata": {
      "description": {
        "value": "Restart Extension Host",
        "original": "Restart Extension Host"
      }
    }
  },
  {
    "id": "workbench.action.openLogsFolder",
    "metadata": {
      "description": {
        "value": "Open Logs Folder",
        "original": "Open Logs Folder"
      }
    }
  },
  {
    "id": "workbench.action.openExtensionLogsFolder",
    "metadata": {
      "description": {
        "value": "Open Extension Logs Folder",
        "original": "Open Extension Logs Folder"
      }
    }
  },
  {
    "id": "revealFileInOS",
    "key": "shift+alt+r",
    "when": "!editorFocus"
  },
  {
    "id": "workbench.action.files.revealActiveFileInWindows",
    "key": "ctrl+k r"
  },
  {
    "id": "editor.action.startDebugTextMate",
    "metadata": {
      "description": {
        "value": "Start TextMate Syntax Grammar Logging",
        "original": "Start TextMate Syntax Grammar Logging"
      }
    }
  },
  {
    "id": "workbench.extensions.action.debugExtensionHost",
    "metadata": {
      "description": {
        "value": "Start Debugging Extension Host In New Window",
        "original": "Start Debugging Extension Host In New Window"
      }
    }
  },
  {
    "id": "workbench.extensions.action.extensionHostProfile",
    "metadata": {
      "description": {
        "value": "Start Extension Host Profile",
        "original": "Start Extension Host Profile"
      }
    }
  },
  {
    "id": "workbench.extensions.action.stopExtensionHostProfile",
    "metadata": {
      "description": {
        "value": "Stop Extension Host Profile",
        "original": "Stop Extension Host Profile"
      }
    }
  },
  {
    "id": "workbench.extensions.action.saveExtensionHostProfile",
    "metadata": {
      "description": {
        "value": "Save Extension Host Profile",
        "original": "Save Extension Host Profile"
      }
    }
  },
  {
    "id": "workbench.extensions.action.openExtensionHostProfile",
    "metadata": {
      "description": {
        "value": "Open Extension Host Profile",
        "original": "Open Extension Host Profile"
      }
    }
  },
  {
    "id": "workbench.action.troubleshootIssue.start",
    "metadata": {
      "description": {
        "value": "Troubleshoot Issue...",
        "original": "Troubleshoot Issue..."
      }
    }
  },
  {
    "id": "workbench.action.troubleshootIssue.stop",
    "metadata": {
      "description": {
        "value": "Stop Troubleshoot Issue",
        "original": "Stop Troubleshoot Issue"
      }
    }
  },
  {
    "id": "workbench.action.openProcessExplorer",
    "metadata": {
      "description": {
        "value": "Open Process Explorer",
        "original": "Open Process Explorer"
      }
    }
  },
  {
    "id": "workbench.action.stopTracing",
    "metadata": {
      "description": {
        "value": "Stop Tracing",
        "original": "Stop Tracing"
      }
    }
  },
  {
    "id": "_issues.getSystemStatus"
  },
  {
    "id": "workbench.action.files.openLocalFile",
    "metadata": {
      "description": "Open Local File...",
      "args": []
    },
    "key": "ctrl+o",
    "when": "remoteFileDialogVisible"
  },
  {
    "id": "workbench.action.files.openLocalFolder",
    "metadata": {
      "description": "Open Local Folder...",
      "args": []
    },
    "key": "ctrl+k ctrl+o",
    "when": "remoteFileDialogVisible"
  },
  {
    "id": "workbench.action.files.saveLocalFile",
    "metadata": {
      "description": "Save Local File...",
      "args": []
    },
    "key": "ctrl+shift+s",
    "when": "remoteFileDialogVisible"
  },
  {
    "id": "_workbench.captureSyntaxTokens"
  },
  {
    "id": "_workbench.captureTreeSitterSyntaxTokens"
  },
  {
    "id": "workbench.userData.actions.openSyncBackupsFolder",
    "metadata": {
      "description": {
        "value": "Open Local Backups Folder",
        "original": "Open Local Backups Folder"
      }
    }
  },
  {
    "id": "workbench.userDataSync.actions.downloadSyncActivity",
    "metadata": {
      "description": {
        "value": "Download Settings Sync Activity",
        "original": "Download Settings Sync Activity"
      }
    }
  },
  {
    "id": "workbench.action.terminal.openNativeConsole",
    "key": "ctrl+shift+c",
    "when": "!terminalFocus"
  },
  {
    "id": "workbench.action.webview.openDeveloperTools",
    "metadata": {
      "description": "Opens Developer Tools for active webviews"
    }
  },
  {
    "id": "workbench.action.localHistory.revealInOS",
    "metadata": {
      "description": {
        "value": "Reveal in File Explorer",
        "original": "Reveal in File Explorer"
      }
    }
  },
  {
    "id": "merge.dev.openContentsJson",
    "metadata": {
      "description": {
        "value": "Open Merge Editor State from JSON",
        "original": "Open Merge Editor State from JSON"
      }
    }
  },
  {
    "id": "merge.dev.openSelectionInTemporaryMergeEditor",
    "metadata": {
      "description": {
        "value": "Open Selection In Temporary Merge Editor",
        "original": "Open Selection In Temporary Merge Editor"
      }
    }
  },
  {
    "id": "workbench.action.chat.startVoiceChat",
    "metadata": {
      "description": {
        "value": "Start Voice Chat",
        "original": "Start Voice Chat"
      }
    },
    "key": "ctrl+i",
    "when": "chatIsEnabled && hasSpeechProvider && inChatInput && !chatSessionRequestInProgress && !editorFocus && !notebookEditorFocused && !scopedVoiceChatGettingReady && !speechToTextInProgress && !terminalChatActiveRequest || chatIsEnabled && hasSpeechProvider && inlineChatFocused && !chatSessionRequestInProgress && !editorFocus && !notebookEditorFocused && !scopedVoiceChatGettingReady && !speechToTextInProgress && !terminalChatActiveRequest"
  },
  {
    "id": "workbench.action.chat.installProviderForVoiceChat",
    "metadata": {
      "description": {
        "value": "Start Voice Chat",
        "original": "Start Voice Chat"
      }
    }
  },
  {
    "id": "workbench.action.chat.voiceChatInChatView",
    "metadata": {
      "description": {
        "value": "Voice Chat in Chat View",
        "original": "Voice Chat in Chat View"
      }
    }
  },
  {
    "id": "workbench.action.chat.holdToVoiceChatInChatView",
    "metadata": {
      "description": {
        "value": "Hold to Voice Chat in Chat View",
        "original": "Hold to Voice Chat in Chat View"
      }
    },
    "key": "ctrl+i",
    "when": "chatIsEnabled && hasSpeechProvider && !chatSessionRequestInProgress && !editorFocus && !inChatInput && !inlineChatFocused && !notebookEditorFocused"
  },
  {
    "id": "workbench.action.chat.quickVoiceChat",
    "metadata": {
      "description": {
        "value": "Quick Voice Chat",
        "original": "Quick Voice Chat"
      }
    }
  },
  {
    "id": "workbench.action.chat.inlineVoiceChat",
    "metadata": {
      "description": {
        "value": "Inline Voice Chat",
        "original": "Inline Voice Chat"
      }
    }
  },
  {
    "id": "workbench.action.chat.stopListening",
    "metadata": {
      "description": {
        "value": "Stop Listening",
        "original": "Stop Listening"
      }
    },
    "key": "escape",
    "when": "voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || voiceChatInProgress && scopedVoiceChatInProgress == 'terminal' || voiceChatInProgress && scopedVoiceChatInProgress == 'view'"
  },
  {
    "id": "workbench.action.chat.stopListeningAndSubmit",
    "metadata": {
      "description": {
        "value": "Stop Listening and Submit",
        "original": "Stop Listening and Submit"
      }
    },
    "key": "ctrl+i",
    "when": "inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'terminal' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'view' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'terminal' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'view'"
  },
  {
    "id": "workbench.action.chat.readChatResponseAloud",
    "metadata": {
      "description": {
        "value": "Read Aloud",
        "original": "Read Aloud"
      }
    }
  },
  {
    "id": "workbench.action.chat.stopReadChatItemAloud",
    "metadata": {
      "description": {
        "value": "Stop Reading Aloud",
        "original": "Stop Reading Aloud"
      }
    },
    "key": "escape",
    "when": "scopedChatSynthesisInProgress"
  },
  {
    "id": "workbench.action.speech.stopReadAloud",
    "metadata": {
      "description": {
        "value": "Stop Reading Aloud",
        "original": "Stop Reading Aloud"
      }
    },
    "key": "escape",
    "when": "scopedChatSynthesisInProgress && textToSpeechInProgress"
  },
  {
    "id": "inlineChat.holdForSpeech",
    "metadata": {
      "description": {
        "value": "Hold for Speech",
        "original": "Hold for Speech"
      }
    },
    "key": "ctrl+i",
    "when": "hasSpeechProvider && inlineChatHasProvider && inlineChatVisible && textInputFocus"
  }
]